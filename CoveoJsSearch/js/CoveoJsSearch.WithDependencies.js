if( window.jstz === undefined) {
/**
 * This script gives you the zone info key representing your device's time zone setting.
 *
 * @name jsTimezoneDetect
 * @version 1.0.5
 * @author Jon Nylander
 * @license MIT License - http://www.opensource.org/licenses/mit-license.php
 *
 * For usage and examples, visit:
 * http://pellepim.bitbucket.org/jstz/
 *
 * Copyright (c) Jon Nylander
 */

/*jslint undef: true */
/*global console, exports*/

(function(root) {
  /**
   * Namespace to hold all the code for timezone detection.
   */
  var jstz = (function () {
      'use strict';
      var HEMISPHERE_SOUTH = 's',
          
          /**
           * Gets the offset in minutes from UTC for a certain date.
           * @param {Date} date
           * @returns {Number}
           */
          get_date_offset = function (date) {
              var offset = -date.getTimezoneOffset();
              return (offset !== null ? offset : 0);
          },

          get_date = function (year, month, date) {
              var d = new Date();
              if (year !== undefined) {
                d.setFullYear(year);
              }
              d.setMonth(month);
              d.setDate(date);
              return d;
          },

          get_january_offset = function (year) {
              return get_date_offset(get_date(year, 0 ,2));
          },

          get_june_offset = function (year) {
              return get_date_offset(get_date(year, 5, 2));
          },

          /**
           * Private method.
           * Checks whether a given date is in daylight saving time.
           * If the date supplied is after august, we assume that we're checking
           * for southern hemisphere DST.
           * @param {Date} date
           * @returns {Boolean}
           */
          date_is_dst = function (date) {
              var is_southern = date.getMonth() > 7,
                  base_offset = is_southern ? get_june_offset(date.getFullYear()) : 
                                              get_january_offset(date.getFullYear()),
                  date_offset = get_date_offset(date),
                  is_west = base_offset < 0,
                  dst_offset = base_offset - date_offset;
                  
              if (!is_west && !is_southern) {
                  return dst_offset < 0;
              }

              return dst_offset !== 0;
          },

          /**
           * This function does some basic calculations to create information about
           * the user's timezone. It uses REFERENCE_YEAR as a solid year for which
           * the script has been tested rather than depend on the year set by the
           * client device.
           *
           * Returns a key that can be used to do lookups in jstz.olson.timezones.
           * eg: "720,1,2". 
           *
           * @returns {String}
           */

          lookup_key = function () {
              var january_offset = get_january_offset(),
                  june_offset = get_june_offset(),
                  diff = january_offset - june_offset;

              if (diff < 0) {
                  return january_offset + ",1";
              } else if (diff > 0) {
                  return june_offset + ",1," + HEMISPHERE_SOUTH;
              }

              return january_offset + ",0";
          },

          /**
           * Uses get_timezone_info() to formulate a key to use in the olson.timezones dictionary.
           *
           * Returns a primitive object on the format:
           * {'timezone': TimeZone, 'key' : 'the key used to find the TimeZone object'}
           *
           * @returns Object
           */
          determine = function () {
              var key = lookup_key();
              return new jstz.TimeZone(jstz.olson.timezones[key]);
          },

          /**
           * This object contains information on when daylight savings starts for
           * different timezones.
           *
           * The list is short for a reason. Often we do not have to be very specific
           * to single out the correct timezone. But when we do, this list comes in
           * handy.
           *
           * Each value is a date denoting when daylight savings starts for that timezone.
           */
          dst_start_for = function (tz_name) {

            var ru_pre_dst_change = new Date(2010, 6, 15, 1, 0, 0, 0), // In 2010 Russia had DST, this allows us to detect Russia :)
                dst_starts = {
                    'America/Denver': new Date(2011, 2, 13, 3, 0, 0, 0),
                    'America/Mazatlan': new Date(2011, 3, 3, 3, 0, 0, 0),
                    'America/Chicago': new Date(2011, 2, 13, 3, 0, 0, 0),
                    'America/Mexico_City': new Date(2011, 3, 3, 3, 0, 0, 0),
                    'America/Asuncion': new Date(2012, 9, 7, 3, 0, 0, 0),
                    'America/Santiago': new Date(2012, 9, 3, 3, 0, 0, 0),
                    'America/Campo_Grande': new Date(2012, 9, 21, 5, 0, 0, 0),
                    'America/Montevideo': new Date(2011, 9, 2, 3, 0, 0, 0),
                    'America/Sao_Paulo': new Date(2011, 9, 16, 5, 0, 0, 0),
                    'America/Los_Angeles': new Date(2011, 2, 13, 8, 0, 0, 0),
                    'America/Santa_Isabel': new Date(2011, 3, 5, 8, 0, 0, 0),
                    'America/Havana': new Date(2012, 2, 10, 2, 0, 0, 0),
                    'America/New_York': new Date(2012, 2, 10, 7, 0, 0, 0),
                    'Europe/Helsinki': new Date(2013, 2, 31, 5, 0, 0, 0),
                    'Pacific/Auckland': new Date(2011, 8, 26, 7, 0, 0, 0),
                    'America/Halifax': new Date(2011, 2, 13, 6, 0, 0, 0),
                    'America/Goose_Bay': new Date(2011, 2, 13, 2, 1, 0, 0),
                    'America/Miquelon': new Date(2011, 2, 13, 5, 0, 0, 0),
                    'America/Godthab': new Date(2011, 2, 27, 1, 0, 0, 0),
                    'Europe/Moscow': ru_pre_dst_change,
                    'Asia/Amman': new Date(2013, 2, 29, 1, 0, 0, 0),
                    'Asia/Beirut': new Date(2013, 2, 31, 2, 0, 0, 0),
                    'Asia/Damascus': new Date(2013, 3, 6, 2, 0, 0, 0),
                    'Asia/Jerusalem': new Date(2013, 2, 29, 5, 0, 0, 0),
                    'Asia/Yekaterinburg': ru_pre_dst_change,
                    'Asia/Omsk': ru_pre_dst_change,
                    'Asia/Krasnoyarsk': ru_pre_dst_change,
                    'Asia/Irkutsk': ru_pre_dst_change,
                    'Asia/Yakutsk': ru_pre_dst_change,
                    'Asia/Vladivostok': ru_pre_dst_change,
                    'Asia/Baku': new Date(2013, 2, 31, 4, 0, 0),
                    'Asia/Yerevan': new Date(2013, 2, 31, 3, 0, 0),
                    'Asia/Kamchatka': ru_pre_dst_change,
                    'Asia/Gaza': new Date(2010, 2, 27, 4, 0, 0),
                    'Africa/Cairo': new Date(2010, 4, 1, 3, 0, 0),
                    'Europe/Minsk': ru_pre_dst_change,
                    'Pacific/Apia': new Date(2010, 10, 1, 1, 0, 0, 0),
                    'Pacific/Fiji': new Date(2010, 11, 1, 0, 0, 0),
                    'Australia/Perth': new Date(2008, 10, 1, 1, 0, 0, 0)
                };

              return dst_starts[tz_name];
          };

      return {
          determine: determine,
          date_is_dst: date_is_dst,
          dst_start_for: dst_start_for 
      };
  }());

  /**
   * Simple object to perform ambiguity check and to return name of time zone.
   */
  jstz.TimeZone = function (tz_name) {
      'use strict';
        /**
         * The keys in this object are timezones that we know may be ambiguous after
         * a preliminary scan through the olson_tz object.
         *
         * The array of timezones to compare must be in the order that daylight savings
         * starts for the regions.
         */
      var AMBIGUITIES = {
              'America/Denver':       ['America/Denver', 'America/Mazatlan'],
              'America/Chicago':      ['America/Chicago', 'America/Mexico_City'],
              'America/Santiago':     ['America/Santiago', 'America/Asuncion', 'America/Campo_Grande'],
              'America/Montevideo':   ['America/Montevideo', 'America/Sao_Paulo'],
              'Asia/Beirut':          ['Asia/Amman', 'Asia/Jerusalem', 'Asia/Beirut', 'Europe/Helsinki','Asia/Damascus'],
              'Pacific/Auckland':     ['Pacific/Auckland', 'Pacific/Fiji'],
              'America/Los_Angeles':  ['America/Los_Angeles', 'America/Santa_Isabel'],
              'America/New_York':     ['America/Havana', 'America/New_York'],
              'America/Halifax':      ['America/Goose_Bay', 'America/Halifax'],
              'America/Godthab':      ['America/Miquelon', 'America/Godthab'],
              'Asia/Dubai':           ['Europe/Moscow'],
              'Asia/Dhaka':           ['Asia/Yekaterinburg'],
              'Asia/Jakarta':         ['Asia/Omsk'],
              'Asia/Shanghai':        ['Asia/Krasnoyarsk', 'Australia/Perth'],
              'Asia/Tokyo':           ['Asia/Irkutsk'],
              'Australia/Brisbane':   ['Asia/Yakutsk'],
              'Pacific/Noumea':       ['Asia/Vladivostok'],
              'Pacific/Tarawa':       ['Asia/Kamchatka', 'Pacific/Fiji'],
              'Pacific/Tongatapu':    ['Pacific/Apia'],
              'Asia/Baghdad':         ['Europe/Minsk'],
              'Asia/Baku':            ['Asia/Yerevan','Asia/Baku'],
              'Africa/Johannesburg':  ['Asia/Gaza', 'Africa/Cairo']
          },

          timezone_name = tz_name,
          
          /**
           * Checks if a timezone has possible ambiguities. I.e timezones that are similar.
           *
           * For example, if the preliminary scan determines that we're in America/Denver.
           * We double check here that we're really there and not in America/Mazatlan.
           *
           * This is done by checking known dates for when daylight savings start for different
           * timezones during 2010 and 2011.
           */
          ambiguity_check = function () {
              var ambiguity_list = AMBIGUITIES[timezone_name],
                  length = ambiguity_list.length,
                  i = 0,
                  tz = ambiguity_list[0];

              for (; i < length; i += 1) {
                  tz = ambiguity_list[i];

                  if (jstz.date_is_dst(jstz.dst_start_for(tz))) {
                      timezone_name = tz;
                      return;
                  }
              }
          },

          /**
           * Checks if it is possible that the timezone is ambiguous.
           */
          is_ambiguous = function () {
              return typeof (AMBIGUITIES[timezone_name]) !== 'undefined';
          };

      if (is_ambiguous()) {
          ambiguity_check();
      }

      return {
          name: function () {
              return timezone_name;
          }
      };
  };

  jstz.olson = {};

  /*
   * The keys in this dictionary are comma separated as such:
   *
   * First the offset compared to UTC time in minutes.
   *
   * Then a flag which is 0 if the timezone does not take daylight savings into account and 1 if it
   * does.
   *
   * Thirdly an optional 's' signifies that the timezone is in the southern hemisphere,
   * only interesting for timezones with DST.
   *
   * The mapped arrays is used for constructing the jstz.TimeZone object from within
   * jstz.determine_timezone();
   */
  jstz.olson.timezones = {
      '-720,0'   : 'Pacific/Majuro',
      '-660,0'   : 'Pacific/Pago_Pago',
      '-600,1'   : 'America/Adak',
      '-600,0'   : 'Pacific/Honolulu',
      '-570,0'   : 'Pacific/Marquesas',
      '-540,0'   : 'Pacific/Gambier',
      '-540,1'   : 'America/Anchorage',
      '-480,1'   : 'America/Los_Angeles',
      '-480,0'   : 'Pacific/Pitcairn',
      '-420,0'   : 'America/Phoenix',
      '-420,1'   : 'America/Denver',
      '-360,0'   : 'America/Guatemala',
      '-360,1'   : 'America/Chicago',
      '-360,1,s' : 'Pacific/Easter',
      '-300,0'   : 'America/Bogota',
      '-300,1'   : 'America/New_York',
      '-270,0'   : 'America/Caracas',
      '-240,1'   : 'America/Halifax',
      '-240,0'   : 'America/Santo_Domingo',
      '-240,1,s' : 'America/Santiago',
      '-210,1'   : 'America/St_Johns',
      '-180,1'   : 'America/Godthab',
      '-180,0'   : 'America/Argentina/Buenos_Aires',
      '-180,1,s' : 'America/Montevideo',
      '-120,0'   : 'America/Noronha',
      '-120,1'   : 'America/Noronha',
      '-60,1'    : 'Atlantic/Azores',
      '-60,0'    : 'Atlantic/Cape_Verde',
      '0,0'      : 'UTC',
      '0,1'      : 'Europe/London',
      '60,1'     : 'Europe/Berlin',
      '60,0'     : 'Africa/Lagos',
      '60,1,s'   : 'Africa/Windhoek',
      '120,1'    : 'Asia/Beirut',
      '120,0'    : 'Africa/Johannesburg',
      '180,0'    : 'Asia/Baghdad',
      '180,1'    : 'Europe/Moscow',
      '210,1'    : 'Asia/Tehran',
      '240,0'    : 'Asia/Dubai',
      '240,1'    : 'Asia/Baku',
      '270,0'    : 'Asia/Kabul',
      '300,1'    : 'Asia/Yekaterinburg',
      '300,0'    : 'Asia/Karachi',
      '330,0'    : 'Asia/Kolkata',
      '345,0'    : 'Asia/Kathmandu',
      '360,0'    : 'Asia/Dhaka',
      '360,1'    : 'Asia/Omsk',
      '390,0'    : 'Asia/Rangoon',
      '420,1'    : 'Asia/Krasnoyarsk',
      '420,0'    : 'Asia/Jakarta',
      '480,0'    : 'Asia/Shanghai',
      '480,1'    : 'Asia/Irkutsk',
      '525,0'    : 'Australia/Eucla',
      '525,1,s'  : 'Australia/Eucla',
      '540,1'    : 'Asia/Yakutsk',
      '540,0'    : 'Asia/Tokyo',
      '570,0'    : 'Australia/Darwin',
      '570,1,s'  : 'Australia/Adelaide',
      '600,0'    : 'Australia/Brisbane',
      '600,1'    : 'Asia/Vladivostok',
      '600,1,s'  : 'Australia/Sydney',
      '630,1,s'  : 'Australia/Lord_Howe',
      '660,1'    : 'Asia/Kamchatka',
      '660,0'    : 'Pacific/Noumea',
      '690,0'    : 'Pacific/Norfolk',
      '720,1,s'  : 'Pacific/Auckland',
      '720,0'    : 'Pacific/Tarawa',
      '765,1,s'  : 'Pacific/Chatham',
      '780,0'    : 'Pacific/Tongatapu',
      '780,1,s'  : 'Pacific/Apia',
      '840,0'    : 'Pacific/Kiritimati'
  };

  if (typeof exports !== 'undefined') {
    exports.jstz = jstz;
  } else {
    root.jstz = jstz;
  }
})(this);
}
if( window.Coveo === undefined) {
/*!
 * jQuery JavaScript Library v1.9.1
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2012 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2013-2-4
 */
(function( window, undefined ) {

// Can't do this because several apps including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
// Support: Firefox 18+
//"use strict";
var
	// The deferred used on DOM ready
	readyList,

	// A central reference to the root jQuery(document)
	rootjQuery,

	// Support: IE<9
	// For `typeof node.method` instead of `node.method !== undefined`
	core_strundefined = typeof undefined,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// [[Class]] -> type pairs
	class2type = {},

	// List of deleted data cache ids, so we can reuse them
	core_deletedIds = [],

	core_version = "1.9.1",

	// Save a reference to some core methods
	core_concat = core_deletedIds.concat,
	core_push = core_deletedIds.push,
	core_slice = core_deletedIds.slice,
	core_indexOf = core_deletedIds.indexOf,
	core_toString = class2type.toString,
	core_hasOwn = class2type.hasOwnProperty,
	core_trim = core_version.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,

	// Used for splitting on whitespace
	core_rnotwhite = /\S+/g,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d+\.|)\d+(?:[eE][+-]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	},

	// The ready event handler
	completed = function( event ) {

		// readyState === "complete" is good enough for us to call the dom ready in oldIE
		if ( document.addEventListener || event.type === "load" || document.readyState === "complete" ) {
			detach();
			jQuery.ready();
		}
	},
	// Clean-up method for dom ready events
	detach = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", completed, false );
			window.removeEventListener( "load", completed, false );

		} else {
			document.detachEvent( "onreadystatechange", completed );
			window.detachEvent( "onload", completed );
		}
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: core_version,

	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// scripts is true for back-compat
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var src, copyIsArray, copy, name, options, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		if ( obj == null ) {
			return String( obj );
		}
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ core_toString.call(obj) ] || "object" :
			typeof obj;
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, keepScripts ) {
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}
		context = context || document;

		var parsed = rsingleTag.exec( data ),
			scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts );
		if ( scripts ) {
			jQuery( scripts ).remove();
		}
		return jQuery.merge( [], parsed.childNodes );
	},

	parseJSON: function( data ) {
		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		if ( data === null ) {
			return data;
		}

		if ( typeof data === "string" ) {

			// Make sure leading/trailing whitespace is removed (IE can't handle it)
			data = jQuery.trim( data );

			if ( data ) {
				// Make sure the incoming data is actual JSON
				// Logic borrowed from http://json.org/json2.js
				if ( rvalidchars.test( data.replace( rvalidescape, "@" )
					.replace( rvalidtokens, "]" )
					.replace( rvalidbraces, "")) ) {

					return ( new Function( "return " + data ) )();
				}
			}
		}

		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && jQuery.trim( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				core_push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}
		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return core_concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var args, proxy, tmp;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			length = elems.length,
			bulk = key == null;

		// Sets many values
		if ( jQuery.type( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !jQuery.isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {
				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < length; i++ ) {
					fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
				}
			}
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", completed );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", completed );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// detach all dom ready events
						detach();

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || type !== "function" &&
		( length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj );
}

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( core_rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,
		// Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ action + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support, all, a,
		input, select, fragment,
		opt, eventName, isSupported, i,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: div.firstChild.nodeType === 3,

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: a.getAttribute("href") === "/a",

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Check the default checkbox/radio value ("" on WebKit; "on" elsewhere)
		checkOn: !!input.value,

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: document.compatMode === "CSS1Compat",

		// Will be defined later
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<9
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	// Check if we can trust getAttribute("value")
	input = document.createElement("input");
	input.setAttribute( "value", "" );
	support.input = input.getAttribute( "value" ) === "";

	// Check if an input maintains its value after becoming a radio
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "checked", "t" );
	input.setAttribute( "name", "t" );

	fragment = document.createDocumentFragment();
	fragment.appendChild( input );

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<9
	// Opera does not clone events (and typeof div.attachEvent === undefined).
	// IE9-10 clones events bound via attachEvent, but they don't trigger with .click()
	if ( div.attachEvent ) {
		div.attachEvent( "onclick", function() {
			support.noCloneEvent = false;
		});

		div.cloneNode( true ).click();
	}

	// Support: IE<9 (lack submit/change bubble), Firefox 17+ (lack focusin event)
	// Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php
	for ( i in { submit: true, change: true, focusin: true }) {
		div.setAttribute( eventName = "on" + i, "t" );

		support[ i + "Bubbles" ] = eventName in window || div.attributes[ eventName ].expando === false;
	}

	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, marginDiv, tds,
			divReset = "padding:0;margin:0;border:0;display:block;box-sizing:content-box;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px";

		body.appendChild( container ).appendChild( div );

		// Support: IE8
		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Support: IE8
		// Check if empty table cells still have offsetWidth/Height
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// Use window.getComputedStyle because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. (#3333)
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = div.appendChild( document.createElement("div") );
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";

			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== core_strundefined ) {
			// Support: IE<8
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Support: IE6
			// Check if elements with layout shrink-wrap their children
			div.style.display = "block";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			if ( support.inlineBlockNeedsLayout ) {
				// Prevent IE 6 from affecting layout for positioned elements #11048
				// Prevent IE from shrinking the body in IE 7 mode #12869
				// Support: IE<8
				body.style.zoom = 1;
			}
		}

		body.removeChild( container );

		// Null elements to avoid leaks in IE
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	all = select = fragment = opt = a = input = null;

	return support;
})();

var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

function internalData( elem, name, data, pvt /* Internal Use Only */ ){
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var thisCache, ret,
		internalKey = jQuery.expando,
		getByName = typeof name === "string",

		// We have to handle DOM nodes and JS objects differently because IE6-7
		// can't GC object references properly across the DOM-JS boundary
		isNode = elem.nodeType,

		// Only DOM nodes need the global jQuery cache; JS object data is
		// attached directly to the object so GC can occur automatically
		cache = isNode ? jQuery.cache : elem,

		// Only defining an ID for JS objects if its cache already exists allows
		// the code to shortcut on the same path as a DOM node with no cache
		id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

	// Avoid doing any more work than we need to when trying to get data on an
	// object that has no data at all
	if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
		return;
	}

	if ( !id ) {
		// Only DOM nodes need a new unique ID for each element since their data
		// ends up in the global cache
		if ( isNode ) {
			elem[ internalKey ] = id = core_deletedIds.pop() || jQuery.guid++;
		} else {
			id = internalKey;
		}
	}

	if ( !cache[ id ] ) {
		cache[ id ] = {};

		// Avoids exposing jQuery metadata on plain JS objects when the object
		// is serialized using JSON.stringify
		if ( !isNode ) {
			cache[ id ].toJSON = jQuery.noop;
		}
	}

	// An object can be passed to jQuery.data instead of a key/value pair; this gets
	// shallow copied over onto the existing cache
	if ( typeof name === "object" || typeof name === "function" ) {
		if ( pvt ) {
			cache[ id ] = jQuery.extend( cache[ id ], name );
		} else {
			cache[ id ].data = jQuery.extend( cache[ id ].data, name );
		}
	}

	thisCache = cache[ id ];

	// jQuery data() is stored in a separate object inside the object's internal data
	// cache in order to avoid key collisions between internal data and user-defined
	// data.
	if ( !pvt ) {
		if ( !thisCache.data ) {
			thisCache.data = {};
		}

		thisCache = thisCache.data;
	}

	if ( data !== undefined ) {
		thisCache[ jQuery.camelCase( name ) ] = data;
	}

	// Check for both converted-to-camel and non-converted data property names
	// If a data property was specified
	if ( getByName ) {

		// First Try to find as-is property data
		ret = thisCache[ name ];

		// Test for null|undefined property data
		if ( ret == null ) {

			// Try to find the camelCased property
			ret = thisCache[ jQuery.camelCase( name ) ];
		}
	} else {
		ret = thisCache;
	}

	return ret;
}

function internalRemoveData( elem, name, pvt ) {
	if ( !jQuery.acceptData( elem ) ) {
		return;
	}

	var i, l, thisCache,
		isNode = elem.nodeType,

		// See jQuery.data for more information
		cache = isNode ? jQuery.cache : elem,
		id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

	// If there is already no cache entry for this object, there is no
	// purpose in continuing
	if ( !cache[ id ] ) {
		return;
	}

	if ( name ) {

		thisCache = pvt ? cache[ id ] : cache[ id ].data;

		if ( thisCache ) {

			// Support array or space separated string names for data keys
			if ( !jQuery.isArray( name ) ) {

				// try the string as a key before any manipulation
				if ( name in thisCache ) {
					name = [ name ];
				} else {

					// split the camel cased version by spaces unless a key with the spaces exists
					name = jQuery.camelCase( name );
					if ( name in thisCache ) {
						name = [ name ];
					} else {
						name = name.split(" ");
					}
				}
			} else {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = name.concat( jQuery.map( name, jQuery.camelCase ) );
			}

			for ( i = 0, l = name.length; i < l; i++ ) {
				delete thisCache[ name[i] ];
			}

			// If there is no data left in the cache, we want to continue
			// and let the cache object itself get destroyed
			if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
				return;
			}
		}
	}

	// See jQuery.data for more information
	if ( !pvt ) {
		delete cache[ id ].data;

		// Don't destroy the parent cache unless the internal data object
		// had been the only thing left in it
		if ( !isEmptyDataObject( cache[ id ] ) ) {
			return;
		}
	}

	// Destroy the cache
	if ( isNode ) {
		jQuery.cleanData( [ elem ], true );

	// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
	} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
		delete cache[ id ];

	// When all else fails, null
	} else {
		cache[ id ] = null;
	}
}

jQuery.extend({
	cache: {},

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( core_version + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data ) {
		return internalData( elem, name, data );
	},

	removeData: function( elem, name ) {
		return internalRemoveData( elem, name );
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return internalData( elem, name, data, true );
	},

	_removeData: function( elem, name ) {
		return internalRemoveData( elem, name, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		// Do not set data on non-element because it will not be cleared (#8335).
		if ( elem.nodeType && elem.nodeType !== 1 && elem.nodeType !== 9 ) {
			return false;
		}

		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var attrs, name,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attrs = elem.attributes;
					for ( ; i < attrs.length; i++ ) {
						name = attrs[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.slice(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				// Try to fetch any internally stored data first
				return elem ? dataAttr( elem, key, jQuery.data( elem, key ) ) : null;
			}

			this.each(function() {
				jQuery.data( this, key, value );
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
						data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		hooks.cur = fn;
		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery._removeData( elem, type + "queue" );
				jQuery._removeData( elem, key );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rfocusable = /^(?:input|select|textarea|button|object)$/i,
	rclickable = /^(?:a|area)$/i,
	rboolean = /^(?:checked|selected|autofocus|autoplay|async|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped)$/i,
	ruseDefault = /^(?:checked|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute,
	getSetInput = jQuery.support.input;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}
					elem.className = jQuery.trim( cur );

				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j,
			i = 0,
			len = this.length,
			proceed = arguments.length === 0 || typeof value === "string" && value;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( core_rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}
					elem.className = value ? jQuery.trim( cur ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.match( core_rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			// Toggle whole class name
			} else if ( type === core_strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed "false",
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var ret, hooks, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	attr: function( elem, name, value ) {
		var hooks, notxml, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === core_strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && notxml && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && notxml && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			// In IE9+, Flash objects don't have .getAttribute (#12945)
			// Support: IE9+
			if ( typeof elem.getAttribute !== core_strundefined ) {
				ret =  elem.getAttribute( name );
			}

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( core_rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( rboolean.test( name ) ) {
					// Set corresponding property to false for boolean attributes
					// Also clear defaultChecked/defaultSelected (if appropriate) for IE<8
					if ( !getSetAttribute && ruseDefault.test( name ) ) {
						elem[ jQuery.camelCase( "default-" + name ) ] =
							elem[ propName ] = false;
					} else {
						elem[ propName ] = false;
					}

				// See #9699 for explanation of this approach (setting first, then removal)
				} else {
					jQuery.attr( elem, name, "" );
				}

				elem.removeAttribute( getSetAttribute ? name : propName );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to default in case type is set after value during creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		var
			// Use .prop to determine if this attribute is understood as boolean
			prop = jQuery.prop( elem, name ),

			// Fetch it accordingly
			attr = typeof prop === "boolean" && elem.getAttribute( name ),
			detail = typeof prop === "boolean" ?

				getSetInput && getSetAttribute ?
					attr != null :
					// oldIE fabricates an empty string for missing boolean attributes
					// and conflates checked/selected into attroperties
					ruseDefault.test( name ) ?
						elem[ jQuery.camelCase( "default-" + name ) ] :
						!!attr :

				// fetch an attribute node for properties not recognized as boolean
				elem.getAttributeNode( name );

		return detail && detail.value !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else if ( getSetInput && getSetAttribute || !ruseDefault.test( name ) ) {
			// IE<8 needs the *property* name
			elem.setAttribute( !getSetAttribute && jQuery.propFix[ name ] || name, name );

		// Use defaultChecked and defaultSelected for oldIE
		} else {
			elem[ jQuery.camelCase( "default-" + name ) ] = elem[ name ] = true;
		}

		return name;
	}
};

// fix oldIE value attroperty
if ( !getSetInput || !getSetAttribute ) {
	jQuery.attrHooks.value = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return jQuery.nodeName( elem, "input" ) ?

				// Ignore the value *property* by using defaultValue
				elem.defaultValue :

				ret && ret.specified ? ret.value : undefined;
		},
		set: function( elem, value, name ) {
			if ( jQuery.nodeName( elem, "input" ) ) {
				// Does not return so that setAttribute is also used
				elem.defaultValue = value;
			} else {
				// Use nodeHook if defined (#1954); otherwise setAttribute is fine
				return nodeHook && nodeHook.set( elem, value, name );
			}
		}
	};
}

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret = elem.getAttributeNode( name );
			return ret && ( name === "id" || name === "name" || name === "coords" ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				elem.setAttributeNode(
					(ret = elem.ownerDocument.createAttribute( name ))
				);
			}

			ret.value = value += "";

			// Break association with cloned elements by also using setAttribute (#9646)
			return name === "value" || value === elem.getAttribute( name ) ?
				value :
				undefined;
		}
	};

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			nodeHook.set( elem, value === "" ? false : value, name );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});
}


// Some attributes require a special call on IE
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret == null ? undefined : ret;
			}
		});
	});

	// href/src property should get the full normalized URL (#10299/#12915)
	jQuery.each([ "href", "src" ], function( i, name ) {
		jQuery.propHooks[ name ] = {
			get: function( elem ) {
				return elem.getAttribute( name, 4 );
			}
		};
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Note: IE uppercases css property names, but if we were to .toLowerCase()
			// .cssText, that would destroy case senstitivity in URL's, like in "background"
			return elem.style.cssText || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:input|select|textarea)$/i,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {
		var tmp, events, t, handleObjIn,
			special, eventHandle, handleObj,
			handlers, type, namespaces, origType,
			elemData = jQuery._data( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== core_strundefined && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {
		var j, handleObj, tmp,
			origCount, t, events,
			special, handlers, type,
			namespaces, origType,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( core_rnotwhite ) || [""];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery._removeData( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		var handle, ontype, cur,
			bubbleType, special, tmp, i,
			eventPath = [ elem || document ],
			type = core_hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = core_hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		event.isTrigger = true;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && elem[ type ] && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					try {
						elem[ type ]();
					} catch ( e ) {
						// IE<9 dies on focus/blur to hidden element (#1486,#12518)
						// only reproducible on winXP IE8 native, not IE9 in IE8 mode
					}
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, ret, handleObj, matched, j,
			handlerQueue = [],
			args = core_slice.call( arguments ),
			handlers = ( jQuery._data( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var sel, handleObj, matches, i,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur != this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && (cur.disabled !== true || event.type !== "click") ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: IE<9
		// Fix target property (#1925)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Support: Chrome 23+, Safari?
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// Support: IE<9
		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328)
		event.metaKey = !!event.metaKey;

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var body, eventDoc, doc,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( jQuery.nodeName( this, "input" ) && this.type === "checkbox" && this.click ) {
					this.click();
					return false;
				}
			}
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== document.activeElement && this.focus ) {
					try {
						this.focus();
						return false;
					} catch ( e ) {
						// Support: IE<9
						// If we error on focus to hidden element (#1486, #12518),
						// let .trigger() run the handlers
					}
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === document.activeElement && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Even when returnValue equals to undefined Firefox will still show alert
				if ( event.result !== undefined ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === core_strundefined ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;
		if ( !e ) {
			return;
		}

		// If preventDefault exists, run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// Support: IE
		// Otherwise set the returnValue property of the original event to false
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;
		if ( !e ) {
			return;
		}
		// If stopPropagation exists, run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}

		// Support: IE
		// Set the cancelBubble property of the original event to true
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "submitBubbles" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "submitBubbles", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "changeBubbles" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "changeBubbles", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var type, origFn;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var i,
	cachedruns,
	Expr,
	getText,
	isXML,
	compile,
	hasDuplicate,
	outermostContext,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsXML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,
	sortOrder,

	// Instance-specific data
	expando = "sizzle" + -(new Date()),
	preferredDoc = window.document,
	support = {},
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// General-purpose constants
	strundefined = typeof undefined,
	MAX_NEGATIVE = 1 << 31,

	// Array methods
	arr = [],
	pop = arr.pop,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf if we can't use a native one
	indexOf = arr.indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},


	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments quoted,
	//   then not containing pseudos/brackets,
	//   then attribute selectors/non-parenthetical expressions,
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + attributes.replace( 3, 8 ) + ")*)|.*)\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rsibling = /[\x20\t\r\n\f]*[+~]/,

	rnative = /^[^{]+\{\s*\[native code/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rescape = /'|\\/g,
	rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = /\\([\da-fA-F]{1,6}[\x20\t\r\n\f]?|.)/g,
	funescape = function( _, escaped ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		return high !== high ?
			escaped :
			// BMP codepoint
			high < 0 ?
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	};

// Use a stripped-down slice if we can't use a native one
try {
	slice.call( preferredDoc.documentElement.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		while ( (elem = this[i++]) ) {
			results.push( elem );
		}
		return results;
	};
}

/**
 * For feature detection
 * @param {Function} fn The function to test for native support
 */
function isNative( fn ) {
	return rnative.test( fn + "" );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var cache,
		keys = [];

	return (cache = function( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key += " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key ] = value);
	});
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return fn( div );
	} catch (e) {
		return false;
	} finally {
		// release memory in IE
		div = null;
	}
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( (nodeType = context.nodeType) !== 1 && nodeType !== 9 ) {
		return [];
	}

	if ( !documentIsXML && !seed ) {

		// Shortcuts
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getByClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && !rbuggyQSA.test(selector) ) {
			old = true;
			nid = expando;
			newContext = context;
			newSelector = nodeType === 9 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && context.parentNode || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results, slice.call( newContext.querySelectorAll(
						newSelector
					), 0 ) );
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Detect xml
 * @param {Element|Object} elem An element or a document
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;

	// Support tests
	documentIsXML = isXML( doc );

	// Check if getElementsByTagName("*") returns only elements
	support.tagNameNoComments = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Check if attributes should be retrieved by attribute nodes
	support.attributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	});

	// Check if getElementsByClassName can be trusted
	support.getByClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	});

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	support.getByName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = doc.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			doc.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			doc.getElementsByName( expando + 0 ).length;
		support.getIdNotName = !doc.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

	// IE6/7 return modified attributes
	Expr.attrHandle = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}) ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		};

	// ID find and filter
	if ( support.getIdNotName ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [m] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== strundefined && !documentIsXML ) {
				var m = context.getElementById( id );

				return m ?
					m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
						[m] :
						undefined :
					[];
			}
		};
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.tagNameNoComments ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== strundefined ) {
				return context.getElementsByTagName( tag );
			}
		} :
		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Name
	Expr.find["NAME"] = support.getByName && function( tag, context ) {
		if ( typeof context.getElementsByName !== strundefined ) {
			return context.getElementsByName( name );
		}
	};

	// Class
	Expr.find["CLASS"] = support.getByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== strundefined && !documentIsXML ) {
			return context.getElementsByClassName( className );
		}
	};

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21),
	// no need to also add to buggyMatches since matches checks buggyQSA
	// A support test would require too much code (would include document ready)
	rbuggyQSA = [ ":focus" ];

	if ( (support.qsa = isNative(doc.querySelectorAll)) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE8 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<input type='hidden' i=''/>";
			if ( div.querySelectorAll("[i^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = isNative( (matches = docElem.matchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.webkitMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = new RegExp( rbuggyMatches.join("|") );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = isNative(docElem.contains) || docElem.compareDocumentPosition ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	// Document order sorting
	sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		var compare;

		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		if ( (compare = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition( b )) ) {
			if ( compare & 1 || a.parentNode && a.parentNode.nodeType === 11 ) {
				if ( a === doc || contains( preferredDoc, a ) ) {
					return -1;
				}
				if ( b === doc || contains( preferredDoc, b ) ) {
					return 1;
				}
				return 0;
			}
			return compare & 4 ? -1 : 1;
		}

		return a.compareDocumentPosition ? -1 : 1;
	} :
	function( a, b ) {
		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Parentless nodes are either documents or disconnected
		} else if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	// Always assume the presence of duplicates if sort doesn't
	// pass them to our comparison function (as in Google Chrome).
	hasDuplicate = false;
	[0, 0].sort( sortOrder );
	support.detectDuplicates = hasDuplicate;

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	// rbuggyQSA always contains :focus, so no need for an existence check
	if ( support.matchesSelector && !documentIsXML && (!rbuggyMatches || !rbuggyMatches.test(expr)) && !rbuggyQSA.test(expr) ) {
		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch(e) {}
	}

	return Sizzle( expr, document, null, [elem] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	var val;

	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( !documentIsXML ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( documentIsXML || support.attributes ) {
		return elem.getAttribute( name );
	}
	return ( (val = elem.getAttributeNode( name )) || elem.getAttribute( name ) ) && elem[ name ] === true ?
		name :
		val && val.specified ? val.value : null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && ( ~b.sourceIndex || MAX_NEGATIVE ) - ( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (see #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[5] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[4] ) {
				match[2] = match[4];

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}

			nodeName = nodeName.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifider
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsXML ?
						elem.getAttribute("xml:lang") || elem.getAttribute("lang") :
						elem.lang) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeName > "@" || elem.nodeType === 3 || elem.nodeType === 4 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === elem.type );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push( {
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			} );
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,
					type: type,
					matches: match
				} );
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var data, cache, outerCache,
				dirkey = dirruns + " " + doneName;

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (cache = outerCache[ dir ]) && cache[0] === dirkey ) {
							if ( (data = cache[1]) === true || data === cachedruns ) {
								return data === true;
							}
						} else {
							cache = outerCache[ dir ] = [ dirkey ];
							cache[1] = matcher( elem, context, xml ) || cachedruns;
							if ( cache[1] === true ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector( tokens.slice( 0, i - 1 ) ).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	// A counter to specify which element is currently being matched
	var matcherCachedRuns = 0,
		bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = matcherCachedRuns;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++matcherCachedRuns;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		match = tokenize( selector );

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !documentIsXML &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( runescape, funescape ), context )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && context.parentNode || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		documentIsXML,
		results,
		rsibling.test( selector )
	);
	return results;
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Easy API for creating new setFilters
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Initialize with the default document
setDocument();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, ret, self,
			len = this.length;

		if ( typeof selector !== "string" ) {
			self = this;
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		ret = [];
		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, this[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = ( this.selector ? this.selector + " " : "" ) + selector;
		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false) );
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true) );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		return this.pushStack( ret.length > 1 ? jQuery.unique( ret ) : ret );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.first().prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( jQuery.unique(all) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
		safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	manipulation_rcheckableType = /^(?:checkbox|radio)$/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		area: [ 1, "<map>", "</map>" ],
		param: [ 1, "<object>", "</object>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
		// unless wrapped in a div with non-breaking characters in front of it.
		_default: jQuery.support.htmlSerialize ? [ 0, "", "" ] : [ 1, "X<div>", "</div>"  ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, false, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length > 0 ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( getAll( elem ) );
				}

				if ( elem.parentNode ) {
					if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
						setGlobalEval( getAll( elem, "script" ) );
					}
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem, false ) );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}

			// If this is a select, ensure that it displays empty (#12336)
			// Support: IE<9
			if ( elem.options && jQuery.nodeName( elem, "select" ) ) {
				elem.options.length = 0;
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		var isFunc = jQuery.isFunction( value );

		// Make sure that the elements are removed from the DOM before they are inserted
		// this can help fix replacing a parent with child elements
		if ( !isFunc && typeof value !== "string" ) {
			value = jQuery( value ).not( this ).detach();
		}

		return this.domManip( [ value ], true, function( elem ) {
			var next = this.nextSibling,
				parent = this.parentNode;

			if ( parent ) {
				jQuery( this ).remove();
				parent.insertBefore( elem, next );
			}
		});
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = core_concat.apply( [], args );

		var first, node, hasScripts,
			scripts, doc, fragment,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[0],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction || !( l <= 1 || typeof value !== "string" || jQuery.support.checkClone || !rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[0] = value.call( this, index, table ? self.html() : undefined );
				}
				self.domManip( args, table, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						node,
						i
					);
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!jQuery._data( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Hope ajax is available...
								jQuery.ajax({
									url: node.src,
									type: "GET",
									dataType: "script",
									async: false,
									global: false,
									"throws": true
								});
							} else {
								jQuery.globalEval( ( node.text || node.textContent || node.innerHTML || "" ).replace( rcleanScript, "" ) );
							}
						}
					}
				}

				// Fix #11809: Avoid leaking memory
				fragment = first = null;
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	var attr = elem.getAttributeNode("type");
	elem.type = ( attr && attr.specified ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );
	if ( match ) {
		elem.type = match[1];
	} else {
		elem.removeAttribute("type");
	}
	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var elem,
		i = 0;
	for ( ; (elem = elems[i]) != null; i++ ) {
		jQuery._data( elem, "globalEval", !refElements || jQuery._data( refElements[i], "globalEval" ) );
	}
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function fixCloneNodeIssues( src, dest ) {
	var nodeName, e, data;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	nodeName = dest.nodeName.toLowerCase();

	// IE6-8 copies events bound via attachEvent when using cloneNode.
	if ( !jQuery.support.noCloneEvent && dest[ jQuery.expando ] ) {
		data = jQuery._data( dest );

		for ( e in data.events ) {
			jQuery.removeEvent( dest, e, data.handle );
		}

		// Event data gets referenced instead of copied if the expando gets copied too
		dest.removeAttribute( jQuery.expando );
	}

	// IE blanks contents when cloning scripts, and tries to evaluate newly-set text
	if ( nodeName === "script" && dest.text !== src.text ) {
		disableScript( dest ).text = src.text;
		restoreScript( dest );

	// IE6-10 improperly clones children of object elements using classid.
	// IE10 throws NoModificationAllowedError if parent is null, #12132.
	} else if ( nodeName === "object" ) {
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && ( src.innerHTML && !jQuery.trim(dest.innerHTML) ) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && manipulation_rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.defaultSelected = dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone(true);
			jQuery( insert[i] )[ original ]( elems );

			// Modern browsers can apply jQuery collections as arrays, but oldIE needs a .get()
			core_push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});

function getAll( context, tag ) {
	var elems, elem,
		i = 0,
		found = typeof context.getElementsByTagName !== core_strundefined ? context.getElementsByTagName( tag || "*" ) :
			typeof context.querySelectorAll !== core_strundefined ? context.querySelectorAll( tag || "*" ) :
			undefined;

	if ( !found ) {
		for ( found = [], elems = context.childNodes || context; (elem = elems[i]) != null; i++ ) {
			if ( !tag || jQuery.nodeName( elem, tag ) ) {
				found.push( elem );
			} else {
				jQuery.merge( found, getAll( elem, tag ) );
			}
		}
	}

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], found ) :
		found;
}

// Used in buildFragment, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( manipulation_rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var destElements, node, clone, i, srcElements,
			inPage = jQuery.contains( elem.ownerDocument, elem );

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			// Fix all IE cloning issues
			for ( i = 0; (node = srcElements[i]) != null; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					fixCloneNodeIssues( node, destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0; (node = srcElements[i]) != null; i++ ) {
					cloneCopyEvent( node, destElements[i] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		destElements = srcElements = node = null;

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var j, elem, contains,
			tmp, tag, tbody, wrap,
			l = elems.length,

			// Ensure a safe fragment
			safe = createSafeFragment( context ),

			nodes = [],
			i = 0;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || safe.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;

					tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Manually add leading whitespace removed by IE
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						nodes.push( context.createTextNode( rleadingWhitespace.exec( elem )[0] ) );
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						elem = tag === "table" && !rtbody.test( elem ) ?
							tmp.firstChild :

							// String was a bare <thead> or <tfoot>
							wrap[1] === "<table>" && !rtbody.test( elem ) ?
								tmp :
								0;

						j = elem && elem.childNodes.length;
						while ( j-- ) {
							if ( jQuery.nodeName( (tbody = elem.childNodes[j]), "tbody" ) && !tbody.childNodes.length ) {
								elem.removeChild( tbody );
							}
						}
					}

					jQuery.merge( nodes, tmp.childNodes );

					// Fix #12392 for WebKit and IE > 9
					tmp.textContent = "";

					// Fix #12392 for oldIE
					while ( tmp.firstChild ) {
						tmp.removeChild( tmp.firstChild );
					}

					// Remember the top-level container for proper cleanup
					tmp = safe.lastChild;
				}
			}
		}

		// Fix #11356: Clear elements from fragment
		if ( tmp ) {
			safe.removeChild( tmp );
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			jQuery.grep( getAll( nodes, "input" ), fixDefaultChecked );
		}

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( safe.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		tmp = null;

		return safe;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var elem, type, id, data,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( typeof elem.removeAttribute !== core_strundefined ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						core_deletedIds.push( id );
					}
				}
			}
		}
	}
});
var iframe, getStyles, curCSS,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity\s*=\s*([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	// isHidden might be called from jQuery#filter function;
	// in that case, element will be second argument
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = jQuery._data( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {

			if ( !values[ index ] ) {
				hidden = isHidden( elem );

				if ( display && display !== "none" || !hidden ) {
					jQuery._data( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
				}
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			var len, styles,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		var bool = typeof state === "boolean";

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Fixes #8908, it can be done more correctly by specifing setters in cssHooks,
			// but it would mean to define eight (for every problematic property) identical functions
			if ( !jQuery.support.clearCloneStyle && value === "" && name.indexOf("background") === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {

				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var num, val, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: we've included the "window" in window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	getStyles = function( elem ) {
		return window.getComputedStyle( elem, null );
	};

	curCSS = function( elem, name, _computed ) {
		var width, minWidth, maxWidth,
			computed = _computed || getStyles( elem ),

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed ? computed.getPropertyValue( name ) || computed[ name ] : undefined,
			style = elem.style;

		if ( computed ) {

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	getStyles = function( elem ) {
		return elem.currentStyle;
	};

	curCSS = function( elem, name, _computed ) {
		var left, rs, rsLeft,
			computed = _computed || getStyles( elem ),
			ret = computed ? computed[ name ] : undefined,
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rs = elem.runtimeStyle;
			rsLeft = rs && rs.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				rs.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				rs.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {
			// Use the already-created iframe if possible
			iframe = ( iframe ||
				jQuery("<iframe frameborder='0' width='0' height='0'/>")
				.css( "cssText", "display:block !important" )
			).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = ( iframe[0].contentWindow || iframe[0].contentDocument ).document;
			doc.write("<!doctype html><html><body>");
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}

// Called ONLY from within css_defaultDisplay
function actualDisplay( name, doc ) {
	var elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),
		display = jQuery.css( elem[0], "display" );
	elem.remove();
	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				return elem.offsetWidth === 0 && rdisplayswap.test( jQuery.css( elem, "display" ) ) ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			// if value === "", then remove inline opacity #12685
			if ( ( value >= 1 || value === "" ) &&
					jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
					style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there is no filter style applied in a css rule or unset inline opacity, we are done
				if ( value === "" || currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				if ( computed ) {
					// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
					// Work around by temporarily setting element display to inline-block
					return jQuery.swap( elem, { "display": "inline-block" },
						curCSS, [ elem, "marginRight" ] );
				}
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						computed = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( computed ) ?
							jQuery( elem ).position()[ prop ] + "px" :
							computed;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		// Support: Opera <= 12.12
		// Opera reports offsetWidths and offsetHeights less than zero on some elements
		return elem.offsetWidth <= 0 && elem.offsetHeight <= 0 ||
			(!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || jQuery.css( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function(){
			var type = this.type;
			// Use .is(":disabled") so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !manipulation_rcheckableType.test( type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.hover = function( fnOver, fnOut ) {
	return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
};
var
	// Document location
	ajaxLocParts,
	ajaxLocation,
	ajax_nonce = jQuery.now(),

	ajax_rquery = /\?/,
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*");

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( core_rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var deep, key,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, response, type,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ){
	jQuery.fn[ type ] = function( fn ){
		return this.on( type, fn );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // Cross-domain detection vars
			parts,
			// Loop variable
			i,
			// URL without anti-cache param
			cacheURL,
			// Response headers as string
			responseHeadersString,
			// timeout handle
			timeoutTimer,

			// To know if global events are to be dispatched
			fireGlobals,

			transport,
			// Response headers
			responseHeaders,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( core_rnotwhite ) || [""];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + ajax_nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( ajax_rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ajax_nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 ) {
					isSuccess = true;
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					isSuccess = true;
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	}
});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {
	var firstDataType, ct, finalDataType, type,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {
	var conv2, current, conv, tmp,
		converters = {},
		i = 0,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ];

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || jQuery("head")[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement("script");

				script.async = true;

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( script.parentNode ) {
							script.parentNode.removeChild( script );
						}

						// Dereference the script
						script = null;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};

				// Circumvent IE6 bugs with base elements (#2709 and #4378) by prepending
				// Use native DOM manipulation to avoid our domManip AJAX trickery
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( undefined, true );
				}
			}
		};
	}
});
var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( ajax_nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( ajax_rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
var xhrCallbacks, xhrSupported,
	xhrId = 0,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject && function() {
		// Abort all pending requests
		var key;
		for ( key in xhrCallbacks ) {
			xhrCallbacks[ key ]( undefined, true );
		}
	};

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject("Microsoft.XMLHTTP");
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
xhrSupported = jQuery.ajaxSettings.xhr();
jQuery.support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
xhrSupported = jQuery.support.ajax = !!xhrSupported;

// Create transport if the browser can provide an xhr
if ( xhrSupported ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( err ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {
						var status, responseHeaders, statusText, responses;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									responses = {};
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									if ( typeof xhr.responseText === "string" ) {
										responses.text = xhr.responseText;
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback( undefined, true );
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var value, name, index, easing, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	/*jshint validthis:true */
	var prop, index, length,
		value, dataShow, toggle,
		tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.always(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery._removeData( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );
				doAnimation.finish = function() {
					anim.stop( true );
				};
				// Empty animations, or finishing resolves immediately
				if ( empty || jQuery._data( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = jQuery._data( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// enable finishing flag on private data
			data.finish = true;

			// empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.cur && hooks.cur.finish ) {
				hooks.cur.finish.call( this );
			}

			// look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// turn off finishing flag
			delete data.finish;
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) ) {
		jQuery.fx.start();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, win,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== core_strundefined ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	return {
		top: box.top  + ( win.pageYOffset || docElem.scrollTop )  - ( docElem.clientTop  || 0 ),
		left: box.left + ( win.pageXOffset || docElem.scrollLeft ) - ( docElem.clientLeft || 0 )
	};
};

jQuery.offset = {

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			parentOffset = { top: 0, left: 0 },
			elem = this[ 0 ];

		// fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// we assume that getBoundingClientRect is available when computed position is fixed
			offset = elem.getBoundingClientRect();
		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top  += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		return {
			top:  offset.top  - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true)
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.documentElement;
			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position") === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.documentElement;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Limit scope pollution from any deprecated API
// (function() {

// })();
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );

}
if( window._ === undefined) {
//     Underscore.js 1.6.0
//     http://underscorejs.org
//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    concat           = ArrayProto.concat,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.6.0';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return obj;
    if (obj.length === +obj.length) {
      for (var i = 0, length = obj.length; i < length; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      var keys = _.keys(obj);
      for (var i = 0, length = keys.length; i < length; i++) {
        if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
      }
    }
    return obj;
  };

  // Return the results of applying the iterator to each element.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    _.each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    _.each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    _.each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var result;
    _.some(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    if (obj == null) return results;
    _.each(obj, function(value, index, list) {
      if (predicate.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(predicate), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = true;
    if (obj == null) return result;
    _.each(obj, function(value, index, list) {
      if (!(result = result && predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate || (predicate = _.identity);
    var result = false;
    if (obj == null) return result;
    _.each(obj, function(value, index, list) {
      if (result || (result = predicate.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `include`.
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (obj.length === +obj.length) return _.indexOf(obj, target) >= 0;
    return _.some(obj, function(value) {
      return value === target;
    });
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matches(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matches(attrs));
  };

  // Return the maximum element or (element-based computation).
  _.max = function(obj, iterator, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (!iterator && _.isArray(obj)) {
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      _.each(obj, function(value, index, list) {
        computed = iterator ? iterator.call(context, value, index, list) : value;
        if (computed > lastComputed) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (!iterator && _.isArray(obj)) {
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      _.each(obj, function(value, index, list) {
        computed = iterator ? iterator.call(context, value, index, list) : value;
        if (computed < lastComputed) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle an array, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisherâ€“Yates_shuffle).
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    _.each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (obj.length !== +obj.length) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // An internal function to generate lookup iterators.
  var lookupIterator = function(value, context) {
    if (value == null) return _.identity;
    if (!_.isFunction(value)) return _.property(value);
    if (!context) return value;
    return function() {
      return value.apply(context, arguments);
    };
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, iterator, context) {
    iterator = lookupIterator(iterator, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iterator(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iterator, context) {
      var result = {};
      iterator = lookupIterator(iterator, context);
      _.each(obj, function(value, index) {
        var key = iterator(value, index, obj);
        behavior(result, key, value);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, key, value) {
    _.has(result, key) ? result[key].push(value) : result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, key, value) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, key) {
    _.has(result, key) ? result[key]++ : result[key] = 1;
  });

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = lookupIterator(iterator, context);
    var value = iterator(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator(array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[0];
    if (n < 0) return [];
    return slice.call(array, 0, n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n == null) || guard) return array[array.length - 1];
    return slice.call(array, Math.max(array.length - n, 0));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, output) {
    if (shallow && _.every(input, _.isArray)) {
      return concat.apply(output, input);
    }
    for (var i = 0, length = input.length; i < length; i++) {
      var value = input[i];
      if (!_.isArray(value) && !_.isArguments(value)) {
        if (!strict) output.push(value);
      } else if (shallow) {
        push.apply(output, value);
      } else {
        flatten(value, shallow, strict, output);
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Split an array into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = lookupIterator(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(elem) {
      (predicate(elem) ? pass : fail).push(elem);
    });
    return [pass, fail];
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (array == null) return [];
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i];
      if (iterator) value = iterator.call(context, value, i, array);
      if (isSorted ? (!i || seen !== value) : !_.contains(seen, value)) {
        if (isSorted) seen = value;
        else seen.push(value);
        result.push(array[i]);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true, []));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(slice.call(arguments, 1), true, true, []);
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var length = _.max(_.pluck(arguments, 'length').concat(0));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(arguments, '' + i);
    }
    return results;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, length = list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, length = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, length + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var i = from == null ? array.length : from;
    while (i--) if (array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(length);

    while(idx < length) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    var args, bound;
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    return function() {
      var position = 0;
      var args = boundArgs.slice();
      for (var i = 0, length = args.length; i < length; i++) {
        if (args[i] === _) args[i] = arguments[position++];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return func.apply(this, args);
    };
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error('bindAll must be passed function names');
    _.each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    options || (options = {});
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
        context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last > 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = new Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = new Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    _.each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj, iterator, context) {
    var result = {};
    if (_.isFunction(iterator)) {
      for (var key in obj) {
        var value = obj[key];
        if (iterator.call(context, value, key, obj)) result[key] = value;
      }
    } else {
      var keys = concat.apply([], slice.call(arguments, 1));
      for (var i = 0, length = keys.length; i < length; i++) {
        var key = keys[i];
        if (key in obj) result[key] = obj[key];
      }
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iterator, context) {
    var keys;
    if (_.isFunction(iterator)) {
      iterator = _.negate(iterator);
    } else {
      keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
      iterator = function(value, key) { return !_.contains(keys, key); };
    }
    return _.pick(obj, iterator, context);
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    _.each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] == a) return bStack[length] == b;
    }
    // Objects with different constructors are not equivalent, but `Object`s
    // from different frames are.
    var aCtor = a.constructor, bCtor = b.constructor;
    if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                             _.isFunction(bCtor) && (bCtor instanceof bCtor))
                        && ('constructor' in a && 'constructor' in b)) {
      return false;
    }
    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return result;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Optimize `isFunction` if appropriate.
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
  _.matches = function(attrs) {
    return function(obj) {
      if (obj == null) return _.isEmpty(attrs);
      if (obj === attrs) return true;
      for (var key in attrs) if (attrs[key] !== obj[key]) return false;
      return true;
    }
  };

  // Run a function **n** times.
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() { return new Date().getTime(); };

  // List of HTML entities for escaping.
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

  // Regexes containing the keys and values listed immediately above.
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? object[property]() : value;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

    // Start chaining a wrapped Underscore object.
    chain: function() {
      this._chain = true;
      return this;
    },

    // Extracts the result from a wrapped and chained object.
    value: function() {
      return this._wrapped;
    }

  });

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}).call(this);
}
if( window.Globalize === undefined) {
/*!
 * Globalize
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 */

//IE8 fix : Globalize variable never gets to the Global scope due to JScript bug.
//Force it to the global scope with this, and a "return Globalize ;" at the end of the script
//http://kangax.github.io/nfe/#jscript-bugs
var Globalize = (function( window, undefined ) {

var Globalize,
	// private variables
	regexHex,
	regexInfinity,
	regexParseFloat,
	regexTrim,
	// private JavaScript utility functions
	arrayIndexOf,
	endsWith,
	extend,
	isArray,
	isFunction,
	isObject,
	startsWith,
	trim,
	truncate,
	zeroPad,
	// private Globalization utility functions
	appendPreOrPostMatch,
	expandFormat,
	formatDate,
	formatNumber,
	getTokenRegExp,
	getEra,
	getEraYear,
	parseExact,
	parseNegativePattern;

// Global variable (Globalize) or CommonJS module (globalize)
Globalize = function( cultureSelector ) {
	return new Globalize.prototype.init( cultureSelector );
};

if ( typeof require !== "undefined" &&
	typeof exports !== "undefined" &&
	typeof module !== "undefined" ) {
	// Assume CommonJS
	module.exports = Globalize;
} else {
	// Export as global variable
	window.Globalize = Globalize;
}

Globalize.cultures = {};

Globalize.prototype = {
	constructor: Globalize,
	init: function( cultureSelector ) {
		this.cultures = Globalize.cultures;
		this.cultureSelector = cultureSelector;

		return this;
	}
};
Globalize.prototype.init.prototype = Globalize.prototype;

// 1. When defining a culture, all fields are required except the ones stated as optional.
// 2. Each culture should have a ".calendars" object with at least one calendar named "standard"
//    which serves as the default calendar in use by that culture.
// 3. Each culture should have a ".calendar" object which is the current calendar being used,
//    it may be dynamically changed at any time to one of the calendars in ".calendars".
Globalize.cultures[ "default" ] = {
	// A unique name for the culture in the form <language code>-<country/region code>
	name: "en",
	// the name of the culture in the english language
	englishName: "English",
	// the name of the culture in its own language
	nativeName: "English",
	// whether the culture uses right-to-left text
	isRTL: false,
	// "language" is used for so-called "specific" cultures.
	// For example, the culture "es-CL" means "Spanish, in Chili".
	// It represents the Spanish-speaking culture as it is in Chili,
	// which might have different formatting rules or even translations
	// than Spanish in Spain. A "neutral" culture is one that is not
	// specific to a region. For example, the culture "es" is the generic
	// Spanish culture, which may be a more generalized version of the language
	// that may or may not be what a specific culture expects.
	// For a specific culture like "es-CL", the "language" field refers to the
	// neutral, generic culture information for the language it is using.
	// This is not always a simple matter of the string before the dash.
	// For example, the "zh-Hans" culture is netural (Simplified Chinese).
	// And the "zh-SG" culture is Simplified Chinese in Singapore, whose lanugage
	// field is "zh-CHS", not "zh".
	// This field should be used to navigate from a specific culture to it's
	// more general, neutral culture. If a culture is already as general as it
	// can get, the language may refer to itself.
	language: "en",
	// numberFormat defines general number formatting rules, like the digits in
	// each grouping, the group separator, and how negative numbers are displayed.
	numberFormat: {
		// [negativePattern]
		// Note, numberFormat.pattern has no "positivePattern" unlike percent and currency,
		// but is still defined as an array for consistency with them.
		//   negativePattern: one of "(n)|-n|- n|n-|n -"
		pattern: [ "-n" ],
		// number of decimal places normally shown
		decimals: 2,
		// string that separates number groups, as in 1,000,000
		",": ",",
		// string that separates a number from the fractional portion, as in 1.99
		".": ".",
		// array of numbers indicating the size of each number group.
		// TODO: more detailed description and example
		groupSizes: [ 3 ],
		// symbol used for positive numbers
		"+": "+",
		// symbol used for negative numbers
		"-": "-",
		// symbol used for NaN (Not-A-Number)
		"NaN": "NaN",
		// symbol used for Negative Infinity
		negativeInfinity: "-Infinity",
		// symbol used for Positive Infinity
		positiveInfinity: "Infinity",
		percent: {
			// [negativePattern, positivePattern]
			//   negativePattern: one of "-n %|-n%|-%n|%-n|%n-|n-%|n%-|-% n|n %-|% n-|% -n|n- %"
			//   positivePattern: one of "n %|n%|%n|% n"
			pattern: [ "-n %", "n %" ],
			// number of decimal places normally shown
			decimals: 2,
			// array of numbers indicating the size of each number group.
			// TODO: more detailed description and example
			groupSizes: [ 3 ],
			// string that separates number groups, as in 1,000,000
			",": ",",
			// string that separates a number from the fractional portion, as in 1.99
			".": ".",
			// symbol used to represent a percentage
			symbol: "%"
		},
		currency: {
			// [negativePattern, positivePattern]
			//   negativePattern: one of "($n)|-$n|$-n|$n-|(n$)|-n$|n-$|n$-|-n $|-$ n|n $-|$ n-|$ -n|n- $|($ n)|(n $)"
			//   positivePattern: one of "$n|n$|$ n|n $"
			pattern: [ "($n)", "$n" ],
			// number of decimal places normally shown
			decimals: 2,
			// array of numbers indicating the size of each number group.
			// TODO: more detailed description and example
			groupSizes: [ 3 ],
			// string that separates number groups, as in 1,000,000
			",": ",",
			// string that separates a number from the fractional portion, as in 1.99
			".": ".",
			// symbol used to represent currency
			symbol: "$"
		}
	},
	// calendars defines all the possible calendars used by this culture.
	// There should be at least one defined with name "standard", and is the default
	// calendar used by the culture.
	// A calendar contains information about how dates are formatted, information about
	// the calendar's eras, a standard set of the date formats,
	// translations for day and month names, and if the calendar is not based on the Gregorian
	// calendar, conversion functions to and from the Gregorian calendar.
	calendars: {
		standard: {
			// name that identifies the type of calendar this is
			name: "Gregorian_USEnglish",
			// separator of parts of a date (e.g. "/" in 11/05/1955)
			"/": "/",
			// separator of parts of a time (e.g. ":" in 05:44 PM)
			":": ":",
			// the first day of the week (0 = Sunday, 1 = Monday, etc)
			firstDay: 0,
			days: {
				// full day names
				names: [ "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" ],
				// abbreviated day names
				namesAbbr: [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ],
				// shortest day names
				namesShort: [ "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa" ]
			},
			months: {
				// full month names (13 months for lunar calendards -- 13th month should be "" if not lunar)
				names: [ "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "" ],
				// abbreviated month names
				namesAbbr: [ "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "" ]
			},
			// AM and PM designators in one of these forms:
			// The usual view, and the upper and lower case versions
			//   [ standard, lowercase, uppercase ]
			// The culture does not use AM or PM (likely all standard date formats use 24 hour time)
			//   null
			AM: [ "AM", "am", "AM" ],
			PM: [ "PM", "pm", "PM" ],
			eras: [
				// eras in reverse chronological order.
				// name: the name of the era in this culture (e.g. A.D., C.E.)
				// start: when the era starts in ticks (gregorian, gmt), null if it is the earliest supported era.
				// offset: offset in years from gregorian calendar
				{
					"name": "A.D.",
					"start": null,
					"offset": 0
				}
			],
			// when a two digit year is given, it will never be parsed as a four digit
			// year greater than this year (in the appropriate era for the culture)
			// Set it as a full year (e.g. 2029) or use an offset format starting from
			// the current year: "+19" would correspond to 2029 if the current year 2010.
			twoDigitYearMax: 2029,
			// set of predefined date and time patterns used by the culture
			// these represent the format someone in this culture would expect
			// to see given the portions of the date that are shown.
			patterns: {
				// short date pattern
				d: "M/d/yyyy",
				// long date pattern
				D: "dddd, MMMM dd, yyyy",
				// short time pattern
				t: "h:mm tt",
				// long time pattern
				T: "h:mm:ss tt",
				// long date, short time pattern
				f: "dddd, MMMM dd, yyyy h:mm tt",
				// long date, long time pattern
				F: "dddd, MMMM dd, yyyy h:mm:ss tt",
				// month/day pattern
				M: "MMMM dd",
				// month/year pattern
				Y: "yyyy MMMM",
				// S is a sortable format that does not vary by culture
				S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"
			}
			// optional fields for each calendar:
			/*
			monthsGenitive:
				Same as months but used when the day preceeds the month.
				Omit if the culture has no genitive distinction in month names.
				For an explaination of genitive months, see http://blogs.msdn.com/michkap/archive/2004/12/25/332259.aspx
			convert:
				Allows for the support of non-gregorian based calendars. This convert object is used to
				to convert a date to and from a gregorian calendar date to handle parsing and formatting.
				The two functions:
					fromGregorian( date )
						Given the date as a parameter, return an array with parts [ year, month, day ]
						corresponding to the non-gregorian based year, month, and day for the calendar.
					toGregorian( year, month, day )
						Given the non-gregorian year, month, and day, return a new Date() object
						set to the corresponding date in the gregorian calendar.
			*/
		}
	},
	// For localized strings
	messages: {}
};

Globalize.cultures[ "default" ].calendar = Globalize.cultures[ "default" ].calendars.standard;

Globalize.cultures.en = Globalize.cultures[ "default" ];

Globalize.cultureSelector = "en";

//
// private variables
//

regexHex = /^0x[a-f0-9]+$/i;
regexInfinity = /^[+\-]?infinity$/i;
regexParseFloat = /^[+\-]?\d*\.?\d*(e[+\-]?\d+)?$/;
regexTrim = /^\s+|\s+$/g;

//
// private JavaScript utility functions
//

arrayIndexOf = function( array, item ) {
	if ( array.indexOf ) {
		return array.indexOf( item );
	}
	for ( var i = 0, length = array.length; i < length; i++ ) {
		if ( array[i] === item ) {
			return i;
		}
	}
	return -1;
};

endsWith = function( value, pattern ) {
	return value.substr( value.length - pattern.length ) === pattern;
};

extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction(target) ) {
		target = {};
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( isObject(copy) || (copyIsArray = isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && isArray(src) ? src : [];

					} else {
						clone = src && isObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

isArray = Array.isArray || function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Array]";
};

isFunction = function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Function]";
};

isObject = function( obj ) {
	return Object.prototype.toString.call( obj ) === "[object Object]";
};

startsWith = function( value, pattern ) {
	return value.indexOf( pattern ) === 0;
};

trim = function( value ) {
	return ( value + "" ).replace( regexTrim, "" );
};

truncate = function( value ) {
	if ( isNaN( value ) ) {
		return NaN;
	}
	return Math[ value < 0 ? "ceil" : "floor" ]( value );
};

zeroPad = function( str, count, left ) {
	var l;
	for ( l = str.length; l < count; l += 1 ) {
		str = ( left ? ("0" + str) : (str + "0") );
	}
	return str;
};

//
// private Globalization utility functions
//

appendPreOrPostMatch = function( preMatch, strings ) {
	// appends pre- and post- token match strings while removing escaped characters.
	// Returns a single quote count which is used to determine if the token occurs
	// in a string literal.
	var quoteCount = 0,
		escaped = false;
	for ( var i = 0, il = preMatch.length; i < il; i++ ) {
		var c = preMatch.charAt( i );
		switch ( c ) {
			case "\'":
				if ( escaped ) {
					strings.push( "\'" );
				}
				else {
					quoteCount++;
				}
				escaped = false;
				break;
			case "\\":
				if ( escaped ) {
					strings.push( "\\" );
				}
				escaped = !escaped;
				break;
			default:
				strings.push( c );
				escaped = false;
				break;
		}
	}
	return quoteCount;
};

expandFormat = function( cal, format ) {
	// expands unspecified or single character date formats into the full pattern.
	format = format || "F";
	var pattern,
		patterns = cal.patterns,
		len = format.length;
	if ( len === 1 ) {
		pattern = patterns[ format ];
		if ( !pattern ) {
			throw "Invalid date format string \'" + format + "\'.";
		}
		format = pattern;
	}
	else if ( len === 2 && format.charAt(0) === "%" ) {
		// %X escape format -- intended as a custom format string that is only one character, not a built-in format.
		format = format.charAt( 1 );
	}
	return format;
};

formatDate = function( value, format, culture ) {
	var cal = culture.calendar,
		convert = cal.convert,
		ret;

	if ( !format || !format.length || format === "i" ) {
		if ( culture && culture.name.length ) {
			if ( convert ) {
				// non-gregorian calendar, so we cannot use built-in toLocaleString()
				ret = formatDate( value, cal.patterns.F, culture );
			}
			else {
				var eraDate = new Date( value.getTime() ),
					era = getEra( value, cal.eras );
				eraDate.setFullYear( getEraYear(value, cal, era) );
				ret = eraDate.toLocaleString();
			}
		}
		else {
			ret = value.toString();
		}
		return ret;
	}

	var eras = cal.eras,
		sortable = format === "s";
	format = expandFormat( cal, format );

	// Start with an empty string
	ret = [];
	var hour,
		zeros = [ "0", "00", "000" ],
		foundDay,
		checkedDay,
		dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,
		quoteCount = 0,
		tokenRegExp = getTokenRegExp(),
		converted;

	function padZeros( num, c ) {
		var r, s = num + "";
		if ( c > 1 && s.length < c ) {
			r = ( zeros[c - 2] + s);
			return r.substr( r.length - c, c );
		}
		else {
			r = s;
		}
		return r;
	}

	function hasDay() {
		if ( foundDay || checkedDay ) {
			return foundDay;
		}
		foundDay = dayPartRegExp.test( format );
		checkedDay = true;
		return foundDay;
	}

	function getPart( date, part ) {
		if ( converted ) {
			return converted[ part ];
		}
		switch ( part ) {
			case 0:
				return date.getFullYear();
			case 1:
				return date.getMonth();
			case 2:
				return date.getDate();
			default:
				throw "Invalid part value " + part;
		}
	}

	if ( !sortable && convert ) {
		converted = convert.fromGregorian( value );
	}

	for ( ; ; ) {
		// Save the current index
		var index = tokenRegExp.lastIndex,
			// Look for the next pattern
			ar = tokenRegExp.exec( format );

		// Append the text before the pattern (or the end of the string if not found)
		var preMatch = format.slice( index, ar ? ar.index : format.length );
		quoteCount += appendPreOrPostMatch( preMatch, ret );

		if ( !ar ) {
			break;
		}

		// do not replace any matches that occur inside a string literal.
		if ( quoteCount % 2 ) {
			ret.push( ar[0] );
			continue;
		}

		var current = ar[ 0 ],
			clength = current.length;

		switch ( current ) {
			case "ddd":
				//Day of the week, as a three-letter abbreviation
			case "dddd":
				// Day of the week, using the full name
				var names = ( clength === 3 ) ? cal.days.namesAbbr : cal.days.names;
				ret.push( names[value.getDay()] );
				break;
			case "d":
				// Day of month, without leading zero for single-digit days
			case "dd":
				// Day of month, with leading zero for single-digit days
				foundDay = true;
				ret.push(
					padZeros( getPart(value, 2), clength )
				);
				break;
			case "MMM":
				// Month, as a three-letter abbreviation
			case "MMMM":
				// Month, using the full name
				var part = getPart( value, 1 );
				ret.push(
					( cal.monthsGenitive && hasDay() ) ?
					( cal.monthsGenitive[ clength === 3 ? "namesAbbr" : "names" ][ part ] ) :
					( cal.months[ clength === 3 ? "namesAbbr" : "names" ][ part ] )
				);
				break;
			case "M":
				// Month, as digits, with no leading zero for single-digit months
			case "MM":
				// Month, as digits, with leading zero for single-digit months
				ret.push(
					padZeros( getPart(value, 1) + 1, clength )
				);
				break;
			case "y":
				// Year, as two digits, but with no leading zero for years less than 10
			case "yy":
				// Year, as two digits, with leading zero for years less than 10
			case "yyyy":
				// Year represented by four full digits
				part = converted ? converted[ 0 ] : getEraYear( value, cal, getEra(value, eras), sortable );
				if ( clength < 4 ) {
					part = part % 100;
				}
				ret.push(
					padZeros( part, clength )
				);
				break;
			case "h":
				// Hours with no leading zero for single-digit hours, using 12-hour clock
			case "hh":
				// Hours with leading zero for single-digit hours, using 12-hour clock
				hour = value.getHours() % 12;
				if ( hour === 0 ) hour = 12;
				ret.push(
					padZeros( hour, clength )
				);
				break;
			case "H":
				// Hours with no leading zero for single-digit hours, using 24-hour clock
			case "HH":
				// Hours with leading zero for single-digit hours, using 24-hour clock
				ret.push(
					padZeros( value.getHours(), clength )
				);
				break;
			case "m":
				// Minutes with no leading zero for single-digit minutes
			case "mm":
				// Minutes with leading zero for single-digit minutes
				ret.push(
					padZeros( value.getMinutes(), clength )
				);
				break;
			case "s":
				// Seconds with no leading zero for single-digit seconds
			case "ss":
				// Seconds with leading zero for single-digit seconds
				ret.push(
					padZeros( value.getSeconds(), clength )
				);
				break;
			case "t":
				// One character am/pm indicator ("a" or "p")
			case "tt":
				// Multicharacter am/pm indicator
				part = value.getHours() < 12 ? ( cal.AM ? cal.AM[0] : " " ) : ( cal.PM ? cal.PM[0] : " " );
				ret.push( clength === 1 ? part.charAt(0) : part );
				break;
			case "f":
				// Deciseconds
			case "ff":
				// Centiseconds
			case "fff":
				// Milliseconds
				ret.push(
					padZeros( value.getMilliseconds(), 3 ).substr( 0, clength )
				);
				break;
			case "z":
				// Time zone offset, no leading zero
			case "zz":
				// Time zone offset with leading zero
				hour = value.getTimezoneOffset() / 60;
				ret.push(
					( hour <= 0 ? "+" : "-" ) + padZeros( Math.floor(Math.abs(hour)), clength )
				);
				break;
			case "zzz":
				// Time zone offset with leading zero
				hour = value.getTimezoneOffset() / 60;
				ret.push(
					( hour <= 0 ? "+" : "-" ) + padZeros( Math.floor(Math.abs(hour)), 2 ) +
					// Hard coded ":" separator, rather than using cal.TimeSeparator
					// Repeated here for consistency, plus ":" was already assumed in date parsing.
					":" + padZeros( Math.abs(value.getTimezoneOffset() % 60), 2 )
				);
				break;
			case "g":
			case "gg":
				if ( cal.eras ) {
					ret.push(
						cal.eras[ getEra(value, eras) ].name
					);
				}
				break;
		case "/":
			ret.push( cal["/"] );
			break;
		default:
			throw "Invalid date format pattern \'" + current + "\'.";
		}
	}
	return ret.join( "" );
};

// formatNumber
(function() {
	var expandNumber;

	expandNumber = function( number, precision, formatInfo ) {
		var groupSizes = formatInfo.groupSizes,
			curSize = groupSizes[ 0 ],
			curGroupIndex = 1,
			factor = Math.pow( 10, precision ),
			rounded = Math.round( number * factor ) / factor;

		if ( !isFinite(rounded) ) {
			rounded = number;
		}
		number = rounded;

		var numberString = number+"",
			right = "",
			split = numberString.split( /e/i ),
			exponent = split.length > 1 ? parseInt( split[1], 10 ) : 0;
		numberString = split[ 0 ];
		split = numberString.split( "." );
		numberString = split[ 0 ];
		right = split.length > 1 ? split[ 1 ] : "";

		if ( exponent > 0 ) {
			right = zeroPad( right, exponent, false );
			numberString += right.slice( 0, exponent );
			right = right.substr( exponent );
		}
		else if ( exponent < 0 ) {
			exponent = -exponent;
			numberString = zeroPad( numberString, exponent + 1, true );
			right = numberString.slice( -exponent, numberString.length ) + right;
			numberString = numberString.slice( 0, -exponent );
		}

		if ( precision > 0 ) {
			right = formatInfo[ "." ] +
				( (right.length > precision) ? right.slice(0, precision) : zeroPad(right, precision) );
		}
		else {
			right = "";
		}

		var stringIndex = numberString.length - 1,
			sep = formatInfo[ "," ],
			ret = "";

		while ( stringIndex >= 0 ) {
			if ( curSize === 0 || curSize > stringIndex ) {
				return numberString.slice( 0, stringIndex + 1 ) + ( ret.length ? (sep + ret + right) : right );
			}
			ret = numberString.slice( stringIndex - curSize + 1, stringIndex + 1 ) + ( ret.length ? (sep + ret) : "" );

			stringIndex -= curSize;

			if ( curGroupIndex < groupSizes.length ) {
				curSize = groupSizes[ curGroupIndex ];
				curGroupIndex++;
			}
		}

		return numberString.slice( 0, stringIndex + 1 ) + sep + ret + right;
	};

	formatNumber = function( value, format, culture ) {
		if ( !isFinite(value) ) {
			if ( value === Infinity ) {
				return culture.numberFormat.positiveInfinity;
			}
			if ( value === -Infinity ) {
				return culture.numberFormat.negativeInfinity;
			}
			return culture.numberFormat.NaN;
		}
		if ( !format || format === "i" ) {
			return culture.name.length ? value.toLocaleString() : value.toString();
		}
		format = format || "D";

		var nf = culture.numberFormat,
			number = Math.abs( value ),
			precision = -1,
			pattern;
		if ( format.length > 1 ) precision = parseInt( format.slice(1), 10 );

		var current = format.charAt( 0 ).toUpperCase(),
			formatInfo;

		switch ( current ) {
			case "D":
				pattern = "n";
				number = truncate( number );
				if ( precision !== -1 ) {
					number = zeroPad( "" + number, precision, true );
				}
				if ( value < 0 ) number = "-" + number;
				break;
			case "N":
				formatInfo = nf;
				/* falls through */
			case "C":
				formatInfo = formatInfo || nf.currency;
				/* falls through */
			case "P":
				formatInfo = formatInfo || nf.percent;
				pattern = value < 0 ? formatInfo.pattern[ 0 ] : ( formatInfo.pattern[1] || "n" );
				if ( precision === -1 ) precision = formatInfo.decimals;
				number = expandNumber( number * (current === "P" ? 100 : 1), precision, formatInfo );
				break;
			default:
				throw "Bad number format specifier: " + current;
		}

		var patternParts = /n|\$|-|%/g,
			ret = "";
		for ( ; ; ) {
			var index = patternParts.lastIndex,
				ar = patternParts.exec( pattern );

			ret += pattern.slice( index, ar ? ar.index : pattern.length );

			if ( !ar ) {
				break;
			}

			switch ( ar[0] ) {
				case "n":
					ret += number;
					break;
				case "$":
					ret += nf.currency.symbol;
					break;
				case "-":
					// don't make 0 negative
					if ( /[1-9]/.test(number) ) {
						ret += nf[ "-" ];
					}
					break;
				case "%":
					ret += nf.percent.symbol;
					break;
			}
		}

		return ret;
	};

}());

getTokenRegExp = function() {
	// regular expression for matching date and time tokens in format strings.
	return (/\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g);
};

getEra = function( date, eras ) {
	if ( !eras ) return 0;
	var start, ticks = date.getTime();
	for ( var i = 0, l = eras.length; i < l; i++ ) {
		start = eras[ i ].start;
		if ( start === null || ticks >= start ) {
			return i;
		}
	}
	return 0;
};

getEraYear = function( date, cal, era, sortable ) {
	var year = date.getFullYear();
	if ( !sortable && cal.eras ) {
		// convert normal gregorian year to era-shifted gregorian
		// year by subtracting the era offset
		year -= cal.eras[ era ].offset;
	}
	return year;
};

// parseExact
(function() {
	var expandYear,
		getDayIndex,
		getMonthIndex,
		getParseRegExp,
		outOfRange,
		toUpper,
		toUpperArray;

	expandYear = function( cal, year ) {
		// expands 2-digit year into 4 digits.
		if ( year < 100 ) {
			var now = new Date(),
				era = getEra( now ),
				curr = getEraYear( now, cal, era ),
				twoDigitYearMax = cal.twoDigitYearMax;
			twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt( twoDigitYearMax, 10 ) : twoDigitYearMax;
			year += curr - ( curr % 100 );
			if ( year > twoDigitYearMax ) {
				year -= 100;
			}
		}
		return year;
	};

	getDayIndex = function	( cal, value, abbr ) {
		var ret,
			days = cal.days,
			upperDays = cal._upperDays;
		if ( !upperDays ) {
			cal._upperDays = upperDays = [
				toUpperArray( days.names ),
				toUpperArray( days.namesAbbr ),
				toUpperArray( days.namesShort )
			];
		}
		value = toUpper( value );
		if ( abbr ) {
			ret = arrayIndexOf( upperDays[1], value );
			if ( ret === -1 ) {
				ret = arrayIndexOf( upperDays[2], value );
			}
		}
		else {
			ret = arrayIndexOf( upperDays[0], value );
		}
		return ret;
	};

	getMonthIndex = function( cal, value, abbr ) {
		var months = cal.months,
			monthsGen = cal.monthsGenitive || cal.months,
			upperMonths = cal._upperMonths,
			upperMonthsGen = cal._upperMonthsGen;
		if ( !upperMonths ) {
			cal._upperMonths = upperMonths = [
				toUpperArray( months.names ),
				toUpperArray( months.namesAbbr )
			];
			cal._upperMonthsGen = upperMonthsGen = [
				toUpperArray( monthsGen.names ),
				toUpperArray( monthsGen.namesAbbr )
			];
		}
		value = toUpper( value );
		var i = arrayIndexOf( abbr ? upperMonths[1] : upperMonths[0], value );
		if ( i < 0 ) {
			i = arrayIndexOf( abbr ? upperMonthsGen[1] : upperMonthsGen[0], value );
		}
		return i;
	};

	getParseRegExp = function( cal, format ) {
		// converts a format string into a regular expression with groups that
		// can be used to extract date fields from a date string.
		// check for a cached parse regex.
		var re = cal._parseRegExp;
		if ( !re ) {
			cal._parseRegExp = re = {};
		}
		else {
			var reFormat = re[ format ];
			if ( reFormat ) {
				return reFormat;
			}
		}

		// expand single digit formats, then escape regular expression characters.
		var expFormat = expandFormat( cal, format ).replace( /([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1" ),
			regexp = [ "^" ],
			groups = [],
			index = 0,
			quoteCount = 0,
			tokenRegExp = getTokenRegExp(),
			match;

		// iterate through each date token found.
		while ( (match = tokenRegExp.exec(expFormat)) !== null ) {
			var preMatch = expFormat.slice( index, match.index );
			index = tokenRegExp.lastIndex;

			// don't replace any matches that occur inside a string literal.
			quoteCount += appendPreOrPostMatch( preMatch, regexp );
			if ( quoteCount % 2 ) {
				regexp.push( match[0] );
				continue;
			}

			// add a regex group for the token.
			var m = match[ 0 ],
				len = m.length,
				add;
			switch ( m ) {
				case "dddd": case "ddd":
				case "MMMM": case "MMM":
				case "gg": case "g":
					add = "(\\D+)";
					break;
				case "tt": case "t":
					add = "(\\D*)";
					break;
				case "yyyy":
				case "fff":
				case "ff":
				case "f":
					add = "(\\d{" + len + "})";
					break;
				case "dd": case "d":
				case "MM": case "M":
				case "yy": case "y":
				case "HH": case "H":
				case "hh": case "h":
				case "mm": case "m":
				case "ss": case "s":
					add = "(\\d\\d?)";
					break;
				case "zzz":
					add = "([+-]?\\d\\d?:\\d{2})";
					break;
				case "zz": case "z":
					add = "([+-]?\\d\\d?)";
					break;
				case "/":
					add = "(\\/)";
					break;
				default:
					throw "Invalid date format pattern \'" + m + "\'.";
			}
			if ( add ) {
				regexp.push( add );
			}
			groups.push( match[0] );
		}
		appendPreOrPostMatch( expFormat.slice(index), regexp );
		regexp.push( "$" );

		// allow whitespace to differ when matching formats.
		var regexpStr = regexp.join( "" ).replace( /\s+/g, "\\s+" ),
			parseRegExp = { "regExp": regexpStr, "groups": groups };

		// cache the regex for this format.
		return re[ format ] = parseRegExp;
	};

	outOfRange = function( value, low, high ) {
		return value < low || value > high;
	};

	toUpper = function( value ) {
		// "he-IL" has non-breaking space in weekday names.
		return value.split( "\u00A0" ).join( " " ).toUpperCase();
	};

	toUpperArray = function( arr ) {
		var results = [];
		for ( var i = 0, l = arr.length; i < l; i++ ) {
			results[ i ] = toUpper( arr[i] );
		}
		return results;
	};

	parseExact = function( value, format, culture ) {
		// try to parse the date string by matching against the format string
		// while using the specified culture for date field names.
		value = trim( value );
		var cal = culture.calendar,
			// convert date formats into regular expressions with groupings.
			// use the regexp to determine the input format and extract the date fields.
			parseInfo = getParseRegExp( cal, format ),
			match = new RegExp( parseInfo.regExp ).exec( value );
		if ( match === null ) {
			return null;
		}
		// found a date format that matches the input.
		var groups = parseInfo.groups,
			era = null, year = null, month = null, date = null, weekDay = null,
			hour = 0, hourOffset, min = 0, sec = 0, msec = 0, tzMinOffset = null,
			pmHour = false;
		// iterate the format groups to extract and set the date fields.
		for ( var j = 0, jl = groups.length; j < jl; j++ ) {
			var matchGroup = match[ j + 1 ];
			if ( matchGroup ) {
				var current = groups[ j ],
					clength = current.length,
					matchInt = parseInt( matchGroup, 10 );
				switch ( current ) {
					case "dd": case "d":
						// Day of month.
						date = matchInt;
						// check that date is generally in valid range, also checking overflow below.
						if ( outOfRange(date, 1, 31) ) return null;
						break;
					case "MMM": case "MMMM":
						month = getMonthIndex( cal, matchGroup, clength === 3 );
						if ( outOfRange(month, 0, 11) ) return null;
						break;
					case "M": case "MM":
						// Month.
						month = matchInt - 1;
						if ( outOfRange(month, 0, 11) ) return null;
						break;
					case "y": case "yy":
					case "yyyy":
						year = clength < 4 ? expandYear( cal, matchInt ) : matchInt;
						if ( outOfRange(year, 0, 9999) ) return null;
						break;
					case "h": case "hh":
						// Hours (12-hour clock).
						hour = matchInt;
						if ( hour === 12 ) hour = 0;
						if ( outOfRange(hour, 0, 11) ) return null;
						break;
					case "H": case "HH":
						// Hours (24-hour clock).
						hour = matchInt;
						if ( outOfRange(hour, 0, 23) ) return null;
						break;
					case "m": case "mm":
						// Minutes.
						min = matchInt;
						if ( outOfRange(min, 0, 59) ) return null;
						break;
					case "s": case "ss":
						// Seconds.
						sec = matchInt;
						if ( outOfRange(sec, 0, 59) ) return null;
						break;
					case "tt": case "t":
						// AM/PM designator.
						// see if it is standard, upper, or lower case PM. If not, ensure it is at least one of
						// the AM tokens. If not, fail the parse for this format.
						pmHour = cal.PM && ( matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2] );
						if (
							!pmHour && (
								!cal.AM || ( matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2] )
							)
						) return null;
						break;
					case "f":
						// Deciseconds.
					case "ff":
						// Centiseconds.
					case "fff":
						// Milliseconds.
						msec = matchInt * Math.pow( 10, 3 - clength );
						if ( outOfRange(msec, 0, 999) ) return null;
						break;
					case "ddd":
						// Day of week.
					case "dddd":
						// Day of week.
						weekDay = getDayIndex( cal, matchGroup, clength === 3 );
						if ( outOfRange(weekDay, 0, 6) ) return null;
						break;
					case "zzz":
						// Time zone offset in +/- hours:min.
						var offsets = matchGroup.split( /:/ );
						if ( offsets.length !== 2 ) return null;
						hourOffset = parseInt( offsets[0], 10 );
						if ( outOfRange(hourOffset, -12, 13) ) return null;
						var minOffset = parseInt( offsets[1], 10 );
						if ( outOfRange(minOffset, 0, 59) ) return null;
						tzMinOffset = ( hourOffset * 60 ) + ( startsWith(matchGroup, "-") ? -minOffset : minOffset );
						break;
					case "z": case "zz":
						// Time zone offset in +/- hours.
						hourOffset = matchInt;
						if ( outOfRange(hourOffset, -12, 13) ) return null;
						tzMinOffset = hourOffset * 60;
						break;
					case "g": case "gg":
						var eraName = matchGroup;
						if ( !eraName || !cal.eras ) return null;
						eraName = trim( eraName.toLowerCase() );
						for ( var i = 0, l = cal.eras.length; i < l; i++ ) {
							if ( eraName === cal.eras[i].name.toLowerCase() ) {
								era = i;
								break;
							}
						}
						// could not find an era with that name
						if ( era === null ) return null;
						break;
				}
			}
		}
		var result = new Date(), defaultYear, convert = cal.convert;
		defaultYear = convert ? convert.fromGregorian( result )[ 0 ] : result.getFullYear();
		if ( year === null ) {
			year = defaultYear;
		}
		else if ( cal.eras ) {
			// year must be shifted to normal gregorian year
			// but not if year was not specified, its already normal gregorian
			// per the main if clause above.
			year += cal.eras[( era || 0 )].offset;
		}
		// set default day and month to 1 and January, so if unspecified, these are the defaults
		// instead of the current day/month.
		if ( month === null ) {
			month = 0;
		}
		if ( date === null ) {
			date = 1;
		}
		// now have year, month, and date, but in the culture's calendar.
		// convert to gregorian if necessary
		if ( convert ) {
			result = convert.toGregorian( year, month, date );
			// conversion failed, must be an invalid match
			if ( result === null ) return null;
		}
		else {
			// have to set year, month and date together to avoid overflow based on current date.
			result.setFullYear( year, month, date );
			// check to see if date overflowed for specified month (only checked 1-31 above).
			if ( result.getDate() !== date ) return null;
			// invalid day of week.
			if ( weekDay !== null && result.getDay() !== weekDay ) {
				return null;
			}
		}
		// if pm designator token was found make sure the hours fit the 24-hour clock.
		if ( pmHour && hour < 12 ) {
			hour += 12;
		}
		result.setHours( hour, min, sec, msec );
		if ( tzMinOffset !== null ) {
			// adjust timezone to utc before applying local offset.
			var adjustedMin = result.getMinutes() - ( tzMinOffset + result.getTimezoneOffset() );
			// Safari limits hours and minutes to the range of -127 to 127.  We need to use setHours
			// to ensure both these fields will not exceed this range.	adjustedMin will range
			// somewhere between -1440 and 1500, so we only need to split this into hours.
			result.setHours( result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60 );
		}
		return result;
	};
}());

parseNegativePattern = function( value, nf, negativePattern ) {
	var neg = nf[ "-" ],
		pos = nf[ "+" ],
		ret;
	switch ( negativePattern ) {
		case "n -":
			neg = " " + neg;
			pos = " " + pos;
			/* falls through */
		case "n-":
			if ( endsWith(value, neg) ) {
				ret = [ "-", value.substr(0, value.length - neg.length) ];
			}
			else if ( endsWith(value, pos) ) {
				ret = [ "+", value.substr(0, value.length - pos.length) ];
			}
			break;
		case "- n":
			neg += " ";
			pos += " ";
			/* falls through */
		case "-n":
			if ( startsWith(value, neg) ) {
				ret = [ "-", value.substr(neg.length) ];
			}
			else if ( startsWith(value, pos) ) {
				ret = [ "+", value.substr(pos.length) ];
			}
			break;
		case "(n)":
			if ( startsWith(value, "(") && endsWith(value, ")") ) {
				ret = [ "-", value.substr(1, value.length - 2) ];
			}
			break;
	}
	return ret || [ "", value ];
};

//
// public instance functions
//

Globalize.prototype.findClosestCulture = function( cultureSelector ) {
	return Globalize.findClosestCulture.call( this, cultureSelector );
};

Globalize.prototype.format = function( value, format, cultureSelector ) {
	return Globalize.format.call( this, value, format, cultureSelector );
};

Globalize.prototype.localize = function( key, cultureSelector ) {
	return Globalize.localize.call( this, key, cultureSelector );
};

Globalize.prototype.parseInt = function( value, radix, cultureSelector ) {
	return Globalize.parseInt.call( this, value, radix, cultureSelector );
};

Globalize.prototype.parseFloat = function( value, radix, cultureSelector ) {
	return Globalize.parseFloat.call( this, value, radix, cultureSelector );
};

Globalize.prototype.culture = function( cultureSelector ) {
	return Globalize.culture.call( this, cultureSelector );
};

//
// public singleton functions
//

Globalize.addCultureInfo = function( cultureName, baseCultureName, info ) {

	var base = {},
		isNew = false;

	if ( typeof cultureName !== "string" ) {
		// cultureName argument is optional string. If not specified, assume info is first
		// and only argument. Specified info deep-extends current culture.
		info = cultureName;
		cultureName = this.culture().name;
		base = this.cultures[ cultureName ];
	} else if ( typeof baseCultureName !== "string" ) {
		// baseCultureName argument is optional string. If not specified, assume info is second
		// argument. Specified info deep-extends specified culture.
		// If specified culture does not exist, create by deep-extending default
		info = baseCultureName;
		isNew = ( this.cultures[ cultureName ] == null );
		base = this.cultures[ cultureName ] || this.cultures[ "default" ];
	} else {
		// cultureName and baseCultureName specified. Assume a new culture is being created
		// by deep-extending an specified base culture
		isNew = true;
		base = this.cultures[ baseCultureName ];
	}

	this.cultures[ cultureName ] = extend(true, {},
		base,
		info
	);
	// Make the standard calendar the current culture if it's a new culture
	if ( isNew ) {
		this.cultures[ cultureName ].calendar = this.cultures[ cultureName ].calendars.standard;
	}
};

Globalize.findClosestCulture = function( name ) {
	var match;
	if ( !name ) {
		return this.findClosestCulture( this.cultureSelector ) || this.cultures[ "default" ];
	}
	if ( typeof name === "string" ) {
		name = name.split( "," );
	}
	if ( isArray(name) ) {
		var lang,
			cultures = this.cultures,
			list = name,
			i, l = list.length,
			prioritized = [];
		for ( i = 0; i < l; i++ ) {
			name = trim( list[i] );
			var pri, parts = name.split( ";" );
			lang = trim( parts[0] );
			if ( parts.length === 1 ) {
				pri = 1;
			}
			else {
				name = trim( parts[1] );
				if ( name.indexOf("q=") === 0 ) {
					name = name.substr( 2 );
					pri = parseFloat( name );
					pri = isNaN( pri ) ? 0 : pri;
				}
				else {
					pri = 1;
				}
			}
			prioritized.push({ lang: lang, pri: pri });
		}
		prioritized.sort(function( a, b ) {
			if ( a.pri < b.pri ) {
				return 1;
			} else if ( a.pri > b.pri ) {
				return -1;
			}
			return 0;
		});
		// exact match
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			match = cultures[ lang ];
			if ( match ) {
				return match;
			}
		}

		// neutral language match
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			do {
				var index = lang.lastIndexOf( "-" );
				if ( index === -1 ) {
					break;
				}
				// strip off the last part. e.g. en-US => en
				lang = lang.substr( 0, index );
				match = cultures[ lang ];
				if ( match ) {
					return match;
				}
			}
			while ( 1 );
		}

		// last resort: match first culture using that language
		for ( i = 0; i < l; i++ ) {
			lang = prioritized[ i ].lang;
			for ( var cultureKey in cultures ) {
				var culture = cultures[ cultureKey ];
				if ( culture.language === lang ) {
					return culture;
				}
			}
		}
	}
	else if ( typeof name === "object" ) {
		return name;
	}
	return match || null;
};

Globalize.format = function( value, format, cultureSelector ) {
	var culture = this.findClosestCulture( cultureSelector );
	if ( value instanceof Date ) {
		value = formatDate( value, format, culture );
	}
	else if ( typeof value === "number" ) {
		value = formatNumber( value, format, culture );
	}
	return value;
};

Globalize.localize = function( key, cultureSelector ) {
	return this.findClosestCulture( cultureSelector ).messages[ key ] ||
		this.cultures[ "default" ].messages[ key ];
};

Globalize.parseDate = function( value, formats, culture ) {
	culture = this.findClosestCulture( culture );

	var date, prop, patterns;
	if ( formats ) {
		if ( typeof formats === "string" ) {
			formats = [ formats ];
		}
		if ( formats.length ) {
			for ( var i = 0, l = formats.length; i < l; i++ ) {
				var format = formats[ i ];
				if ( format ) {
					date = parseExact( value, format, culture );
					if ( date ) {
						break;
					}
				}
			}
		}
	} else {
		patterns = culture.calendar.patterns;
		for ( prop in patterns ) {
			date = parseExact( value, patterns[prop], culture );
			if ( date ) {
				break;
			}
		}
	}

	return date || null;
};

Globalize.parseInt = function( value, radix, cultureSelector ) {
	return truncate( Globalize.parseFloat(value, radix, cultureSelector) );
};

Globalize.parseFloat = function( value, radix, cultureSelector ) {
	// radix argument is optional
	if ( typeof radix !== "number" ) {
		cultureSelector = radix;
		radix = 10;
	}

	var culture = this.findClosestCulture( cultureSelector );
	var ret = NaN,
		nf = culture.numberFormat;

	if ( value.indexOf(culture.numberFormat.currency.symbol) > -1 ) {
		// remove currency symbol
		value = value.replace( culture.numberFormat.currency.symbol, "" );
		// replace decimal seperator
		value = value.replace( culture.numberFormat.currency["."], culture.numberFormat["."] );
	}

	//Remove percentage character from number string before parsing
	if ( value.indexOf(culture.numberFormat.percent.symbol) > -1){
		value = value.replace( culture.numberFormat.percent.symbol, "" );
	}

	// remove spaces: leading, trailing and between - and number. Used for negative currency pt-BR
	value = value.replace( / /g, "" );

	// allow infinity or hexidecimal
	if ( regexInfinity.test(value) ) {
		ret = parseFloat( value );
	}
	else if ( !radix && regexHex.test(value) ) {
		ret = parseInt( value, 16 );
	}
	else {

		// determine sign and number
		var signInfo = parseNegativePattern( value, nf, nf.pattern[0] ),
			sign = signInfo[ 0 ],
			num = signInfo[ 1 ];

		// #44 - try parsing as "(n)"
		if ( sign === "" && nf.pattern[0] !== "(n)" ) {
			signInfo = parseNegativePattern( value, nf, "(n)" );
			sign = signInfo[ 0 ];
			num = signInfo[ 1 ];
		}

		// try parsing as "-n"
		if ( sign === "" && nf.pattern[0] !== "-n" ) {
			signInfo = parseNegativePattern( value, nf, "-n" );
			sign = signInfo[ 0 ];
			num = signInfo[ 1 ];
		}

		sign = sign || "+";

		// determine exponent and number
		var exponent,
			intAndFraction,
			exponentPos = num.indexOf( "e" );
		if ( exponentPos < 0 ) exponentPos = num.indexOf( "E" );
		if ( exponentPos < 0 ) {
			intAndFraction = num;
			exponent = null;
		}
		else {
			intAndFraction = num.substr( 0, exponentPos );
			exponent = num.substr( exponentPos + 1 );
		}
		// determine decimal position
		var integer,
			fraction,
			decSep = nf[ "." ],
			decimalPos = intAndFraction.indexOf( decSep );
		if ( decimalPos < 0 ) {
			integer = intAndFraction;
			fraction = null;
		}
		else {
			integer = intAndFraction.substr( 0, decimalPos );
			fraction = intAndFraction.substr( decimalPos + decSep.length );
		}
		// handle groups (e.g. 1,000,000)
		var groupSep = nf[ "," ];
		integer = integer.split( groupSep ).join( "" );
		var altGroupSep = groupSep.replace( /\u00A0/g, " " );
		if ( groupSep !== altGroupSep ) {
			integer = integer.split( altGroupSep ).join( "" );
		}
		// build a natively parsable number string
		var p = sign + integer;
		if ( fraction !== null ) {
			p += "." + fraction;
		}
		if ( exponent !== null ) {
			// exponent itself may have a number patternd
			var expSignInfo = parseNegativePattern( exponent, nf, "-n" );
			p += "e" + ( expSignInfo[0] || "+" ) + expSignInfo[ 1 ];
		}
		if ( regexParseFloat.test(p) ) {
			ret = parseFloat( p );
		}
	}
	return ret;
};

Globalize.culture = function( cultureSelector ) {
	// setter
	if ( typeof cultureSelector !== "undefined" ) {
		this.cultureSelector = cultureSelector;
	}
	// getter
	return this.findClosestCulture( cultureSelector ) || this.cultures[ "default" ];
};
return Globalize;
}( this ));

}
if( window.Coveo === undefined) {
/*
 * l10n.js
 * 2013-04-18
 * 
 * By Eli Grey, http://eligrey.com
 * Licensed under the X11/MIT License
 *   See LICENSE.md
 */

/*global XMLHttpRequest, setTimeout, document, navigator, ActiveXObject*/

/*! @source http://purl.eligrey.com/github/l10n.js/blob/master/l10n.js*/

(function () {
"use strict";

var
  undef_type = "undefined"
, string_type = "string"
, nav = self.navigator
, String_ctr = String
, has_own_prop = Object.prototype.hasOwnProperty
, load_queues = {}
, localizations = {}
, FALSE = !1
, TRUE = !0
// the official format is application/vnd.oftn.l10n+json, though l10n.js will also
// accept application/x-l10n+json and application/l10n+json
, l10n_js_media_type = /^\s*application\/(?:vnd\.oftn\.|x-)?l10n\+json\s*(?:$|;)/i
, XHR

// property minification aids
, $locale = "locale"
, $default_locale = "defaultLocale"
, $to_locale_string = "toLocaleString"
, $to_lowercase = "toLowerCase"

, array_index_of = Array.prototype.indexOf || function (item) {
	var
	  len = this.length
	, i   = 0
	;
	
	for (; i < len; i++) {
		if (i in this && this[i] === item) {
			return i;
		}
	}
	
	return -1;
}
, request_JSON = function (uri) {
	var req = new XHR();
	
	// sadly, this has to be blocking to allow for a graceful degrading API
	req.open("GET", uri, FALSE);
	req.send(null);
	
	if (req.status !== 200) {
		// warn about error without stopping execution
		setTimeout(function () {
			// Error messages are not localized as not to cause an infinite loop
			var l10n_err = new Error("Unable to load localization data: " + uri);
			l10n_err.name = "Localization Error";
			throw l10n_err;
		}, 0);
		
		return {};
	} else {
		return JSON.parse(req.responseText);
	}
}
, load = String_ctr[$to_locale_string] = function (data) {
	// don't handle function[$to_locale_string](indentationAmount:Number)
	if (arguments.length > 0 && typeof data !== "number") {
		if (typeof data === string_type) {
			load(request_JSON(data));
		} else if (data === FALSE) {
			// reset all localizations
			localizations = {};
		} else {
			// Extend current localizations instead of completely overwriting them
			var locale, localization, message;
			for (locale in data) {
				if (has_own_prop.call(data, locale)) {
					localization = data[locale];
					locale = locale[$to_lowercase]();
					
					if (!(locale in localizations) || localization === FALSE) {
						// reset locale if not existing or reset flag is specified
						localizations[locale] = {};
					}
					
					if (localization === FALSE) {
						continue;
					}
					
					// URL specified
					if (typeof localization === string_type) {
						if (String_ctr[$locale][$to_lowercase]().indexOf(locale) === 0) {
							localization = request_JSON(localization);
						} else {
							// queue loading locale if not needed
							if (!(locale in load_queues)) {
								load_queues[locale] = [];
							}
							load_queues[locale].push(localization);
							continue;
						}
					}
					
					for (message in localization) {
						if (has_own_prop.call(localization, message)) {
							localizations[locale][message] = localization[message];
						}
					}
				}
			}
		}
	}
	// Return what function[$to_locale_string]() normally returns
	return Function.prototype[$to_locale_string].apply(String_ctr, arguments);
}
, process_load_queue = function (locale) {
	var
	  queue = load_queues[locale]
	, i = 0
	, len = queue.length
	, localization
	;
	
	for (; i < len; i++) {
		localization = {};
		localization[locale] = request_JSON(queue[i]);
		load(localization);
	}
	
	delete load_queues[locale];
}
, use_default
, localize = String_ctr.prototype[$to_locale_string] = function () {
	var
	  using_default = use_default
	, current_locale = String_ctr[using_default ? $default_locale : $locale]
	, parts = current_locale[$to_lowercase]().split("-")
	, i = parts.length
	, this_val = this.valueOf()
	, locale
	;

	use_default = FALSE;
	
	// Iterate through locales starting at most-specific until a localization is found
	do {
		locale = parts.slice(0, i).join("-");
		// load locale if not loaded
		if (locale in load_queues) {
			process_load_queue(locale);
		}
		if (locale in localizations && this_val in localizations[locale]) {
			return localizations[locale][this_val];
		}
	}
	while (i --> 1);
	
	if (!using_default && String_ctr[$default_locale]) {
		use_default = TRUE;
		return localize.call(this_val);
	}

	return this_val;
}
;

if (typeof XMLHttpRequest === undef_type && typeof ActiveXObject !== undef_type) {
	var AXO = ActiveXObject;
	
	XHR = function () {
		try {
			return new AXO("Msxml2.XMLHTTP.6.0");
		} catch (xhrEx1) {}
		try {
			return new AXO("Msxml2.XMLHTTP.3.0");
		} catch (xhrEx2) {}
		try {
			return new AXO("Msxml2.XMLHTTP");
		} catch (xhrEx3) {}
	
		throw new Error("XMLHttpRequest not supported by this browser.");
	};
} else {
	XHR = XMLHttpRequest;
}

String_ctr[$default_locale] = String_ctr[$default_locale] || "";
String_ctr[$locale] = nav && (nav.language || nav.userLanguage) || "";

if (typeof document !== undef_type) {
	var
	  elts = document.getElementsByTagName("link")
	, i = elts.length
	, localization
	;
	
	while (i--) {
		var
		  elt = elts[i]
		, rel = (elt.getAttribute("rel") || "")[$to_lowercase]().split(/\s+/)
		;
		
		if (l10n_js_media_type.test(elt.type)) {
			if (array_index_of.call(rel, "localizations") !== -1) {
				// multiple localizations
				load(elt.getAttribute("href"));
			} else if (array_index_of.call(rel, "localization") !== -1) {
				// single localization
				localization = {};
				localization[(elt.getAttribute("hreflang") || "")[$to_lowercase]()] =
					elt.getAttribute("href");
				load(localization);
			}
		}
	}
}

}());

}
if( window.$.jsonp === undefined) {
/*
 * jQuery JSONP Core Plugin 2.4.0 (2012-08-21)
 *
 * https://github.com/jaubourg/jquery-jsonp
 *
 * Copyright (c) 2012 Julian Aubourg
 *
 * This document is licensed as free software under the terms of the
 * MIT License: http://www.opensource.org/licenses/mit-license.php
 */
( function( $ ) {

	// ###################### UTILITIES ##

	// Noop
	function noop() {
	}

	// Generic callback
	function genericCallback( data ) {
		lastValue = [ data ];
	}

	// Call if defined
	function callIfDefined( method , object , parameters ) {
		return method && method.apply && method.apply( object.context || object , parameters );
	}

	// Give joining character given url
	function qMarkOrAmp( url ) {
		return /\?/ .test( url ) ? "&" : "?";
	}

	var // String constants (for better minification)
		STR_ASYNC = "async",
		STR_CHARSET = "charset",
		STR_EMPTY = "",
		STR_ERROR = "error",
		STR_INSERT_BEFORE = "insertBefore",
		STR_JQUERY_JSONP = "_jqjsp",
		STR_ON = "on",
		STR_ON_CLICK = STR_ON + "click",
		STR_ON_ERROR = STR_ON + STR_ERROR,
		STR_ON_LOAD = STR_ON + "load",
		STR_ON_READY_STATE_CHANGE = STR_ON + "readystatechange",
		STR_READY_STATE = "readyState",
		STR_REMOVE_CHILD = "removeChild",
		STR_SCRIPT_TAG = "<script>",
		STR_SUCCESS = "success",
		STR_TIMEOUT = "timeout",

		// Window
		win = window,
		// Deferred
		Deferred = $.Deferred,
		// Head element
		head = $( "head" )[ 0 ] || document.documentElement,
		// Page cache
		pageCache = {},
		// Counter
		count = 0,
		// Last returned value
		lastValue,

		// ###################### DEFAULT OPTIONS ##
		xOptionsDefaults = {
			//beforeSend: undefined,
			//cache: false,
			callback: STR_JQUERY_JSONP,
			//callbackParameter: undefined,
			//charset: undefined,
			//complete: undefined,
			//context: undefined,
			//data: "",
			//dataFilter: undefined,
			//error: undefined,
			//pageCache: false,
			//success: undefined,
			//timeout: 0,
			//traditional: false,
			url: location.href
		},

		// opera demands sniffing :/
		opera = win.opera,

		// IE < 10
		oldIE = !!$( "<div>" ).html( "<!--[if IE]><i><![endif]-->" ).find("i").length;

	// ###################### MAIN FUNCTION ##
	function jsonp( xOptions ) {

		// Build data with default
		xOptions = $.extend( {} , xOptionsDefaults , xOptions );

		// References to xOptions members (for better minification)
		var successCallback = xOptions.success,
			errorCallback = xOptions.error,
			completeCallback = xOptions.complete,
			dataFilter = xOptions.dataFilter,
			callbackParameter = xOptions.callbackParameter,
			successCallbackName = xOptions.callback,
			cacheFlag = xOptions.cache,
			pageCacheFlag = xOptions.pageCache,
			charset = xOptions.charset,
			url = xOptions.url,
			data = xOptions.data,
			timeout = xOptions.timeout,
			pageCached,

			// Abort/done flag
			done = 0,

			// Life-cycle functions
			cleanUp = noop,

			// Support vars
			supportOnload,
			supportOnreadystatechange,

			// Request execution vars
			firstChild,
			script,
			scriptAfter,
			timeoutTimer;

		// If we have Deferreds:
		// - substitute callbacks
		// - promote xOptions to a promise
		Deferred && Deferred(function( defer ) {
			defer.done( successCallback ).fail( errorCallback );
			successCallback = defer.resolve;
			errorCallback = defer.reject;
		}).promise( xOptions );

		// Create the abort method
		xOptions.abort = function() {
			!( done++ ) && cleanUp();
		};

		// Call beforeSend if provided (early abort if false returned)
		if ( callIfDefined( xOptions.beforeSend , xOptions , [ xOptions ] ) === !1 || done ) {
			return xOptions;
		}

		// Control entries
		url = url || STR_EMPTY;
		data = data ? ( (typeof data) == "string" ? data : $.param( data , xOptions.traditional ) ) : STR_EMPTY;

		// Build final url
		url += data ? ( qMarkOrAmp( url ) + data ) : STR_EMPTY;

		// Add callback parameter if provided as option
		callbackParameter && ( url += qMarkOrAmp( url ) + encodeURIComponent( callbackParameter ) + "=?" );

		// Add anticache parameter if needed
		!cacheFlag && !pageCacheFlag && ( url += qMarkOrAmp( url ) + "_" + ( new Date() ).getTime() + "=" );

		// Replace last ? by callback parameter
		url = url.replace( /=\?(&|$)/ , "=" + successCallbackName + "$1" );

		// Success notifier
		function notifySuccess( json ) {

			if ( !( done++ ) ) {

				cleanUp();
				// Pagecache if needed
				pageCacheFlag && ( pageCache [ url ] = { s: [ json ] } );
				// Apply the data filter if provided
				dataFilter && ( json = dataFilter.apply( xOptions , [ json ] ) );
				// Call success then complete
				callIfDefined( successCallback , xOptions , [ json , STR_SUCCESS, xOptions ] );
				callIfDefined( completeCallback , xOptions , [ xOptions , STR_SUCCESS ] );

			}
		}

		// Error notifier
		function notifyError( type ) {

			if ( !( done++ ) ) {

				// Clean up
				cleanUp();
				// If pure error (not timeout), cache if needed
				pageCacheFlag && type != STR_TIMEOUT && ( pageCache[ url ] = type );
				// Call error then complete
				callIfDefined( errorCallback , xOptions , [ xOptions , type ] );
				callIfDefined( completeCallback , xOptions , [ xOptions , type ] );

			}
		}

		// Check page cache
		if ( pageCacheFlag && ( pageCached = pageCache[ url ] ) ) {

			pageCached.s ? notifySuccess( pageCached.s[ 0 ] ) : notifyError( pageCached );

		} else {

			// Install the generic callback
			// (BEWARE: global namespace pollution ahoy)
			win[ successCallbackName ] = genericCallback;

			// Create the script tag
			script = $( STR_SCRIPT_TAG )[ 0 ];
			script.id = STR_JQUERY_JSONP + count++;

			// Set charset if provided
			if ( charset ) {
				script[ STR_CHARSET ] = charset;
			}

			opera && opera.version() < 11.60 ?
				// onerror is not supported: do not set as async and assume in-order execution.
				// Add a trailing script to emulate the event
				( ( scriptAfter = $( STR_SCRIPT_TAG )[ 0 ] ).text = "document.getElementById('" + script.id + "')." + STR_ON_ERROR + "()" )
			:
				// onerror is supported: set the script as async to avoid requests blocking each others
				( script[ STR_ASYNC ] = STR_ASYNC )

			;

			// Internet Explorer: event/htmlFor trick
			if ( oldIE ) {
				script.htmlFor = script.id;
				script.event = STR_ON_CLICK;
			}

			// Attached event handlers
			script[ STR_ON_LOAD ] = script[ STR_ON_ERROR ] = script[ STR_ON_READY_STATE_CHANGE ] = function ( result ) {

				// Test readyState if it exists
				if ( !script[ STR_READY_STATE ] || !/i/.test( script[ STR_READY_STATE ] ) ) {

					try {

						script[ STR_ON_CLICK ] && script[ STR_ON_CLICK ]();

					} catch( _ ) {}

					result = lastValue;
					lastValue = 0;
					result ? notifySuccess( result[ 0 ] ) : notifyError( STR_ERROR );

				}
			};

			// Set source
			script.src = url;

			// Re-declare cleanUp function
			cleanUp = function( i ) {
				timeoutTimer && clearTimeout( timeoutTimer );
				script[ STR_ON_READY_STATE_CHANGE ] = script[ STR_ON_LOAD ] = script[ STR_ON_ERROR ] = null;
				head[ STR_REMOVE_CHILD ]( script );
				scriptAfter && head[ STR_REMOVE_CHILD ]( scriptAfter );
			};

			// Append main script
			head[ STR_INSERT_BEFORE ]( script , ( firstChild = head.firstChild ) );

			// Append trailing script if needed
			scriptAfter && head[ STR_INSERT_BEFORE ]( scriptAfter , firstChild );

			// If a timeout is needed, install it
			timeoutTimer = timeout > 0 && setTimeout( function() {
				notifyError( STR_TIMEOUT );
			} , timeout );

		}

		return xOptions;
	}

	// ###################### SETUP FUNCTION ##
	jsonp.setup = function( xOptions ) {
		$.extend( xOptionsDefaults , xOptions );
	};

	// ###################### INSTALL in jQuery ##
	$.jsonp = jsonp;

} )( jQuery );

}
if( window.Coveo === undefined || window.Coveo['ModalBox'] === undefined) {
/// <reference path="../lib/jquery.d.ts"/>
var Coveo;
(function (Coveo) {
    var ModalBox;
    (function (ModalBox) {
        (function (BUTTON) {
            BUTTON[BUTTON["OK"] = 1] = "OK";
            BUTTON[BUTTON["APPLY"] = 2] = "APPLY";
            BUTTON[BUTTON["YES"] = 4] = "YES";
            BUTTON[BUTTON["NO"] = 8] = "NO";
            BUTTON[BUTTON["CANCEL"] = 16] = "CANCEL";
        })(ModalBox.BUTTON || (ModalBox.BUTTON = {}));
        var BUTTON = ModalBox.BUTTON;
        var closeFunctions = [];
        function open(content, options) {
            if (options === void 0) { options = {}; }
            $(document.body).addClass('coveo-modalBox-opened');
            var modalBox = $('<div class="coveo-modalBox" />').appendTo(document.body);
            if (options.fullscreen === true) {
                modalBox.addClass('coveo-fullscreen');
            }
            var overlay = $('<div class="coveo-overlay" />').appendTo(modalBox);
            var wrapper = $('<div class="coveo-wrapper" />').appendTo(modalBox);
            if (options.title != null) {
                var title = $('<div class="coveo-title" />').html(options.title).appendTo(wrapper);
                if (options.titleClose === true) {
                    title.click(function () { return close(); });
                }
            }
            if (content.length > 1) {
                content = $('<div />').append(content);
            }
            wrapper.append(content.addClass('coveo-body'));
            var close = function (button, forceClose) {
                if (button === void 0) { button = 0; }
                if (forceClose === void 0) { forceClose = false; }
                var valid = options.validation == null || options.validation(button);
                if (valid !== false || forceClose) {
                    modalBox.detach();
                    var index = $.inArray(close, closeFunctions);
                    if (index >= 0) {
                        closeFunctions.splice(index, 1);
                    }
                    if (closeFunctions.length == 0) {
                        $(document.body).removeClass('coveo-modalBox-opened');
                    }
                    return true;
                }
                return false;
            };
            var buttonsContainer;
            if (options.buttons != null) {
                var buttonClick = function (button) { return function () { return close(button); }; };
                buttonsContainer = $('<div class="coveo-buttons" />').appendTo(wrapper);
                if (options.buttons & 1 /* OK */) {
                    $('<div class="coveo-button">Ok</div>').click(buttonClick(1 /* OK */)).appendTo(buttonsContainer);
                }
                if (options.buttons & 2 /* APPLY */) {
                    $('<div class="coveo-button">Apply</div>').click(buttonClick(2 /* APPLY */)).appendTo(buttonsContainer);
                }
                if (options.buttons & 4 /* YES */) {
                    $('<div class="coveo-button">Yes</div>').click(buttonClick(4 /* YES */)).appendTo(buttonsContainer);
                }
                if (options.buttons & 8 /* NO */) {
                    $('<div class="coveo-button">No</div>').click(buttonClick(8 /* NO */)).appendTo(buttonsContainer);
                }
                if (options.buttons & 16 /* CANCEL */) {
                    $('<div class="coveo-button">Cancel</div>').click(buttonClick(16 /* CANCEL */)).appendTo(buttonsContainer);
                }
            }
            closeFunctions.push(close);
            if (options.overlayClose === true) {
                overlay.click(function () { return close(); });
            }
            if (options.className != null) {
                modalBox.addClass(options.className);
            }
            return {
                modalBox: modalBox,
                overlay: overlay,
                wrapper: wrapper,
                buttons: buttonsContainer,
                content: content,
                close: close
            };
        }
        ModalBox.open = open;
        function close(forceClose) {
            if (forceClose === void 0) { forceClose = false; }
            var i = 0;
            while (closeFunctions.length > i) {
                var closed = closeFunctions[i](0, forceClose);
                if (!closed) {
                    i++;
                }
            }
        }
        ModalBox.close = close;
    })(ModalBox = Coveo.ModalBox || (Coveo.ModalBox = {}));
})(Coveo || (Coveo = {}));

}
/*****************************************************************************
 * @license Copyright (c) 2005-2014, Coveo Solutions Inc.
 *****************************************************************************/
/*****************************************************************************
 * NOTE:
 *
 * We advise against directly modifying this file. Doing so will prevent you
 * from updating to later versions. Also, if you modify this file untold number
 * of kittens will die.
 *
 *****************************************************************************/
var secretFeatureVariable1309 = false; // needed so that tsc doesn't completely eliminates this file
var Coveo;
(function (Coveo) {
    Coveo.version = {
        "lib" : "0.9.967.18",
        "product": "0.0.0.0"
    };
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        function l() {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i - 0] = arguments[_i];
            }
            return Coveo.L10N.format.apply(this, arguments);
        }
        Ui.l = l;
        ;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
(function () {
    var dict = {
        "Unknown": "Unknown",
        "And": "AND",
        "Authenticating": "Authenticating {0}...",
        "Clear": "Clear {0}",
        "CompleteQuery": "Complete Query",
        "Exclude": "Exclude {0}",
        "EnterTag": "Add Tag",
        "Next": "Next",
        "Last": "Last",
        "Link": "Link",
        "Or": "OR",
        "Previous": "Previous",
        "QueryDidntMatchAnyDocuments": "Your query did not match any documents.",
        "QueryException": "Your query has an error: {0}.",
        "Me": "Me",
        "Remove": "Remove",
        "Search": "Search",
        "SearchFor": "Search for {0}",
        "ShareQuery": "Share Query",
        "Preferences": "Preferences",
        "LinkOpeningSettings": "Link Opening Settings",
        "Reauthenticate": "Reauthenticate {0}",
        "ResultsFilteringExpression": "Results Filtering Expressions",
        "FiltersInYourPreferences": "Filters in your preferences",
        "Create": "Create",
        "SearchIn": "Search in {0}",
        "Seconds": "in {0} second<pl>s</pl>",
        "ShowingResultsOf": "Result<pl>s</pl> {0}<pl>-{1} </pl>of {2}",
        "SwitchTo": "Switch to {0}",
        "Unexclude": "Unexclude {0}",
        "ClearAllFilters": "Clear All Filters",
        "SkipLogin": "Skip login",
        "LoginInProgress": "Login in progress, please wait ...",
        "Login": "Log In",
        "GetStarted": "Get Started",
        "More": "More",
        "Less": "Fewer",
        "Settings": "Settings",
        "Score": "Score",
        "ScoreDescription": "The score is computed from the number of occurrences as well as from the position in the result set.",
        "Occurrences": "Occurrences",
        "OccurrencesDescription": "Sort by number of occurrences, with values having the highest number appearing first.",
        "Label": "Label",
        "Of": "of",
        "LabelDescription": "Sort alphabetically on the field values.",
        "Value": "Value",
        "ValueDescription": "Sort on the values of the first computed field",
        "AlphaAscending": "Value Ascending",
        "AlphaDescending": "Value Descending",
        "ChiSquare": "Chi Square",
        "Nosort": "No Sort",
        "RelativeFrequency": "Relative Frequency",
        "RelativeFrequencyDescription": "Sort based on the relative frequency of values. Less common values will appear higher",
        "Custom": "Custom",
        "CustomDescription": "Sort based on a custom order",
        "ComputedField": "Computed Field",
        "Ascending": "Ascending",
        "Descending": "Descending",
        "noResultFor": "No results for {0}",
        "autoCorrectedQueryTo": "Query was automatically corrected to {0}",
        "didYouMean": "Did you mean: {0}",
        "SuggestedResults": "Suggested Results",
        "SuggestedQueries": "Suggested Queries",
        "MostRelevantItems": "Most relevant items:",
        "AllItems": "All items:",
        "ShowLess": "Show less",
        "ShowMore": "Show more",
        "HideFacet": "Hide Facet",
        "ShowFacet": "Show Facet",
        "AndOthers": "and {0} other<pl>s</pl>",
        "MostRelevantPosts": "Most Relevant Posts:",
        "CompleteThread": "Complete Thread:",
        "ShowCompleteThread": "Show Complete Thread",
        "ShowOnlyTopMatchingPosts": "Show Only Top Matching Posts",
        "MostRelevantReplies": "Most Relevant Replies:",
        "AllConversation": "All Conversation:",
        "ShowAllConversation": "Show All Conversation",
        "ShowAllReplies": "Show All Replies",
        "ShowOnlyMostRelevantReplies": "Show Only Most Relevant Replies",
        "Close": "Close",
        "Open": "Open",
        "OpenInOutlookWhenPossible": "Open in Outlook (when possible)",
        "AlwaysOpenInNewWindow": "Always open results in new window",
        "QuickView": "Quick View",
        "ErrorReport": "Error Report",
        "OopsError": "Oops! Something went wrong on the server.",
        "ProblemPersists": "If the problem persists contact the administrator.",
        "GoBack": "Go Back",
        "Reset": "Reset",
        "Retry": "Retry",
        "MoreInfo": "More Information",
        "Username": "Username",
        "Password": "Password",
        "CannotConnect": "Cannot connect to the server address.",
        "BadUserPass": "Password does not match with user name.",
        "PleaseEnterYourCredentials": "Please enter your credentials for {0}.",
        "PleaseEnterYourSearchPage": "Please enter your search page URL",
        "Collapse": "Collapse",
        "Expand": "Expand",
        "Today": "Today",
        "Yesterday": "Yesterday",
        "Tomorrow": "Tomorrow",
        "Duration": "Duration: {0}",
        "IndexDuration": "Index Duration: {0}",
        "ProxyDuration": "Proxy Duration: {0}",
        "ClientDuration": "Client Duration: {0}",
        "Unavailable": "Unavailable",
        "Reply": "Reply",
        "ReplyAll": "Reply All",
        "Forward": "Forward",
        "From": "From",
        "Caption": "Caption",
        "Expression": "Expression",
        "Tab": "Tab",
        "Tabs": "Tabs",
        "EnterExpressionName": "Enter Expression Name",
        "EnterExpressionToFilterWith": "Enter Expression To Filter Results With",
        "SelectTab": "Select Tab",
        "SelectAll": "Select All",
        "PageUrl": "Search page URL",
        "ErrorSavingToDevice": "Error while saving the information to your device",
        "ErrorReadingFromDevice": "Error while reading the information from your device",
        "AppIntro": "Speak with a product specialist who can answer your questions about Coveo and help your decide which Coveo solution is right for you. Or, try a live demo !",
        "TryDemo": "Try the demo",
        "ContactUs": "Contact us",
        "NewToCoveo": "New to Coveo ?",
        "LetUsHelpGetStarted": "Let us help you get started",
        "CannotConnectSearchPage": "Cannot connect to your search page",
        "AreYouSureDeleteFilter": "Are you sure you want to delete the filter {0} with the expression {1}",
        "OnlineHelp": "Online Help",
        "Done": "Done",
        "SaveFacetState": "Save this facet state",
        "ClearFacetState": "Clear facet state",
        "DisplayingTheOnlyMessage": "Displaying the only message in this conversation",
        "NoNetworkConnection": "No network connection",
        "UnknownConnection": "Unknown connection",
        "EthernetConnection": "Ethernet connection",
        "WiFi": "WiFi connection",
        "CELL": "Cellular connection",
        "CELL_2G": "Cellular 2G connection",
        "CELL_3G": "Cellular 3G connection",
        "CELL_4G": "Cellular 4G connection",
        "QueryExceptionNoException": "No exception",
        "QueryExceptionInvalidSyntax": "Invalid syntax",
        "QueryExceptionInvalidCustomField": "Invalid custom field",
        "QueryExceptionInvalidDate": "Invalid date",
        "QueryExceptionInvalidExactPhrase": "Invalid exact phrase",
        "QueryExceptionInvalidDateOp": "Invalid date operator",
        "QueryExceptionInvalidNear": "Invalid Near",
        "QueryExceptionInvalidWeightedNear": "Invalid weighted near",
        "QueryExceptionInvalidTerm": "Invalid term",
        "QueryExceptionTooManyTerms": "Too many terms",
        "QueryExceptionWildcardTooGeneral": "Wildcard too general",
        "QueryExceptionInvalidSortField": "Invalid sort field",
        "QueryExceptionInvalidSmallStringOp": "Invalid small string operator",
        "QueryExceptionRequestedResultsMax": "Requested results maximum",
        "QueryExceptionAggregatedMirrorDead": "Aggregated mirror dead",
        "QueryExceptionAggregatedMirrorQueryTimeOut": "Aggregated mirror query timeout",
        "QueryExceptionAggregatedMirrorInvalidBuildNumber": "Aggregated mirror invalid build number",
        "QueryExceptionAggregatedMirrorCannotConnect": "Aggregated mirror cannot connect",
        "QueryExceptionNotEnoughLeadingCharsWildcard": "Not enough leading character wildcard",
        "QueryExceptionSecurityInverterNotFound": "Security inverter not found",
        "QueryExceptionSecurityInverterAccessDenied": "Security inverter access denied",
        "QueryExceptionAggregatedMirrorCannotImpersonate": "Aggregated mirror cannot impersonate",
        "QueryExceptionUnexpected": "Unexpected",
        "QueryExceptionAccessDenied": "Access denied",
        "QueryExceptionSuperUserTokenInvalid": "Super user token invalid",
        "QueryExceptionSuperUserTokenExpired": "Super user token is expired",
        "QueryExceptionLicenseQueriesExpired": "Queries license expired",
        "QueryExceptionLicenseSuperUserTokenNotSupported": "License super user token not supported",
        "QueryExceptionInvalidSession": "Invalid session",
        "QueryExceptionInvalidDocument": "Invalid document",
        "QueryExceptionSearchDisabled": "Search disabled",
        "objecttype_people": "People",
        "objecttype_message": "Message",
        "objecttype_feed": "RSS Feed",
        "objecttype_thread": "Thread",
        "objecttype_board": "",
        "objecttype_category": "",
        "objecttype_account": "Account",
        "objecttype_campaign": "Campaign",
        "objecttype_case": "Case",
        "objecttype_contact": "Contact",
        "objecttype_contract": "Contract",
        "objecttype_event": "Event",
        "objecttype_lead": "Lead",
        "objecttype_solution": "Solution",
        "objecttype_task": "Task",
        "objecttype_user": "User",
        "objecttype_attachment": "Attachment",
        "objecttype_casecomment": "Case Comment",
        "objecttype_opportunity": "Opportunity",
        "objecttype_note": "Note",
        "objecttype_product": "Product",
        "objecttype_partner": "Partner",
        "objecttype_kbdocumentation": "Documentation",
        "objecttype_kbsolution": "Solution",
        "objecttype_kbknowledgearticle": "Knowledge Article",
        "objecttype_kbattachment": "Attachment",
        "sysfiletype_html": "HTML File",
        "sysfiletype_image": "Image",
        "sysfiletype_folder": "Folder",
        "sysfiletype_txt": "Text",
        "sysfiletype_zip": "Zip File",
        "sysfiletype_pdf": "PDF File",
        "sysfiletype_xml": "XML File",
        "sysfiletype_doc": "Word Document",
        "sysfiletype_xls": "Excel Document",
        "sysfiletype_ppt": "PowerPoint Document",
        "sysfiletype_video": "Video",
        "sysfiletype_exchangemessage": "Message",
        "sysfiletype_exchangeappointment": "Appointment",
        "sysfiletype_exchangenote": "Note",
        "sysfiletype_exchangetask": "Task",
        "sysfiletype_exchangeperson": "Exchange user",
        "sysfiletype_activedirperson": "Active Directory user",
        "sysfiletype_exchangeactivity": "Activity",
        "sysfiletype_exchangecalendarmessage": "Calendar message",
        "sysfiletype_exchangedocument": "Exchange document",
        "sysfiletype_exchangerssfeed": "RSS Feed",
        "sysfiletype_exchangejunkmessage": "Junk email",
        "sysfiletype_exchangeofficecom": "Communications",
        "sysfiletype_spportal": "Portal",
        "sysfiletype_spsite": "Site",
        "sysfiletype_spuserprofile": "SharePoint User",
        "sysfiletype_sparea": "Area",
        "sysfiletype_spannouncement": "Announcement",
        "sysfiletype_spannouncementlist": "Announcements",
        "sysfiletype_spcontact": "Contact",
        "sysfiletype_spcontactlist": "Contacts",
        "sysfiletype_spcustomlist": "Custom Lists",
        "sysfiletype_spdiscussionboard": "Discussion Board",
        "sysfiletype_spdiscussionboardlist": "Discussion Boards",
        "sysfiletype_spdocumentlibrarylist": "Document Library",
        "sysfiletype_spevent": "Event",
        "sysfiletype_speventlist": "Events",
        "sysfiletype_spformlibrarylist": "Form Library",
        "sysfiletype_spissue": "Issue",
        "sysfiletype_spissuelist": "Issues",
        "sysfiletype_splink": "Link",
        "sysfiletype_splinklist": "Links",
        "sysfiletype_sppicturelibrarylist": "Picture Library",
        "sysfiletype_spsurvey": "Survey",
        "sysfiletype_spsurveylist": "Surveys",
        "sysfiletype_sptask": "Task",
        "sysfiletype_sptasklist": "Tasks",
        "sysfiletype_spagenda": "Agenda",
        "sysfiletype_spagendalist": "Agendas",
        "sysfiletype_spattendee": "Attendee",
        "sysfiletype_spattendeelist": "Attendees",
        "sysfiletype_spcustomgridlist": "Custom Grids",
        "sysfiletype_spdecision": "Decision",
        "sysfiletype_spdecisionlist": "Decisions",
        "sysfiletype_spobjective": "Objective",
        "sysfiletype_spobjectivelist": "Objectives",
        "sysfiletype_sptextbox": "Textbox",
        "sysfiletype_sptextboxlist": "Textbox list",
        "sysfiletype_spthingstobring": "Thing To Bring",
        "sysfiletype_spthingstobringlist": "Things To Bring",
        "sysfiletype_sparealisting": "Area Listing",
        "sysfiletype_spmeetingserie": "Meeting series",
        "sysfiletype_spmeetingserielist": "Meeting Series List",
        "sysfiletype_spsitedirectory": "Site Directory Item",
        "sysfiletype_spsitedirectorylist": "Site Directory",
        "sysfiletype_spdatasource": "Data Source",
        "sysfiletype_spdatasourcelist": "Data Source List",
        "sysfiletype_splisttemplatecataloglist": "List Template Catalog List",
        "sysfiletype_spwebpartcataloglist": "WebPart catalog list",
        "sysfiletype_spwebtemplatecataloglist": "Web Template Catalog List",
        "sysfiletype_spworkspacepagelist": "Workspace Page List",
        "sysfiletype_spunknownlist": "Custom List",
        "sysfiletype_spadministratortask": "Administrator Task",
        "sysfiletype_spadministratortasklist": "Administrator Tasks",
        "sysfiletype_spareadocumentlibrarylist": "Area Document Library",
        "sysfiletype_spblogcategory": "Blog Category",
        "sysfiletype_spblogcategorylist": "Blog Category",
        "sysfiletype_spblogcomment": "Blog Comment",
        "sysfiletype_spblogcommentlist": "Blog Comments",
        "sysfiletype_spblogpost": "Blog Post",
        "sysfiletype_spblogpostlist": "Blog Posts",
        "sysfiletype_spdataconnectionlibrarylist": "Data Connection Library",
        "sysfiletype_spdistributiongroup": "Distribution Group",
        "sysfiletype_spdistributiongrouplist": "Distribution Groups",
        "sysfiletype_spipfslist": "InfoPath Form Servers",
        "sysfiletype_spkeyperformanceindicator": "Key Performance Indicator",
        "sysfiletype_spkeyperformanceindicatorlist": "Key Performance Indicators",
        "sysfiletype_splanguagesandtranslator": "Languages and Translator",
        "sysfiletype_splanguagesandtranslatorlist": "Languages and Translators",
        "sysfiletype_spmasterpagescataloglist": "Master Pages Library",
        "sysfiletype_spnocodeworkflowlibrarylist": "No Code Workflow Library",
        "sysfiletype_spprojecttask": "Project Task",
        "sysfiletype_spprojecttasklist": "Project Tasks",
        "sysfiletype_sppublishingpageslibrarylist": "Page Library",
        "sysfiletype_spreportdocumentlibrarylist": "Report Document Library",
        "sysfiletype_spreportlibrarylist": "Report Library",
        "sysfiletype_spslidelibrarylist": "Slide Library",
        "sysfiletype_sptab": "Tabs",
        "sysfiletype_sptablist": "Tabs List",
        "sysfiletype_sptranslationmanagementlibrarylist": "Translation Management Library",
        "sysfiletype_spuserinformation": "User Information",
        "sysfiletype_spuserinformationlist": "User Information List",
        "sysfiletype_spwikipagelibrarylist": "Wiki Page Library",
        "sysfiletype_spworkflowhistory": "Workflow History",
        "sysfiletype_spworkflowhistorylist": "Workflow Histories",
        "sysfiletype_spworkflowprocess": "Custom Workflow Process",
        "sysfiletype_spworkflowprocesslist": "Custom Workflow Processes",
        "sysfiletype_sppublishingimageslibrarylist": "Publishing Image Library",
        "sysfiletype_spcirculation": "Circulation",
        "sysfiletype_spcirculationlist": "Circulations",
        "sysfiletype_spdashboardslibrarylist": "Dashboard Library",
        "sysfiletype_spdataconnectionforperformancepointlibrarylist": "Data Connection for Performance Point Library",
        "sysfiletype_sphealthreport": "Health Report",
        "sysfiletype_sphealthreportlist": "Health Reports",
        "sysfiletype_sphealthrule": "Health Rule",
        "sysfiletype_sphealthrulelist": "Health Rules",
        "sysfiletype_spimedictionary": "IME Dictionary",
        "sysfiletype_spimedictionarylist": "IME Dictionaries",
        "sysfiletype_spperformancepointcontent": "Performance Point Content",
        "sysfiletype_spperformancepointcontentlist": "Performance Point Contents",
        "sysfiletype_spphonecallmemo": "Phone Call Memo",
        "sysfiletype_spphonecallmemolist": "Phone Call Memos",
        "sysfiletype_sprecordlibrarylist": "Record Library",
        "sysfiletype_spresource": "Resource",
        "sysfiletype_spresourcelist": "Resources",
        "sysfiletype_spprocessdiagramslibrarylist": "Process Diagram Library",
        "sysfiletype_spsitethemeslibrarylist": "Site Theme Library",
        "sysfiletype_spsolutionslibrarylist": "Solution Library",
        "sysfiletype_spwfpublibrarylist": "WFPUB Library",
        "sysfiletype_spwhereabout": "Whereabout",
        "sysfiletype_spwhereaboutlist": "Whereabouts",
        "sysfiletype_spdocumentlink": "Link to a Document",
        "sysfiletype_spdocumentset": "Document Set",
        "sysfiletype_spmicrofeedpost": "Microfeed Post",
        "sysfiletype_spmicrofeedlist": "Microfeed",
        "sysfiletype_splistfolder": "List Folder"
    };
    var locales = String["locales"] || (String["locales"] = {});
    locales["en"] = dict;
    String["toLocaleString"].call(this, { "en": dict });
    String["locale"] = "en";
    String["defaultLocale"] = "en";
})();
/*
 * Globalize Culture en-US
 *
 * http://github.com/jquery/globalize
 *
 * Copyright Software Freedom Conservancy, Inc.
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * This file was generated by the Globalize Culture Generator
 * Translation: bugs found in this file need to be fixed in the generator
 */
(function (window, undefined) {
    var Globalize;
    if (typeof window["require"] !== "undefined" && typeof window["exports"] !== "undefined" && typeof window["module"] !== "undefined") {
        // Assume CommonJS
        Globalize = window["require"]("globalize");
    }
    else {
        // Global variable
        Globalize = window.Globalize;
    }
    Globalize.addCultureInfo("en-US", "default", {
        name: "en-US",
        englishName: "English (United States)"
    });
}(this));
var Coveo;
(function (Coveo) {
    var pluralRegex = /<pl>(((?!<\/pl>).)*)<\/pl>/g;
    var singularRegex = /<sn>(((?!<\/sn>).)*)<\/sn>/g;
    Coveo.L10N = {
        format: function (key) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            var value = key.toLocaleString();
            if (args.length > 0) {
                var last = Coveo._.last(args);
                if (Coveo._.isNumber(last)) {
                    args.pop();
                    value = Coveo.L10N.formatPlSn(value, last);
                }
                for (var arg in args) {
                    value = value.replace("{" + arg + "}", args[arg]);
                }
            }
            return value;
        },
        formatPlSn: function (value, count) {
            if (count > 1) {
                value = value.replace(pluralRegex, '$1').replace(singularRegex, '');
            }
            else {
                value = value.replace(pluralRegex, '').replace(singularRegex, '$1');
            }
            return value;
        }
    };
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Logger = (function () {
        function Logger(owner) {
            this.owner = owner;
        }
        Logger.prototype.trace = function () {
            var stuff = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                stuff[_i - 0] = arguments[_i];
            }
            if (Logger.level <= Logger.TRACE) {
                this.log('TRACE', stuff);
            }
        };
        Logger.prototype.debug = function () {
            var stuff = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                stuff[_i - 0] = arguments[_i];
            }
            if (Logger.level <= Logger.DEBUG) {
                this.log('DEBUG', stuff);
            }
        };
        Logger.prototype.info = function () {
            var stuff = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                stuff[_i - 0] = arguments[_i];
            }
            if (Logger.level <= Logger.INFO) {
                this.log('INFO', stuff);
            }
        };
        Logger.prototype.warn = function () {
            var stuff = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                stuff[_i - 0] = arguments[_i];
            }
            if (Logger.level <= Logger.WARN) {
                this.log('WARN', stuff);
            }
        };
        Logger.prototype.error = function () {
            var stuff = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                stuff[_i - 0] = arguments[_i];
            }
            if (Logger.level <= Logger.ERROR) {
                this.log('ERROR', stuff);
            }
        };
        Logger.prototype.log = function (level, stuff) {
            if (window['console'] && console.log) {
                console.log([level, this.owner].concat(stuff));
                if (Logger.executionTime) {
                    console.timeEnd("Execution time");
                    console.time("Execution time");
                }
            }
        };
        Logger.enable = function () {
            Logger.level = Logger.TRACE;
        };
        Logger.disable = function () {
            Logger.level = Logger.NOTHING;
        };
        Logger.TRACE = 1;
        Logger.DEBUG = 2;
        Logger.INFO = 3;
        Logger.WARN = 4;
        Logger.ERROR = 5;
        Logger.NOTHING = 6;
        Logger.level = Logger.INFO;
        Logger.executionTime = false;
        return Logger;
    })();
    Coveo.Logger = Logger;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Assert = (function () {
        function Assert() {
        }
        Assert.fail = function (message) {
            Assert.failureHandler(message);
        };
        Assert.check = function (condition, message) {
            if (!condition) {
                Assert.fail(message);
            }
        };
        Assert.isUndefined = function (obj) {
            Assert.check(Coveo.Utils.isUndefined(obj), 'Value should be undefined.');
        };
        Assert.isNotUndefined = function (obj) {
            Assert.check(!Coveo.Utils.isUndefined(obj), 'Value should not be undefined.');
        };
        Assert.isNull = function (obj) {
            Assert.check(Coveo.Utils.isNull(obj), 'Value should be null.');
        };
        Assert.isNotNull = function (obj) {
            Assert.check(!Coveo.Utils.isNull(obj), 'Value should not be null.');
        };
        Assert.exists = function (obj) {
            Assert.check(!Coveo.Utils.isNullOrUndefined(obj), 'Value should not be null or undefined');
        };
        Assert.doesNotExists = function (obj) {
            Assert.check(Coveo.Utils.isNullOrUndefined(obj), 'Value should be null or undefined');
        };
        Assert.isString = function (obj) {
            Assert.check(Coveo._.isString(obj), 'Value should be a string.');
        };
        Assert.stringStartsWith = function (str, start) {
            Assert.isNonEmptyString(str);
            Assert.isNonEmptyString(start);
            Assert.check(str.indexOf(start) == 0, 'Value should start with ' + start);
        };
        Assert.isNonEmptyString = function (str) {
            Assert.check(Coveo.Utils.isNonEmptyString(str), 'Value should be a non-empty string.');
        };
        Assert.isNumber = function (obj) {
            Assert.check(Coveo._.isNumber(obj), 'Value should be a number.');
        };
        Assert.isLargerThan = function (expected, actual) {
            Assert.check(actual > expected, 'Value ' + actual + ' should be larger than ' + expected);
        };
        Assert.isLargerOrEqualsThan = function (expected, actual) {
            Assert.check(actual >= expected, 'Value ' + actual + ' should be larger or equal than ' + expected);
        };
        Assert.isSmallerThan = function (expected, actual) {
            Assert.check(actual < expected, 'Value ' + actual + ' should be smaller than ' + expected);
        };
        Assert.isSmallerOrEqualsThan = function (expected, actual) {
            Assert.check(actual <= expected, 'Value ' + actual + ' should be smaller or equal than ' + expected);
        };
        Assert.logger = new Coveo.Logger('Assert');
        Assert.failureHandler = function (message) {
            Assert.logger.error('Assertion Failed!', message);
            if (console.trace != undefined) {
                console.trace();
            }
            if (Coveo.Utils.isNonEmptyString(message)) {
                throw new PreconditionFailedException(message);
            }
            else {
                throw new PreconditionFailedException('Assertion Failed!');
            }
        };
        return Assert;
    })();
    Coveo.Assert = Assert;
    var PreconditionFailedException = (function () {
        function PreconditionFailedException(message) {
            this.message = message;
        }
        PreconditionFailedException.prototype.toString = function () {
            return this.message;
        };
        return PreconditionFailedException;
    })();
    Coveo.PreconditionFailedException = PreconditionFailedException;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    Coveo.$ = jQuery;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    Coveo._ = window["_"];
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Defer = (function () {
        function Defer() {
        }
        Defer.defer = function (code) {
            Defer.functions.push(code);
            Defer.arm();
        };
        Defer.flush = function () {
            while (Defer.popOne()) {
            }
        };
        Defer.arm = function () {
            Coveo._.defer(function () {
                if (Defer.popOne())
                    Defer.arm();
            });
        };
        Defer.popOne = function () {
            if (Defer.functions.length > 0) {
                var fun = Defer.functions[0];
                Defer.functions = Coveo._.rest(Defer.functions);
                fun();
                return Defer.functions.length > 0;
            }
            else {
                return false;
            }
        };
        Defer.functions = [];
        return Defer;
    })();
    Coveo.Defer = Defer;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Cache = (function () {
        function Cache(onEmpty) {
            this.onEmpty = onEmpty;
            this.cache = [];
        }
        Cache.prototype.get = function () {
            if (this.cache.length == 0) {
                return this.onEmpty();
            }
            else {
                return this.cache.pop();
            }
        };
        Cache.prototype.push = function (value) {
            this.cache.push(value);
        };
        return Cache;
    })();
    Coveo.Cache = Cache;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var FastClick = (function () {
        function FastClick(element, handler, distanceThreshold, timeThreshold) {
            if (distanceThreshold === void 0) { distanceThreshold = 10; }
            if (timeThreshold === void 0) { timeThreshold = 500; }
            this.element = element;
            this.handler = handler;
            this.distanceThreshold = distanceThreshold;
            this.timeThreshold = timeThreshold;
            if (element.hasClass(Coveo.Ui.Component.computeCssClassNameForType(Coveo.Ui.SearchInterface.ID))) {
                element.click(handler);
            }
            else {
                this.setTouchHandlers();
                this.preventMouseHandlers();
            }
        }
        FastClick.prototype.setTouchHandlers = function () {
            var _this = this;
            this.element.on("touchstart", function (e) { return _this.handleTouchStart(e); });
            this.element.on("touchmove", function (e) { return _this.handleTouchMove(e); });
        };
        FastClick.prototype.preventMouseHandlers = function () {
            this.element.on("mousedown", function (e) { return e.preventDefault(); });
            this.element.on("mouseup", function (e) { return e.preventDefault(); });
            this.element.on("click", function (e) { return e.preventDefault(); });
        };
        FastClick.prototype.handleTouchStart = function (startEvent) {
            var _this = this;
            // remove by apare because touch is use by the quickview zoom and stopPropagation on the touch is not required
            // startEvent.stopPropagation();
            this.reset();
            this.initStartVariables(startEvent);
            this.startTarget = startEvent.target;
            this.startElement = this.getStartElement();
            this.element.one("touchend", function (endEvent) { return _this.handleTouchEnd(endEvent); });
        };
        FastClick.prototype.handleTouchMove = function (e) {
            this.endX = e["originalEvent"] ? e["originalEvent"]["touches"][0].clientX : 0;
            this.endY = e["originalEvent"] ? e["originalEvent"]["touches"][0].clientY : 0;
            this.moved = true;
        };
        FastClick.prototype.handleTouchEnd = function (endEvent) {
            // remove by apare because touch is use by the quickview zoom and stopPropagation on the touch is not required
            // endEvent.stopPropagation();
            // Android will trigger a click before showCancelingOverlay is called rendering it useless
            // and unfocusing whatever element was selected (bad when you're auto focusing an input)
            this.preventGhostClickIfAndroid(endEvent);
            if (this.mustCallHandler(endEvent)) {
                this.hideIOSKeyboardIfNecessary(endEvent.target);
                if (!this.isGhostClick(endEvent)) {
                    Coveo.MobileUtils.showClickFeedback(this.element, 400);
                }
                /*  Warning, do not remove the following line. It's the only way we found to remove the
                *   300ms delay! It adds a div over the search for 400ms following the touchend event and
                *   this div catches the click after 300ms. */
                Coveo.MobileUtils.showClickCancelingOverlay(400);
                endEvent.clientX = this.startX;
                endEvent.clientY = this.startY;
                this.handler.call(this, endEvent);
            }
        };
        FastClick.prototype.isGhostClick = function (e) {
            return e["originalEvent"] ? false : true;
        };
        FastClick.prototype.initStartVariables = function (startEvent) {
            this.startTime = new Date().getTime();
            this.startX = startEvent["originalEvent"] ? startEvent["originalEvent"]["touches"][0].clientX : 0;
            this.startY = startEvent["originalEvent"] ? startEvent["originalEvent"]["touches"][0].clientY : 0;
            this.endX = this.startX;
            this.endY = this.startY;
        };
        FastClick.prototype.getStartElement = function () {
            return document.elementFromPoint(this.startX, this.startY);
        };
        FastClick.prototype.mustCallHandler = function (endEvent) {
            return !this.scrolled(endEvent) && !this.held();
        };
        FastClick.prototype.scrolled = function (endEvent) {
            var endTarget = endEvent.target;
            var diffX = Math.abs(this.endX - this.startX);
            var diffY = Math.abs(this.endY - this.startY);
            var endElement = document.elementFromPoint(this.endX, this.endY);
            return !((this.startElement == endElement) && (this.startTarget == endTarget) && (!this.moved || (diffX < this.distanceThreshold && diffY < this.distanceThreshold)));
        };
        FastClick.prototype.held = function () {
            this.endTime = new Date().getTime();
            var diffTime = this.endTime - this.startTime;
            return diffTime >= this.timeThreshold;
        };
        FastClick.prototype.reset = function () {
            this.startX = 0;
            this.startY = 0;
            this.endX = 0;
            this.endY = 0;
            this.startTime = 0;
            this.endTime = 0;
            this.moved = false;
        };
        FastClick.prototype.hideIOSKeyboardIfNecessary = function (target) {
            if (Coveo.DeviceUtils.isIos() && !Coveo.$(target).is('input[type=text]') && Coveo.$(document.activeElement).is('input[type=text]')) {
                Coveo.MobileUtils.hideIOSKeyboard(document.activeElement);
            }
        };
        FastClick.prototype.preventGhostClickIfAndroid = function (event) {
            if (Coveo.DeviceUtils.isAndroid()) {
                event.preventDefault();
            }
        };
        return FastClick;
    })();
    Coveo.FastClick = FastClick;
    Coveo.$.fn.fastClick = function (handler) {
        if (handler) {
            if (Coveo.DeviceUtils.isMobileDevice()) {
                var jqueryElement = Coveo.$(this);
                new FastClick(jqueryElement, handler);
                return jqueryElement;
            }
            else {
                // Provide a dummy href if the element is an hyperlink
                this.filter('a').data('href', this.filter('a').attr('href')).attr('href', 'javascript:');
                return this.click(handler);
            }
        }
        else {
            if (Coveo.DeviceUtils.isMobileDevice()) {
                this.trigger('touchstart');
                return this.trigger('touchend');
            }
            else {
                return this.click();
            }
        }
    };
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Utils;
    (function (Utils) {
        function isUndefined(obj) {
            return typeof obj == 'undefined';
        }
        Utils.isUndefined = isUndefined;
        function isNull(obj) {
            return obj === null;
        }
        Utils.isNull = isNull;
        function isNullOrUndefined(obj) {
            return Utils.isUndefined(obj) || Utils.isNull(obj);
        }
        Utils.isNullOrUndefined = isNullOrUndefined;
        function exists(obj) {
            return !Utils.isNullOrUndefined(obj);
        }
        Utils.exists = exists;
        function toNotNullString(str) {
            return Coveo._.isString(str) ? str : "";
        }
        Utils.toNotNullString = toNotNullString;
        function anyTypeToString(value) {
            return value ? value.toString() : '';
        }
        Utils.anyTypeToString = anyTypeToString;
        function isNullOrEmptyString(str) {
            return Utils.isNullOrUndefined(str) || !Utils.isNonEmptyString(str);
        }
        Utils.isNullOrEmptyString = isNullOrEmptyString;
        function isNonEmptyString(str) {
            return Coveo._.isString(str) && str !== '';
        }
        Utils.isNonEmptyString = isNonEmptyString;
        function stringStartsWith(str, startWith) {
            return str.slice(0, startWith.length) == startWith;
        }
        Utils.stringStartsWith = stringStartsWith;
        function isNonEmptyArray(obj) {
            return Coveo._.isArray(obj) && obj.length > 0;
        }
        Utils.isNonEmptyArray = isNonEmptyArray;
        function isEmptyArray(obj) {
            return !Utils.isNonEmptyArray(obj);
        }
        Utils.isEmptyArray = isEmptyArray;
        function isHtmlElement(obj) {
            if (window["HTMLElement"] != undefined) {
                return obj instanceof HTMLElement;
            }
            else {
                return obj && obj.nodeType && obj.nodeType == 1;
            }
        }
        Utils.isHtmlElement = isHtmlElement;
        function parseIntIfNotUndefined(str) {
            if (Utils.isNonEmptyString(str)) {
                return parseInt(str, 10);
            }
            else {
                return undefined;
            }
        }
        Utils.parseIntIfNotUndefined = parseIntIfNotUndefined;
        function parseFloatIfNotUndefined(str) {
            if (Utils.isNonEmptyString(str)) {
                return parseFloat(str);
            }
            else {
                return undefined;
            }
        }
        Utils.parseFloatIfNotUndefined = parseFloatIfNotUndefined;
        function round(num, decimals) {
            return Math.round(num * Math.pow(10, decimals)) / Math.pow(10, decimals);
        }
        Utils.round = round;
        function parseBooleanIfNotUndefined(str) {
            if (Utils.isNonEmptyString(str)) {
                switch (str.toLowerCase()) {
                    case 'true':
                    case '1':
                    case 'yes':
                        return true;
                    case 'false':
                    case '0':
                    case 'no':
                        return false;
                    default:
                        return undefined;
                }
            }
            else {
                return undefined;
            }
        }
        Utils.parseBooleanIfNotUndefined = parseBooleanIfNotUndefined;
        function trim(value) {
            if (value == null) {
                return null;
            }
            return value.replace(/^\s+|\s+$/g, '');
        }
        Utils.trim = trim;
        function arrayEqual(array1, array2, sameOrder) {
            if (sameOrder === void 0) { sameOrder = true; }
            if (sameOrder) {
                return Coveo._.isEqual(array1, array2);
            }
            else {
                var arrays = [array1, array2];
                return Coveo._.all(arrays, function (array) {
                    return array.length == arrays[0].length && Coveo._.difference(array, arrays[0]).length == 0;
                });
            }
        }
        Utils.arrayEqual = arrayEqual;
        function objectEqual(obj1, obj2) {
            return Coveo._.isEqual(obj1, obj2);
        }
        Utils.objectEqual = objectEqual;
        function isCoveoField(field) {
            return /^@[a-zA-Z0-9]+$/.test(field);
        }
        Utils.isCoveoField = isCoveoField;
        function getCoveoFieldKey(field) {
            var g = field.match(/^@([a-zA-Z0-9]+)$/);
            Coveo.Assert.check(g != null, field + ' is not a vaild field');
            return g[1].toLowerCase();
        }
        Utils.getCoveoFieldKey = getCoveoFieldKey;
        function escapeRegexCharacter(str) {
            var ret = str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
            return ret;
        }
        Utils.escapeRegexCharacter = escapeRegexCharacter;
        function throttle(func, wait, options, context, args) {
            if (options === void 0) { options = {}; }
            var result;
            var timeout = null;
            var previous = 0;
            var later = function () {
                previous = options.leading === false ? 0 : new Date().getTime();
                timeout = null;
                result = func.apply(context, args);
            };
            return function () {
                var now = new Date().getTime();
                if (!previous && options.leading === false)
                    previous = now;
                var remaining = wait - (now - previous);
                context = this;
                args = arguments;
                if (remaining <= 0) {
                    clearTimeout(timeout);
                    timeout = null;
                    previous = now;
                    result = func.apply(context, args);
                }
                else if (!timeout && options.trailing !== false) {
                    timeout = setTimeout(later, remaining);
                }
                return result;
            };
        }
        Utils.throttle = throttle;
        function extendDeep(target, src) {
            var _this = this;
            var isArray = Coveo._.isArray(src);
            var toReturn = isArray && [] || {};
            if (isArray) {
                target = target || [];
                toReturn = toReturn["concat"](target);
                Coveo._.each(src, function (e, i, obj) {
                    if (typeof target[i] === 'undefined') {
                        toReturn[i] = e;
                    }
                    else if (typeof e === 'object') {
                        toReturn[i] = _this.extendDeep(target[i], e);
                    }
                    else {
                        if (target.indexOf(e) === -1) {
                            toReturn["push"](e);
                        }
                    }
                });
            }
            else {
                if (target && typeof target === 'object') {
                    Coveo._.each(Coveo._.keys(target), function (key) {
                        toReturn[key] = target[key];
                    });
                }
                Coveo._.each(Coveo._.keys(src), function (key) {
                    if (typeof src[key] !== 'object' || !src[key]) {
                        toReturn[key] = src[key];
                    }
                    else {
                        if (!target[key]) {
                            toReturn[key] = src[key];
                        }
                        else {
                            toReturn[key] = _this.extendDeep(target[key], src[key]);
                        }
                    }
                });
            }
            return toReturn;
        }
        Utils.extendDeep = extendDeep;
        function getQueryStringValue(key, queryString) {
            if (queryString === void 0) { queryString = window.location.search; }
            return queryString.replace(new RegExp("^(?:.*[&\\?]" + key.replace(/[\.\+\*]/g, "\\$&") + "(?:\\=([^&]*))?)?.*$", "i"), "$1");
        }
        Utils.getQueryStringValue = getQueryStringValue;
    })(Utils = Coveo.Utils || (Coveo.Utils = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var TimeSpan = (function () {
        function TimeSpan(milliseconds) {
            this.milliseconds = milliseconds;
        }
        TimeSpan.prototype.getMilliseconds = function () {
            return this.milliseconds;
        };
        TimeSpan.prototype.getSeconds = function () {
            return this.getMilliseconds() / 1000;
        };
        TimeSpan.prototype.getMinutes = function () {
            return this.getSeconds() / 60;
        };
        TimeSpan.prototype.getHours = function () {
            return this.getMinutes() / 60;
        };
        TimeSpan.prototype.getDays = function () {
            return this.getHours() / 24;
        };
        TimeSpan.prototype.getWeeks = function () {
            return this.getDays() / 7;
        };
        TimeSpan.fromDates = function (from, to) {
            Coveo.Assert.exists(from);
            Coveo.Assert.exists(to);
            return new TimeSpan(to.valueOf() - from.valueOf());
        };
        return TimeSpan;
    })();
    Coveo.TimeSpan = TimeSpan;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var DeviceUtils;
    (function (DeviceUtils) {
        //Not sure about this : In year 2033 who's to say that this list won't be 50 page long !
        var mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        // Urls in Phonegap starts with file:///XXX_asset in android, file:///var/mobile in iOS,  file:///[....]CoreSimulator on IOS emulator
        var phonegap = /^file:\/\/\/.*_asset/i.test(document.URL) || /^file:\/\/\/.*var\/mobile/i.test(document.URL) || /^file:\/\/\/.*\/CoreSimulator/.test(document.URL);
        function getDeviceName() {
            var userAgent = navigator.userAgent;
            if (userAgent.match(/Android/i))
                return "Android";
            if (userAgent.match(/BlackBerry/i))
                return "BlackBerry";
            if (userAgent.match(/iPhone/i))
                return "iPhone";
            if (userAgent.match(/iPad/i))
                return "iPad";
            if (userAgent.match(/iPod/i))
                return "iPod";
            if (userAgent.match(/Opera Mini/i))
                return "Opera Mini";
            if (userAgent.match(/IEMobile/i))
                return "IE Mobile";
            if (userAgent.match(/Chrome/i))
                return "Chrome";
            if (userAgent.match(/MSIE/i) || userAgent.match(/Trident/i))
                return "IE";
            if (userAgent.match(/Opera/i))
                return "Opera";
            if (userAgent.match(/Firefox/i))
                return "Firefox";
            if (userAgent.match(/Safari/i))
                return "Safari";
            return "Others";
        }
        DeviceUtils.getDeviceName = getDeviceName;
        function isAndroid() {
            return getDeviceName() == "Android";
        }
        DeviceUtils.isAndroid = isAndroid;
        function isIos() {
            var deviceName = getDeviceName();
            return deviceName == "iPhone" || deviceName == "iPad" || deviceName == "iPod";
        }
        DeviceUtils.isIos = isIos;
        function isIE8or9() {
            var myNav = navigator.userAgent.toLowerCase();
            if (myNav.indexOf('msie') == -1)
                return false;
            return parseInt(myNav.split('msie')[1]) < 10;
        }
        DeviceUtils.isIE8or9 = isIE8or9;
        function isMobileDevice() {
            return mobile;
        }
        DeviceUtils.isMobileDevice = isMobileDevice;
        function isPhonegap() {
            return phonegap;
        }
        DeviceUtils.isPhonegap = isPhonegap;
        function isSmallScreenWidth() {
            return screen.width <= 480;
        }
        DeviceUtils.isSmallScreenWidth = isSmallScreenWidth;
        function isSmallScreenHeight() {
            return screen.height <= 640;
        }
        DeviceUtils.isSmallScreenHeight = isSmallScreenHeight;
    })(DeviceUtils = Coveo.DeviceUtils || (Coveo.DeviceUtils = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var QueryUtils = (function () {
        function QueryUtils() {
        }
        QueryUtils.createGuid = function () {
            return (typeof (crypto) != 'undefined' && typeof (crypto.getRandomValues) != 'undefined') ? QueryUtils.generateWithCrypto() : QueryUtils.generateWithRandom();
        };
        //This method is a fallback as it's generate a lot of collisions in Chrome.
        QueryUtils.generateWithRandom = function () {
            // http://stackoverflow.com/a/2117523
            return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
                var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
                return v.toString(16);
            });
        };
        QueryUtils.generateWithCrypto = function () {
            var buf = new Uint16Array(8);
            crypto.getRandomValues(buf);
            var S4 = function (num) {
                var ret = num.toString(16);
                while (ret.length < 4) {
                    ret = "0" + ret;
                }
                return ret;
            };
            return (S4(buf[0]) + S4(buf[1]) + "-" + S4(buf[2]) + "-" + S4(buf[3]) + "-" + S4(buf[4]) + "-" + S4(buf[5]) + S4(buf[6]) + S4(buf[7]));
        };
        QueryUtils.setStateObjectOnQueryResults = function (state, results) {
            QueryUtils.setPropertyOnResult(results, "state", state);
        };
        QueryUtils.setIndexAndUidOnQueryResults = function (query, results, queryUid) {
            Coveo.Assert.exists(query);
            Coveo.Assert.exists(results);
            var index = query.firstResult;
            QueryUtils.setPropertyOnResult(results, "queryUid", queryUid);
            QueryUtils.setPropertyOnResult(results, "index", index, function () { return ++index; });
        };
        QueryUtils.setTermsToHighlightOnQueryResults = function (query, results) {
            QueryUtils.setPropertyOnResult(results, "termsToHighlight", results.termsToHighlight);
            QueryUtils.setPropertyOnResult(results, "phrasesToHighlight", results.phrasesToHighlight);
        };
        QueryUtils.splitFlags = function (flags, delimiter) {
            if (delimiter === void 0) { delimiter = ";"; }
            Coveo.Assert.exists(flags);
            return flags.split(delimiter);
        };
        QueryUtils.isAttachment = function (result) {
            return Coveo._.contains(QueryUtils.splitFlags(result.flags), "IsAttachment");
        };
        QueryUtils.containsAttachment = function (result) {
            return Coveo._.contains(QueryUtils.splitFlags(result.flags), "ContainsAttachment");
        };
        QueryUtils.hasHTMLVersion = function (result) {
            return Coveo._.contains(QueryUtils.splitFlags(result.flags), "HasHtmlVersion");
        };
        QueryUtils.hasThumbnail = function (result) {
            return Coveo._.contains(QueryUtils.splitFlags(result.flags), "HasThumbnail");
        };
        QueryUtils.quoteAndEscapeIfNeeded = function (str) {
            Coveo.Assert.isString(str);
            return QueryUtils.isAtomicString(str) || (QueryUtils.isRangeString(str) || QueryUtils.isRangeWithoutOuterBoundsString(str)) ? str : QueryUtils.quoteAndEscape(str);
        };
        QueryUtils.quoteAndEscape = function (str) {
            Coveo.Assert.isString(str);
            return '"' + QueryUtils.escapeString(str) + '"';
        };
        QueryUtils.escapeString = function (str) {
            Coveo.Assert.isString(str);
            return str.replace(/"/g, ' ');
        };
        QueryUtils.isAtomicString = function (str) {
            Coveo.Assert.isString(str);
            return /^\d+(\.\d+)?$|^[\d\w]+$/.test(str);
        };
        QueryUtils.isRangeString = function (str) {
            Coveo.Assert.isString(str);
            return /^\d+(\.\d+)?\.\.\d+(\.\d+)?$|^\d{4}\/\d{2}\/\d{2}@\d{2}:\d{2}:\d{2}\.\.\d{4}\/\d{2}\/\d{2}@\d{2}:\d{2}:\d{2}$/.test(str);
        };
        QueryUtils.isRangeWithoutOuterBoundsString = function (str) {
            Coveo.Assert.isString(str);
            return /^\d+(\.\d+)?$|^\d{4}\/\d{2}\/\d{2}@\d{2}:\d{2}:\d{2}$/.test(str);
        };
        QueryUtils.buildFieldExpression = function (field, operator, values) {
            Coveo.Assert.isNonEmptyString(field);
            Coveo.Assert.stringStartsWith(field, '@');
            Coveo.Assert.isNonEmptyString(operator);
            Coveo.Assert.isLargerOrEqualsThan(1, values.length);
            if (values.length == 1) {
                return field + operator + QueryUtils.quoteAndEscapeIfNeeded(values[0]);
            }
            else {
                return field + operator + '(' + Coveo._.map(values, function (str) { return QueryUtils.quoteAndEscapeIfNeeded(str); }).join(',') + ')';
            }
        };
        QueryUtils.buildFieldNotEqualExpression = function (field, values) {
            Coveo.Assert.isNonEmptyString(field);
            Coveo.Assert.stringStartsWith(field, '@');
            Coveo.Assert.isLargerOrEqualsThan(1, values.length);
            var filter;
            if (values.length == 1) {
                filter = field + "==" + QueryUtils.quoteAndEscapeIfNeeded(values[0]);
            }
            else {
                filter = field + "==" + '(' + Coveo._.map(values, function (str) { return QueryUtils.quoteAndEscapeIfNeeded(str); }).join(',') + ')';
            }
            return "(NOT " + filter + ")";
        };
        QueryUtils.mergeQueryString = function (url, queryString) {
            var queryStringPosition = url.indexOf("?");
            if (queryStringPosition != -1) {
                url += "&" + queryString;
            }
            else {
                url += "?" + queryString;
            }
            return url;
        };
        QueryUtils.mergePath = function (url, path) {
            var urlSplit = url.split("?");
            return urlSplit[0] + path + "?" + (urlSplit[1] || "");
        };
        QueryUtils.setPropertyOnResult = function (results, property, value, afterOneLoop) {
            Coveo._.each(results.results, function (result) {
                result[property] = value;
                Coveo._.each(result.childResults, function (child) {
                    child[property] = value;
                });
                if (!Coveo.Utils.isNullOrUndefined(result.parentResult)) {
                    result.parentResult[property] = value;
                }
                value = afterOneLoop ? afterOneLoop() : value;
            });
        };
        return QueryUtils;
    })();
    Coveo.QueryUtils = QueryUtils;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var StringUtils = (function () {
        function StringUtils() {
        }
        StringUtils.javascriptEncode = function (value) {
            Coveo.Assert.isString(value);
            value = value.replace(/\\/g, '\\\\');
            value = value.replace(/'/g, '\\\'');
            value = value.replace(/"/g, '\\"');
            return value;
        };
        StringUtils.htmlEncode = function (value) {
            Coveo.Assert.isString(value);
            return Coveo.$('<div/>').text(value).html();
        };
        StringUtils.splice = function (value, index, remove, toAdd) {
            return value.slice(0, index) + toAdd + value.slice(index + Math.abs(remove));
        };
        StringUtils.removeMiddle = function (value, length, toAdd) {
            if (value.length < length)
                return value;
            var toRemove = value.length - length;
            var index = Math.floor(length / 2);
            return StringUtils.splice(value, index, toRemove, toAdd);
        };
        StringUtils.regexEncode = function (value) {
            Coveo.Assert.isString(value);
            return value.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
        };
        StringUtils.wildcardsToRegex = function (value) {
            Coveo.Assert.isString(value);
            var encoded = StringUtils.regexEncode(value);
            encoded = encoded.replace(/\\\*/, '.*');
            encoded = encoded.replace(/\\\?/, '.');
            return encoded;
        };
        StringUtils.getHighlights = function (strToSearch, regexToFind, dataHighlightGroupTerm) {
            var match, indexes = [];
            while (match = regexToFind.exec(strToSearch)) {
                var desiredMatch = match[2];
                var undesiredMatch = match[1];
                var offset = match.index + 1;
                if (match.index == 0 && undesiredMatch == "") {
                    offset = 0;
                }
                indexes.push({ offset: offset, length: desiredMatch.length, dataHighlightGroupTerm: dataHighlightGroupTerm });
                if (!regexToFind.global) {
                    break;
                }
            }
            return Coveo._.isEmpty(indexes) ? undefined : indexes;
        };
        return StringUtils;
    })();
    Coveo.StringUtils = StringUtils;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var JQueryUtils;
    (function (JQueryUtils) {
        (function (VerticalAlignment) {
            VerticalAlignment[VerticalAlignment["top"] = 0] = "top";
            VerticalAlignment[VerticalAlignment["middle"] = 1] = "middle";
            VerticalAlignment[VerticalAlignment["bottom"] = 2] = "bottom";
            VerticalAlignment[VerticalAlignment["innerTop"] = 3] = "innerTop";
            VerticalAlignment[VerticalAlignment["innerBottom"] = 4] = "innerBottom";
        })(JQueryUtils.VerticalAlignment || (JQueryUtils.VerticalAlignment = {}));
        var VerticalAlignment = JQueryUtils.VerticalAlignment;
        (function (HorizontalAlignment) {
            HorizontalAlignment[HorizontalAlignment["left"] = 0] = "left";
            HorizontalAlignment[HorizontalAlignment["center"] = 1] = "center";
            HorizontalAlignment[HorizontalAlignment["right"] = 2] = "right";
            HorizontalAlignment[HorizontalAlignment["innerLeft"] = 3] = "innerLeft";
            HorizontalAlignment[HorizontalAlignment["innerRight"] = 4] = "innerRight";
        })(JQueryUtils.HorizontalAlignment || (JQueryUtils.HorizontalAlignment = {}));
        var HorizontalAlignment = JQueryUtils.HorizontalAlignment;
        function positionPopup(popUp, nextTo, appendTo, boundary, desiredPosition, checkForBoundary) {
            if (checkForBoundary === void 0) { checkForBoundary = 0; }
            popUp.appendTo(appendTo);
            desiredPosition.verticalOffset = desiredPosition.verticalOffset ? desiredPosition.verticalOffset : 0;
            desiredPosition.horizontalOffset = desiredPosition.horizontalOffset ? desiredPosition.horizontalOffset : 0;
            var popUpPosition = nextTo.offset();
            basicVerticalAlignment(popUpPosition, popUp, nextTo, desiredPosition);
            basicHorizontalAlignment(popUpPosition, popUp, nextTo, desiredPosition);
            finalAdjustement(popUp.offset(), popUpPosition, popUp, desiredPosition);
            var popUpBoundary = getBoundary(popUp);
            var boundaryPosition = getBoundary(boundary);
            if (checkForBoundary < 2) {
                var checkBoundary = checkForOutOfBoundary(popUpBoundary, boundaryPosition);
                if (checkBoundary.vertical != "ok" || checkBoundary.horizontal != "ok") {
                    var newDesiredPosition = alignInsideBoundary(desiredPosition, checkBoundary);
                    positionPopup(popUp, nextTo, appendTo, boundary, newDesiredPosition, checkForBoundary + 1);
                }
            }
        }
        JQueryUtils.positionPopup = positionPopup;
        function finalAdjustement(popUpOffSet, popUpPosition, popUp, desiredPosition) {
            var position = popUp.position();
            popUp.css({
                "position": "absolute",
                "top": (position.top + desiredPosition.verticalOffset) - (popUpOffSet.top - popUpPosition.top) + "px",
                "left": (position.left + desiredPosition.horizontalOffset) - (popUpOffSet.left - popUpPosition.left) + "px"
            });
        }
        function basicVerticalAlignment(popUpPosition, popUp, nextTo, desiredPosition) {
            switch (desiredPosition.vertical) {
                case 0 /* top */:
                    popUpPosition.top -= popUp.outerHeight();
                    break;
                case 2 /* bottom */:
                    popUpPosition.top += nextTo.outerHeight();
                    break;
                case 1 /* middle */:
                    popUpPosition.top -= popUp.outerHeight() / 3;
                case 3 /* innerTop */:
                    break;
                case 4 /* innerBottom */:
                    popUpPosition.top -= popUp.outerHeight() - nextTo.outerHeight();
                    break;
                default:
                    break;
            }
        }
        function basicHorizontalAlignment(popUpPosition, popUp, nextTo, desiredPosition) {
            switch (desiredPosition.horizontal) {
                case 0 /* left */:
                    popUpPosition.left -= popUp.outerWidth();
                    break;
                case 2 /* right */:
                    popUpPosition.left += nextTo.outerWidth();
                    break;
                case 1 /* center */:
                    popUpPosition.left += offSetToAlignCenter(popUp, nextTo);
                    break;
                case 3 /* innerLeft */:
                    break;
                case 4 /* innerRight */:
                    popUpPosition.left -= popUp.outerWidth() - nextTo.outerWidth();
                    break;
                default:
                    break;
            }
        }
        function alignInsideBoundary(oldPosition, checkBoundary) {
            var newDesiredPosition = oldPosition;
            if (checkBoundary.horizontal == "left") {
                newDesiredPosition.horizontal = 2 /* right */;
            }
            if (checkBoundary.horizontal == "right") {
                newDesiredPosition.horizontal = 0 /* left */;
            }
            if (checkBoundary.vertical == "top") {
                newDesiredPosition.vertical = 2 /* bottom */;
            }
            if (checkBoundary.vertical == "bottom") {
                newDesiredPosition.vertical = 0 /* top */;
            }
            return newDesiredPosition;
        }
        function offSetToAlignCenter(popUp, nextTo) {
            return (nextTo.outerWidth() - popUp.outerWidth()) / 2;
        }
        function getBoundary(element) {
            var boundaryOffset = element.offset();
            return {
                top: boundaryOffset.top,
                left: boundaryOffset.left,
                right: boundaryOffset.left + element.outerWidth(),
                bottom: boundaryOffset.top + element.outerHeight()
            };
        }
        function checkForOutOfBoundary(popUpBoundary, boundary) {
            var ret = {
                vertical: "ok",
                horizontal: "ok"
            };
            if (popUpBoundary.top < boundary.top) {
                ret.vertical = "top";
            }
            if (popUpBoundary.bottom > boundary.bottom) {
                ret.vertical = "bottom";
            }
            if (popUpBoundary.left < boundary.left) {
                ret.horizontal = "left";
            }
            if (popUpBoundary.right > boundary.right) {
                ret.horizontal = "right";
            }
            return ret;
        }
        function getPopUpCloseButton(captionForClose, captionForReminder) {
            return "<span class='coveo-close-button'>" + "<span class='coveo-icon coveo-sprites-quickView-close'></span>" + captionForClose + "</span>" + "<span class='coveo-pop-up-reminder' >" + captionForReminder + "</span>";
        }
        JQueryUtils.getPopUpCloseButton = getPopUpCloseButton;
        function getBasicLoadingAnimation() {
            var loadDotClass = 'coveo-loading-dot';
            return Coveo.$("" + "<div class='coveo-first-loading-animation' >" + "<div class='coveo-logo' ></div>" + "<div class='coveo-loading-container'>" + "<div class='" + loadDotClass + "' ></div>" + "<div class='" + loadDotClass + "' ></div>" + "<div class='" + loadDotClass + "' ></div>" + "<div class='" + loadDotClass + "' ></div>" + "</div>" + "</div>");
        }
        JQueryUtils.getBasicLoadingAnimation = getBasicLoadingAnimation;
        function getBasicLoadingDots() {
            var loadDotClass = 'coveo-loading-dot';
            return Coveo.$("" + "<div class='coveo-generic-loading-animation coveo-loading-animation'>" + "<div class='coveo-loading-container'>" + "<div class='" + loadDotClass + "' ></div>" + "<div class='" + loadDotClass + "' ></div>" + "<div class='" + loadDotClass + "' ></div>" + "<div class='" + loadDotClass + "' ></div>" + "</div>" + "</div>");
        }
        JQueryUtils.getBasicLoadingDots = getBasicLoadingDots;
        function highlightElement(initialString, valueToSearch) {
            var regex = new RegExp(Coveo.Utils.escapeRegexCharacter(valueToSearch), "i");
            var firstChar = initialString.search(regex);
            var lastChar = firstChar + valueToSearch.length;
            return Coveo.StringUtils.htmlEncode(initialString.slice(0, firstChar)) + "<span class='coveo-highlight'>" + Coveo.StringUtils.htmlEncode(initialString.slice(firstChar, lastChar)) + "</span>" + Coveo.StringUtils.htmlEncode(initialString.slice(lastChar));
        }
        JQueryUtils.highlightElement = highlightElement;
        function findScrollingParent(element) {
            var currentElement = Coveo.$(element);
            while (!(currentElement.is(document)) && (currentElement.length != 0)) {
                if (isElementScrollable(currentElement)) {
                    if (!currentElement.is("body")) {
                        return currentElement.get(0);
                    }
                    return Coveo.$(window).get(0);
                }
                currentElement = currentElement.parent();
            }
            return Coveo.$(window).get(0);
        }
        JQueryUtils.findScrollingParent = findScrollingParent;
        function isElementScrollable(element) {
            return (element.css("overflow-y") == "scroll");
        }
        function htmlToDom(html) {
            var parsedHtml = Coveo.$('<div>').html(html);
            // If the template has a single root element, we return it directly. Otherwise
            // we'll have to wrap this thing in a div as ResultList expects a single element.
            if (parsedHtml.children().length == 1) {
                return parsedHtml.children().get(0);
            }
            return parsedHtml.get(0);
        }
        JQueryUtils.htmlToDom = htmlToDom;
        Coveo.$.fn.fastToggle = function (visible) {
            return this.css('display', visible ? '' : 'none');
        };
    })(JQueryUtils = Coveo.JQueryUtils || (Coveo.JQueryUtils = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var HashUtils = (function () {
        function HashUtils() {
        }
        HashUtils.getHash = function (w) {
            if (w === void 0) { w = window; }
            Coveo.Assert.exists(w);
            // window.location.hash returns the DECODED hash on Firefox (it's a well known bug),
            // so any & in values will be already unescaped. This breaks our value splitting.
            // The following trick works on all browsers.
            var ret = "#" + (w.location.href.split("#")[1] || "");
            return HashUtils.getAjaxcrawlableHash(ret);
        };
        HashUtils.getValue = function (value, toParse) {
            Coveo.Assert.isNonEmptyString(value);
            Coveo.Assert.exists(toParse);
            toParse = HashUtils.getAjaxcrawlableHash(toParse);
            var paramValue = HashUtils.getRawValue(value, toParse);
            if (paramValue != undefined) {
                paramValue = HashUtils.getValueDependingOnType(paramValue);
            }
            return paramValue;
        };
        HashUtils.encodeValues = function (values) {
            var hash = [];
            Coveo._.each(values, function (valueToEncode, key, obj) {
                var encodedValue = "";
                if (Coveo.Utils.isNonEmptyArray(valueToEncode)) {
                    encodedValue = HashUtils.encodeArray(valueToEncode);
                }
                else if (Coveo._.isObject(valueToEncode) && Coveo.Utils.isNonEmptyArray(Coveo._.keys(valueToEncode))) {
                    encodedValue = HashUtils.encodeObject(valueToEncode);
                }
                else {
                    encodedValue = encodeURIComponent(valueToEncode.toString());
                }
                if (encodedValue != "") {
                    hash.push(key + "=" + encodedValue);
                }
            });
            return hash.join('&');
        };
        HashUtils.getAjaxcrawlableHash = function (hash) {
            if (hash[1] != undefined && hash[1] == "!") {
                return hash.substring(0, 1) + hash.substring(2);
            }
            else {
                return hash;
            }
        };
        HashUtils.getRawValue = function (value, toParse) {
            Coveo.Assert.exists(value);
            Coveo.Assert.exists(toParse);
            Coveo.Assert.check(toParse.indexOf('#') == 0 || toParse == '');
            var toParseArray = toParse.substr(1).split("&");
            var paramPos = 0;
            var loop = true;
            var paramValue = undefined;
            while (loop) {
                var paramValuePair = toParseArray[paramPos].split("=");
                if (paramValuePair[0] == value) {
                    loop = false;
                    paramValue = paramValuePair[1];
                }
                else {
                    paramPos++;
                    if (paramPos >= toParseArray.length) {
                        paramPos = undefined;
                        loop = false;
                    }
                }
            }
            return paramValue;
        };
        HashUtils.getValueDependingOnType = function (paramValue) {
            var type = HashUtils.getValueType(paramValue);
            var returnValue;
            if (type == "object") {
                returnValue = HashUtils.decodeObject(paramValue);
            }
            else if (type == "array") {
                returnValue = HashUtils.decodeArray(paramValue);
            }
            else {
                returnValue = decodeURIComponent(paramValue);
            }
            return returnValue;
        };
        HashUtils.getValueType = function (paramValue) {
            if (paramValue.substr(0, 1) == HashUtils.Delimiter.objectStart && paramValue.substr(paramValue.length - 1) == HashUtils.Delimiter.objectEnd) {
                return "object";
            }
            else if (paramValue.substr(0, 1) == HashUtils.Delimiter.arrayStart && paramValue.substr(paramValue.length - 1) == HashUtils.Delimiter.arrayEnd) {
                return "array";
            }
            else {
                return "other";
            }
        };
        HashUtils.encodeArray = function (array) {
            var arrayReturn = [];
            Coveo._.each(array, function (value) {
                arrayReturn.push(encodeURIComponent(value));
            });
            return HashUtils.Delimiter.arrayStart + arrayReturn.join(",") + HashUtils.Delimiter.arrayEnd;
        };
        HashUtils.encodeObject = function (obj) {
            var ret = HashUtils.Delimiter.objectStart;
            var retArray = [];
            Coveo._.each(obj, function (val, key, obj) {
                var retValue = "";
                retValue += "\"" + encodeURIComponent(key) + "\"" + " : ";
                if (Coveo._.isArray(val)) {
                    retValue += HashUtils.encodeArray(val);
                }
                else if (Coveo._.isObject(val)) {
                    retValue += HashUtils.encodeObject(val);
                }
                else {
                    if (Coveo._.isNumber(val) || Coveo._.isBoolean(val)) {
                        retValue += encodeURIComponent(val);
                    }
                    else {
                        retValue += "\"" + encodeURIComponent(val) + "\"";
                    }
                }
                retArray.push(retValue);
            });
            ret += retArray.join(" , ");
            return ret + HashUtils.Delimiter.objectEnd;
        };
        HashUtils.decodeObject = function (obj) {
            return JSON.parse(decodeURIComponent(obj));
        };
        HashUtils.decodeArray = function (value) {
            value = value.substr(1);
            value = value.substr(0, value.length - 1);
            var array = value.split(",");
            for (var i = 0; i < array.length; i++) {
                var arrayValue = decodeURIComponent(array[i]);
                var testIfNumber = arrayValue[0] == "0" && arrayValue.length > 1 ? NaN : Number(arrayValue);
                var testIfboolean = Coveo.Utils.parseBooleanIfNotUndefined(arrayValue);
                array[i] = arrayValue;
                if (!isNaN(testIfNumber)) {
                    array[i] = testIfNumber;
                }
                else if (testIfboolean != undefined) {
                    array[i] = testIfboolean;
                }
            }
            return array;
        };
        HashUtils.Delimiter = {
            "objectStart": "{",
            "objectEnd": "}",
            "arrayStart": "[",
            "arrayEnd": "]",
            "objectStartRegExp": "^{",
            "objectEndRegExp": "}+$",
            "arrayStartRegExp": "^[",
            "arrayEndRegExp": "]+$"
        };
        return HashUtils;
    })();
    Coveo.HashUtils = HashUtils;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var MobileUtils;
    (function (MobileUtils) {
        var clickCancelingOverlay = Coveo.$(document.createElement('div')).addClass('coveo-click-canceling-overlay');
        function showClickCancelingOverlay(duration) {
            clickCancelingOverlay.addClass('active');
            setTimeout(function () {
                clickCancelingOverlay.removeClass('active');
            }, duration);
        }
        MobileUtils.showClickCancelingOverlay = showClickCancelingOverlay;
        function showClickFeedback(element, duration) {
            element.addClass('coveo-clicked');
            setTimeout(function () {
                element.removeClass('coveo-clicked');
            }, duration);
        }
        MobileUtils.showClickFeedback = showClickFeedback;
        function addToggleClassOnSearchInterface(direction, isPhonegap) {
            if (isPhonegap === void 0) { isPhonegap = false; }
            var searchInterfaceClass = "." + Coveo.Ui.Component.computeCssClassNameForType(Coveo.Ui.SearchInterface.ID);
            Coveo.$(searchInterfaceClass + ",.coveo-glass").addClass('coveo-' + direction);
            Coveo.$(".coveo-glass").addClass('coveo-active-glass');
            if (isPhonegap && Coveo.DeviceUtils.getDeviceName() == "Android") {
                Coveo.$(document).on("backbutton", Coveo.$.proxy(MobileUtils.removeToggleClassOnSearchInterface, this, true));
            }
        }
        MobileUtils.addToggleClassOnSearchInterface = addToggleClassOnSearchInterface;
        function removeToggleClassOnSearchInterface(isPhonegap) {
            if (isPhonegap === void 0) { isPhonegap = false; }
            var searchInterfaceClass = "." + Coveo.Ui.Component.computeCssClassNameForType(Coveo.Ui.SearchInterface.ID);
            Coveo.$(searchInterfaceClass + ",.coveo-glass").removeClass('coveo-slide-right').removeClass('coveo-slide-left').removeClass('coveo-active-glass');
            Coveo.$('.coveo-tab-section').removeClass('coveo-opened-by-current-tab');
            var currentTabId = Coveo.Ui['CurrentTab'] ? Coveo.Ui['CurrentTab'].ID : undefined;
            if (currentTabId) {
                Coveo.$("." + currentTabId).removeClass('coveo-opening-tab-section');
            }
            if (isPhonegap && Coveo.DeviceUtils.getDeviceName() == "Android") {
                Coveo.$(document).off("backbutton");
            }
        }
        MobileUtils.removeToggleClassOnSearchInterface = removeToggleClassOnSearchInterface;
        function appendClickCancelingOverlay() {
            Coveo.$('.' + Coveo.Ui.Component.computeCssClassNameForType(Coveo.Ui.SearchInterface.ID)).append(clickCancelingOverlay);
        }
        function hideIOSKeyboard(activeElement) {
            Coveo.$(window).focus();
            Coveo.$(activeElement).blur();
        }
        MobileUtils.hideIOSKeyboard = hideIOSKeyboard;
        function hideIOSKeyboardOnWindowClick() {
            if (Coveo.DeviceUtils.isIos()) {
                Coveo.$(window).on('touchstart', function (e) {
                    if (!Coveo.$(e.target).is('input') && Coveo.$(document.activeElement).is('input')) {
                        MobileUtils.hideIOSKeyboard(document.activeElement);
                    }
                });
            }
        }
        function initMobileUtils() {
            if (Coveo.DeviceUtils.isMobileDevice()) {
                Coveo.$(function () { return appendClickCancelingOverlay(); });
                hideIOSKeyboardOnWindowClick();
            }
        }
        initMobileUtils();
    })(MobileUtils = Coveo.MobileUtils || (Coveo.MobileUtils = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Rest;
    (function (Rest) {
        var AjaxError = (function () {
            function AjaxError(message, status) {
                this.message = message;
                this.status = status;
                Coveo.Assert.exists(message);
                Coveo.Assert.exists(status);
                this.type = "Ajax Error (status: " + status + ")";
            }
            return AjaxError;
        })();
        Rest.AjaxError = AjaxError;
    })(Rest = Coveo.Rest || (Coveo.Rest = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Rest;
    (function (Rest) {
        var MissingAuthenticationError = (function () {
            function MissingAuthenticationError(provider) {
                this.provider = provider;
                this.isMissingAuthentication = true;
                this.type = this.message = "Missing Authentication (provider: " + provider + ")";
            }
            return MissingAuthenticationError;
        })();
        Rest.MissingAuthenticationError = MissingAuthenticationError;
    })(Rest = Coveo.Rest || (Coveo.Rest = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Rest;
    (function (Rest) {
        var QueryError = (function () {
            function QueryError(errorResponse) {
                this.status = errorResponse.statusCode;
                this.message = errorResponse.data.message;
                this.type = errorResponse.data.type;
                this.queryExecutionReport = errorResponse.data.executionReport;
                Coveo.Assert.isNumber(this.status);
                Coveo.Assert.isNonEmptyString(this.message);
                Coveo.Assert.isNonEmptyString(this.type);
            }
            return QueryError;
        })();
        Rest.QueryError = QueryError;
    })(Rest = Coveo.Rest || (Coveo.Rest = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Rest;
    (function (Rest) {
        var ACCESS_IS_DENIED = -2147024891;
        //In ie8, XMLHttpRequest has no status property, so let's use this enum instead
        var XMLHttpRequestStatus;
        (function (XMLHttpRequestStatus) {
            XMLHttpRequestStatus[XMLHttpRequestStatus["OPENED"] = XMLHttpRequest.OPENED || 1] = "OPENED";
            XMLHttpRequestStatus[XMLHttpRequestStatus["DONE"] = XMLHttpRequest.DONE || 4] = "DONE";
        })(XMLHttpRequestStatus || (XMLHttpRequestStatus = {}));
        var EndpointCaller = (function () {
            function EndpointCaller(options) {
                if (options === void 0) { options = {}; }
                this.options = options;
                this.useJsonp = false;
                this.logger = new Coveo.Logger(this);
            }
            EndpointCaller.prototype.call = function (params) {
                Coveo.Assert.isNonEmptyString(params.url);
                var requestInfo = {
                    url: params.url,
                    queryString: params.errorsAsSuccess ? params.queryString.concat(['errorsAsSuccess=1']) : params.queryString,
                    requestData: params.requestData,
                    deferred: Coveo.$.Deferred(),
                    begun: new Date(),
                    method: params.method
                };
                this.logger.trace('Performing REST request', requestInfo);
                var urlObject = EndpointCaller.parseURL(requestInfo.url);
                //In IE8, hostname and port return "" when we are on the same domain.
                var isLocalHost = (window.location.hostname === urlObject.hostname) || (urlObject.hostname === "");
                var currentPort = (window.location.port != "" ? window.location.port : (window.location.protocol == "https:" ? "443" : "80"));
                var isSamePort = currentPort == urlObject.port;
                var isCrossOrigin = !(isLocalHost && isSamePort);
                if (!this.useJsonp) {
                    if (this.isCORSSupported() || !isCrossOrigin) {
                        this.callUsingXMLHttpRequest(requestInfo, params.responseType);
                    }
                    else if (this.isXDomainRequestSupported()) {
                        this.callUsingXDomainRequest(requestInfo);
                    }
                    else {
                        this.callUsingAjaxJsonP(requestInfo);
                    }
                }
                else {
                    this.callUsingAjaxJsonP(requestInfo);
                }
                return requestInfo.deferred;
            };
            EndpointCaller.parseURL = function (url) {
                var urlObject = document.createElement('a');
                urlObject.href = url;
                return urlObject;
            };
            EndpointCaller.convertJsonToQueryString = function (json) {
                Coveo.Assert.exists(json);
                var result = [];
                Coveo._.each(json, function (value, key) {
                    if (value != null) {
                        if (Coveo._.isObject(value)) {
                            result.push(key + '=' + encodeURIComponent(JSON.stringify(value)));
                        }
                        else {
                            result.push(key + '=' + encodeURIComponent(value.toString()));
                        }
                    }
                });
                return result;
            };
            EndpointCaller.convertJsonToFormBody = function (json) {
                return EndpointCaller.convertJsonToQueryString(json).join('&');
            };
            EndpointCaller.prototype.callUsingXMLHttpRequest = function (requestInfo, responseType) {
                var _this = this;
                if (responseType === void 0) { responseType = "text"; }
                var xmlHttpRequest = new XMLHttpRequest();
                // Beware, most stuff must be set on the event that says the request is OPENED.
                // Otherwise it'll bork on some browsers. Gotta love standards.
                // This sent variable allowed to remove the second call of onreadystatechange with the state OPENED in IE11
                var sent = false;
                xmlHttpRequest.onreadystatechange = function (ev) {
                    if (xmlHttpRequest.readyState == XMLHttpRequestStatus.OPENED && !sent) {
                        sent = true;
                        // We have to enable withCredentials in order for CORS to work with basic & Windows & cookie authentication.
                        // We must NOT set it otherwise because it won't work if Access-Control-Allow-Credentials is not specified
                        // by the server (ex: cloud platform)
                        if (_this.options.anonymous === false) {
                            xmlHttpRequest.withCredentials = true;
                        }
                        // Set authentication depending on what we're using
                        if (_this.options.accessToken) {
                            xmlHttpRequest.setRequestHeader('Authorization', 'Bearer ' + _this.options.accessToken);
                        }
                        else if (_this.options.username && _this.options.password) {
                            xmlHttpRequest.setRequestHeader('Authorization', 'Basic ' + btoa(_this.options.username + ":" + _this.options.password));
                        }
                        // Under Phonegap, we must set this special http header that'll prevent the server
                        // from challenging us for Basic Authentication. This avoids a bug where Phonegap
                        // would simply deadlock trying to show a popup.
                        if (Coveo.DeviceUtils.isPhonegap()) {
                            xmlHttpRequest.setRequestHeader('Basic-Auth-Challenge-Client', 'Phonegap');
                        }
                        if (requestInfo.method == "GET") {
                            xmlHttpRequest.send();
                        }
                        else {
                            xmlHttpRequest.setRequestHeader("Content-Type", "application/x-www-form-urlencoded; charset=\"UTF-8\"");
                            xmlHttpRequest.send(EndpointCaller.convertJsonToFormBody(requestInfo.requestData));
                        }
                        xmlHttpRequest.responseType = responseType;
                    }
                    else if (xmlHttpRequest.readyState == XMLHttpRequestStatus.DONE) {
                        var status = xmlHttpRequest.status;
                        var data;
                        if (responseType == "text") {
                            data = _this.tryParseResponseText(xmlHttpRequest.responseText, xmlHttpRequest.getResponseHeader("Content-Type"));
                        }
                        else {
                            data = xmlHttpRequest.response;
                            if (data == undefined) {
                                data = _this.tryParseResponseText(xmlHttpRequest.responseText, xmlHttpRequest.getResponseHeader("Content-Type"));
                            }
                        }
                        if (_this.isSuccessHttpStatus(status)) {
                            _this.handleSuccessfulResponseThatMightBeAnError(requestInfo, data);
                        }
                        else {
                            _this.handleError(requestInfo, xmlHttpRequest.status, undefined);
                        }
                    }
                };
                var queryString = requestInfo.queryString;
                if (requestInfo.method == "GET") {
                    queryString = queryString.concat(EndpointCaller.convertJsonToQueryString(requestInfo.requestData));
                }
                xmlHttpRequest.open(requestInfo.method, this.combineUrlAndQueryString(requestInfo.url, queryString));
            };
            EndpointCaller.prototype.callUsingXDomainRequest = function (requestInfo) {
                var _this = this;
                var queryString = requestInfo.queryString.concat([]);
                // XDomainRequest don't support including stuff in the header, so we must
                // put the access token in the query string if we have one.
                if (this.options.accessToken) {
                    queryString.push('access_token=' + encodeURIComponent(this.options.accessToken));
                }
                var xDomainRequest = new XDomainRequest();
                if (requestInfo.method == "GET") {
                    queryString = queryString.concat(EndpointCaller.convertJsonToQueryString(requestInfo.requestData));
                }
                xDomainRequest.open(requestInfo.method, this.combineUrlAndQueryString(requestInfo.url, queryString));
                xDomainRequest.onload = function () {
                    var data = _this.tryParseResponseText(xDomainRequest.responseText, xDomainRequest.contentType);
                    _this.handleSuccessfulResponseThatMightBeAnError(requestInfo, data);
                };
                xDomainRequest.onerror = function () {
                    var data = _this.tryParseResponseText(xDomainRequest.responseText, xDomainRequest.contentType);
                    _this.handleError(requestInfo, 0, data);
                };
                // We must set those functions otherwise it will sometime fail in IE
                xDomainRequest.ontimeout = function () { return _this.logger.error('Request timeout', xDomainRequest, requestInfo.requestData); };
                xDomainRequest.onprogress = function () { return _this.logger.trace('Request progress', xDomainRequest, requestInfo.requestData); };
                // We must open the request in a separate thread, for obscure reasons
                Coveo._.defer(function () {
                    if (requestInfo.method == "GET") {
                        xDomainRequest.send();
                    }
                    else {
                        xDomainRequest.send(EndpointCaller.convertJsonToFormBody(requestInfo.requestData));
                    }
                });
            };
            EndpointCaller.prototype.callUsingAjaxJsonP = function (requestInfo) {
                var _this = this;
                var queryString = requestInfo.queryString.concat(EndpointCaller.convertJsonToQueryString(requestInfo.requestData));
                // JSONP don't support including stuff in the header, so we must
                // put the access token in the query string if we have one.
                if (this.options.accessToken) {
                    queryString.push('access_token=' + encodeURIComponent(this.options.accessToken));
                }
                queryString.push('callback=?');
                Coveo.$.jsonp({
                    url: this.combineUrlAndQueryString(requestInfo.url, queryString),
                    success: function (data) { return _this.handleSuccessfulResponseThatMightBeAnError(requestInfo, data); },
                    error: function () { return _this.handleError(requestInfo, 0, undefined); }
                });
            };
            EndpointCaller.prototype.handleSuccessfulResponseThatMightBeAnError = function (requestInfo, data) {
                if (this.isErrorResponseBody(data)) {
                    this.handleError(requestInfo, data.statusCode, data);
                }
                else {
                    this.handleSuccess(requestInfo, data);
                }
            };
            EndpointCaller.prototype.handleSuccess = function (requestInfo, data) {
                var querySuccess = {
                    duration: Coveo.TimeSpan.fromDates(requestInfo.begun, new Date()).getMilliseconds(),
                    data: data
                };
                this.logger.trace('REST request successful', data, requestInfo);
                requestInfo.deferred.resolve(querySuccess);
            };
            EndpointCaller.prototype.handleError = function (requestInfo, status, data) {
                var queryError = {
                    statusCode: status,
                    data: data
                };
                this.logger.error('REST request failed', status, data, requestInfo);
                requestInfo.deferred.reject(queryError);
            };
            EndpointCaller.prototype.combineUrlAndQueryString = function (url, queryString) {
                return url + (queryString.length > 0 ? '?' + queryString.join('&') : '');
            };
            EndpointCaller.prototype.isXDomainRequestSupported = function () {
                return "XDomainRequest" in window;
            };
            EndpointCaller.prototype.isCORSSupported = function () {
                return "withCredentials" in new XMLHttpRequest();
            };
            EndpointCaller.prototype.isSuccessHttpStatus = function (status) {
                return status >= 200 && status < 300 || status === 304;
            };
            EndpointCaller.prototype.tryParseResponseText = function (json, contentType) {
                if (contentType != null && contentType.indexOf('application/json') != -1) {
                    if (Coveo.Utils.isNonEmptyString(json)) {
                        try {
                            return JSON.parse(json);
                        }
                        catch (ex) {
                            return undefined;
                        }
                    }
                    else {
                        return undefined;
                    }
                }
                else {
                    return json;
                }
            };
            EndpointCaller.prototype.isErrorResponseBody = function (data) {
                if (data && data.statusCode) {
                    return !this.isSuccessHttpStatus(data.statusCode);
                }
                else {
                    return false;
                }
            };
            return EndpointCaller;
        })();
        Rest.EndpointCaller = EndpointCaller;
    })(Rest = Coveo.Rest || (Coveo.Rest = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Rest;
    (function (Rest) {
        var DefaultSearchEndpointOptions = (function () {
            function DefaultSearchEndpointOptions() {
                this.queryStringArguments = {};
                this.anonymous = false;
                this.isOldRestAPI = false;
            }
            return DefaultSearchEndpointOptions;
        })();
        Rest.DefaultSearchEndpointOptions = DefaultSearchEndpointOptions;
        var SearchEndpoint = (function () {
            function SearchEndpoint(options) {
                this.options = options;
                this._batchListFieldValues = [];
                Coveo.Assert.exists(options);
                // For backward compatibility, we set anonymous to true when an access token
                // is specified. This causes withCredentials to NOT be set, allowing pages
                // loaded directly from the filesystem to work with non Windows/Basic/Cookie
                // authentication. If anonymous is explicitly set to false, we'll use withCredentials.
                var defaultOptions = new DefaultSearchEndpointOptions();
                defaultOptions.anonymous = Coveo.Utils.isNonEmptyString(options.accessToken);
                this.options = Coveo.$.extend({}, defaultOptions, options);
                Coveo.$(window).on('beforeunload', Coveo.$.proxy(this.handleUnload, this));
                this.logger = new Coveo.Logger(this);
                this.createEndpointCaller();
            }
            SearchEndpoint.configureSampleEndpoint = function () {
                // This OAuth token points to the workgroup used for samples.
                // It contains a set of harmless content sources.
                SearchEndpoint.endpoints["default"] = new SearchEndpoint({
                    restUri: 'https://cloudplatform.coveo.com/rest/search',
                    accessToken: '52d806a2-0f64-4390-a3f2-e0f41a4a73ec'
                });
            };
            SearchEndpoint.configureCloudEndpoint = function (workgroup, token, uri, otherOptions) {
                if (uri === void 0) { uri = 'https://cloudplatform.coveo.com/rest/search'; }
                var merged = SearchEndpoint.mergeConfigOptions({
                    restUri: uri,
                    accessToken: token,
                    queryStringArguments: {
                        workgroup: workgroup
                    }
                }, otherOptions);
                SearchEndpoint.endpoints["default"] = new SearchEndpoint(SearchEndpoint.removeUndefinedConfigOption(merged));
            };
            SearchEndpoint.configureOnPremiseEndpoint = function (uri, token, otherOptions) {
                var merged = SearchEndpoint.mergeConfigOptions({
                    restUri: uri,
                    accessToken: token
                }, otherOptions);
                SearchEndpoint.endpoints["default"] = new SearchEndpoint(SearchEndpoint.removeUndefinedConfigOption(merged));
            };
            SearchEndpoint.removeUndefinedConfigOption = function (config) {
                Coveo._.each(Coveo._.keys(config), function (key) {
                    if (config[key] == undefined) {
                        delete config[key];
                    }
                });
                return config;
            };
            SearchEndpoint.mergeConfigOptions = function (first, second) {
                first = SearchEndpoint.removeUndefinedConfigOption(first);
                second = SearchEndpoint.removeUndefinedConfigOption(second);
                return Coveo.$.extend({}, first, second);
            };
            SearchEndpoint.prototype.handleUnload = function () {
                this.isRedirecting = true;
            };
            SearchEndpoint.prototype.getBaseUri = function () {
                return this.options.restUri;
            };
            SearchEndpoint.prototype.getAuthenticationProviderUri = function (provider, returnUri, message) {
                var uri = this.buildBaseUri('/login/' + provider) + '?';
                if (Coveo.Utils.isNonEmptyString(returnUri)) {
                    uri += 'redirectUri=' + encodeURIComponent(returnUri);
                }
                else if (Coveo.Utils.isNonEmptyString(message)) {
                    uri += 'message=' + encodeURIComponent(message);
                }
                return uri;
            };
            SearchEndpoint.prototype.isJsonp = function () {
                return this.caller.useJsonp;
            };
            SearchEndpoint.prototype.search = function (query, callOptions) {
                var _this = this;
                Coveo.Assert.exists(query);
                this.logger.info('Performing REST query', query);
                callOptions = Coveo._.extend({}, callOptions);
                var params = {
                    url: this.buildBaseUri('/'),
                    queryString: this.buildBaseQueryString(callOptions),
                    requestData: query,
                    errorsAsSuccess: true,
                    responseType: 'text',
                    method: 'POST'
                };
                var deferred = this.callWithErrorHandling(params);
                deferred.done(function (results) {
                    _this.logger.info('REST query successful', results, query);
                    // If the server specified no search ID generated one using the client-side
                    // GUID generator. We prefer server generated guids to allow tracking a query
                    // all the way from the analytics to the logs.
                    if (Coveo.Utils.isNullOrEmptyString(results.searchUid)) {
                        results.searchUid = Coveo.QueryUtils.createGuid();
                    }
                });
                return deferred;
            };
            SearchEndpoint.prototype.getRawDataStream = function (documentUniqueId, dataStreamType, callOptions) {
                var _this = this;
                Coveo.Assert.exists(documentUniqueId);
                callOptions = Coveo._.extend({}, callOptions);
                var params = {
                    url: this.buildBaseUri('/datastream'),
                    queryString: this.buildViewAsHtmlQueryString(documentUniqueId, callOptions).concat(["dataStream=" + dataStreamType]),
                    requestData: {},
                    errorsAsSuccess: false,
                    method: 'GET',
                    responseType: 'arraybuffer'
                };
                var deferred = this.callWithErrorHandling(params);
                this.logger.info('Performing REST query for datastream ' + dataStreamType + ' on document uniqueID' + documentUniqueId);
                deferred.done(function (results) { return _this.logger.info('REST query successful', results, documentUniqueId); });
                return deferred;
            };
            SearchEndpoint.prototype.getDocumentText = function (documentUniqueID, callOptions) {
                callOptions = Coveo._.extend({}, callOptions);
                var params = {
                    url: this.buildBaseUri("/text"),
                    queryString: this.buildViewAsHtmlQueryString(documentUniqueID, callOptions),
                    method: "GET",
                    requestData: {},
                    responseType: "text",
                    errorsAsSuccess: true
                };
                return this.callWithErrorHandling(params);
            };
            SearchEndpoint.prototype.getDocumentHtml = function (documentUniqueID, callOptions) {
                callOptions = Coveo._.extend({}, callOptions);
                var params = {
                    url: this.buildBaseUri('/html'),
                    queryString: this.buildViewAsHtmlQueryString(documentUniqueID, callOptions),
                    method: "GET",
                    requestData: {},
                    responseType: "document",
                    errorsAsSuccess: true
                };
                return this.callWithErrorHandling(params);
            };
            SearchEndpoint.prototype.getViewAsHtmlUri = function (documentUniqueID, callOptions) {
                callOptions = Coveo._.extend({}, callOptions);
                return this.buildViewAsHtmlUri("/html", documentUniqueID, callOptions);
            };
            SearchEndpoint.prototype.getViewAsDatastreamUri = function (documentUniqueID, dataStreamType, callOptions) {
                callOptions = Coveo._.extend({}, callOptions);
                return this.buildViewAsHtmlUri("/datastream", documentUniqueID, callOptions) + '&dataStream=' + encodeURIComponent(dataStreamType);
            };
            SearchEndpoint.prototype.batchFieldValues = function (request, callOptions) {
                var _this = this;
                Coveo.Assert.exists(request);
                callOptions = Coveo._.extend({}, callOptions);
                this.logger.info('Listing field values', request);
                var deferred = Coveo.$.Deferred();
                var params = {
                    url: this.buildBaseUri('/values'),
                    queryString: this.buildBaseQueryString(callOptions),
                    method: "POST",
                    requestData: request,
                    errorsAsSuccess: true,
                    responseType: 'text'
                };
                this.callWithErrorHandling(params).done(function (data) { return deferred.resolve(data.values); }).fail(function (data, error) { return deferred.reject(null, error); });
                deferred.done(function (fieldValues) { return _this.logger.info('REST list field values successful', fieldValues, request); });
                return deferred;
            };
            SearchEndpoint.prototype.listFieldValues = function (request, callOptions) {
                var _this = this;
                Coveo.Assert.exists(request);
                callOptions = Coveo._.extend({}, callOptions);
                this.logger.info('Listing field values', request);
                var deferred = Coveo.$.Deferred();
                var params = {
                    url: this.buildBaseUri('/values'),
                    queryString: this.buildBaseQueryString(callOptions),
                    method: "POST",
                    requestData: request,
                    errorsAsSuccess: true,
                    responseType: 'text'
                };
                this.callWithErrorHandling(params).done(function (data) { return deferred.resolve(data.values); }).fail(function (data, error) { return deferred.reject(null, error); });
                deferred.done(function (fieldValues) { return _this.logger.info('REST list field values successful', fieldValues, request); });
                return deferred;
            };
            SearchEndpoint.prototype.listFields = function (callOptions) {
                callOptions = Coveo._.extend({}, callOptions);
                this.logger.info('Listing fields');
                var deferred = Coveo.$.Deferred();
                var params = {
                    url: this.buildBaseUri('/fields'),
                    queryString: this.buildBaseQueryString(callOptions),
                    requestData: {},
                    method: "GET",
                    responseType: "text",
                    errorsAsSuccess: true
                };
                this.callWithErrorHandling(params).done(function (data) { return deferred.resolve(data.fields); }).fail(function (data, error) { return deferred.reject(null, error); });
                return deferred;
            };
            SearchEndpoint.prototype.tagDocument = function (taggingRequest, callOptions) {
                callOptions = Coveo._.extend({}, callOptions);
                this.logger.info('Tagging a document', taggingRequest);
                var deferred = Coveo.$.Deferred();
                var params = {
                    url: this.buildBaseUri('/tag'),
                    queryString: this.buildBaseQueryString(callOptions),
                    method: 'POST',
                    requestData: taggingRequest,
                    errorsAsSuccess: false,
                    responseType: "text"
                };
                this.callWithErrorHandling(params).done(function () { return deferred.resolve(true); }).fail(function () { return deferred.reject(false); });
                return deferred;
            };
            SearchEndpoint.prototype.createEndpointCaller = function () {
                this.caller = new Rest.EndpointCaller(this.options);
            };
            SearchEndpoint.prototype.buildBaseUri = function (path) {
                Coveo.Assert.isString(path);
                var uri = this.options.restUri;
                uri = this.removeTrailingSlash(uri);
                uri += path;
                if (this.options.isOldRestAPI) {
                    uri = this.addTrailingSlash(uri);
                }
                return uri;
            };
            SearchEndpoint.prototype.buildBaseQueryString = function (callOptions) {
                var queryString = [];
                for (var name in this.options.queryStringArguments) {
                    queryString.push(name + '=' + encodeURIComponent(this.options.queryStringArguments[name]));
                }
                if (Coveo._.isArray(callOptions.authentication) && callOptions.authentication.length != 0) {
                    queryString.push('authentication=' + callOptions.authentication.join(','));
                }
                return queryString;
            };
            SearchEndpoint.prototype.buildViewAsHtmlUri = function (path, documentUniqueID, callOptions) {
                Coveo.Assert.isNonEmptyString(documentUniqueID);
                var queryString = this.buildViewAsHtmlQueryString(documentUniqueID, callOptions);
                // Since those uri will be loaded in a frame or tab, we must include any
                // authentication token as a query string argument instead of relying on
                // endpoint caller for this.
                if (Coveo.Utils.isNonEmptyString(this.options.accessToken)) {
                    queryString.push('access_token=' + encodeURIComponent(this.options.accessToken));
                }
                var baseUri = this.buildBaseUri(path);
                return baseUri + '?' + queryString.join('&');
            };
            SearchEndpoint.prototype.buildViewAsHtmlQueryString = function (uniqueId, callOptions) {
                var queryString = this.buildBaseQueryString(callOptions);
                queryString.push("uniqueId=" + encodeURIComponent(uniqueId));
                if (callOptions.query != null) {
                    queryString.push("q=" + encodeURIComponent(callOptions.query));
                    queryString.push('enableNavigation=true');
                }
                if (callOptions.requestedOutputSize) {
                    queryString.push("requestedOutputSize=" + encodeURIComponent(callOptions.requestedOutputSize.toString()));
                }
                if (callOptions.contentType) {
                    queryString.push("contentType=" + encodeURIComponent(callOptions.contentType));
                }
                return queryString;
            };
            SearchEndpoint.prototype.callWithErrorHandling = function (params) {
                var deferred = Coveo.$.Deferred();
                this.performOneCall(params, deferred, true);
                return deferred;
            };
            SearchEndpoint.prototype.performOneCall = function (params, outerDeferred, autoRenewToken) {
                var _this = this;
                this.caller.call(params).done(function (response) {
                    response.data.clientDuration = response.duration;
                    outerDeferred.resolve(response.data, params.requestData);
                }).fail(function (response) {
                    if (autoRenewToken && _this.canRenewAccessToken() && _this.isAccessTokenExpiredStatus(response.statusCode)) {
                        _this.renewAccessToken().done(function () { return _this.performOneCall(params, outerDeferred, false); }).fail(function () { return _this.handleErrorResponse(response, outerDeferred); });
                    }
                    else if (response.statusCode == 0 && _this.isRedirecting) {
                        //The page is getting redirected
                        Coveo._.defer(function () {
                            outerDeferred.resolve();
                        });
                    }
                    else {
                        _this.handleErrorResponse(response, outerDeferred);
                    }
                });
            };
            SearchEndpoint.prototype.handleErrorResponse = function (errorResponse, outerDeferred) {
                if (this.isMissingAuthenticationProviderStatus(errorResponse.statusCode)) {
                    outerDeferred.reject(null, new Rest.MissingAuthenticationError(errorResponse.data['provider']));
                }
                else if (errorResponse.data && errorResponse.data.message) {
                    outerDeferred.reject(null, new Rest.QueryError(errorResponse));
                }
                else {
                    outerDeferred.reject(null, new Rest.AjaxError("Request Error", errorResponse.statusCode));
                }
            };
            SearchEndpoint.prototype.canRenewAccessToken = function () {
                return Coveo.Utils.isNonEmptyString(this.options.accessToken) && Coveo._.isFunction(this.options.renewAccessToken);
            };
            SearchEndpoint.prototype.isAccessTokenExpiredStatus = function (status) {
                return status == 419;
            };
            SearchEndpoint.prototype.renewAccessToken = function () {
                var _this = this;
                this.logger.info("Renewing expired access token");
                return this.options.renewAccessToken().done(function (token) {
                    Coveo.Assert.isNonEmptyString(token);
                    _this.options.accessToken = token;
                    _this.createEndpointCaller();
                }).fail(function (e) {
                    _this.logger.error("Failed to renew access token", e);
                });
            };
            SearchEndpoint.prototype.isMissingAuthenticationProviderStatus = function (status) {
                return status == 402;
            };
            SearchEndpoint.prototype.addTrailingSlash = function (uri) {
                if (!this.hasTrailingSlash(uri)) {
                    uri += "/";
                }
                return uri;
            };
            SearchEndpoint.prototype.removeTrailingSlash = function (uri) {
                if (this.hasTrailingSlash(uri)) {
                    uri = uri.substr(0, uri.length - 1);
                }
                return uri;
            };
            SearchEndpoint.prototype.hasTrailingSlash = function (uri) {
                return uri.charAt(uri.length - 1) == '/';
            };
            SearchEndpoint.endpoints = {};
            return SearchEndpoint;
        })();
        Rest.SearchEndpoint = SearchEndpoint;
    })(Rest = Coveo.Rest || (Coveo.Rest = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Rest;
    (function (Rest) {
        var SearchEndpointWithDefaultCallOptions = (function () {
            function SearchEndpointWithDefaultCallOptions(endpoint, callOptions) {
                this.endpoint = endpoint;
                this.callOptions = callOptions;
                this.options = endpoint.options;
            }
            SearchEndpointWithDefaultCallOptions.prototype.getBaseUri = function () {
                return this.endpoint.getBaseUri();
            };
            SearchEndpointWithDefaultCallOptions.prototype.getAuthenticationProviderUri = function (provider, returnUri, message) {
                return this.endpoint.getAuthenticationProviderUri(provider, returnUri, message);
            };
            SearchEndpointWithDefaultCallOptions.prototype.isJsonp = function () {
                return this.endpoint.isJsonp();
            };
            SearchEndpointWithDefaultCallOptions.prototype.search = function (query, callOptions) {
                return this.endpoint.search(query, this.enrichCallOptions(callOptions));
            };
            SearchEndpointWithDefaultCallOptions.prototype.tagDocument = function (taggingRequest, callOptions) {
                return this.endpoint.tagDocument(taggingRequest, this.enrichCallOptions(taggingRequest));
            };
            SearchEndpointWithDefaultCallOptions.prototype.getRawDataStream = function (documentUniqueId, dataStreamType, callOptions) {
                return this.endpoint.getRawDataStream(documentUniqueId, dataStreamType, this.enrichCallOptions(callOptions));
            };
            SearchEndpointWithDefaultCallOptions.prototype.getDocumentText = function (documentUniqueID, callOptions) {
                return this.endpoint.getDocumentText(documentUniqueID, this.enrichCallOptions(callOptions));
            };
            SearchEndpointWithDefaultCallOptions.prototype.getDocumentHtml = function (documentUniqueID, callOptions) {
                return this.endpoint.getDocumentHtml(documentUniqueID, this.enrichCallOptions(callOptions));
            };
            SearchEndpointWithDefaultCallOptions.prototype.getViewAsHtmlUri = function (documentUniqueID, callOptions) {
                return this.endpoint.getViewAsHtmlUri(documentUniqueID, this.enrichCallOptions(callOptions));
            };
            SearchEndpointWithDefaultCallOptions.prototype.getViewAsDatastreamUri = function (documentUniqueID, dataStreamType, callOptions) {
                return this.endpoint.getViewAsDatastreamUri(documentUniqueID, dataStreamType, this.enrichCallOptions(callOptions));
            };
            SearchEndpointWithDefaultCallOptions.prototype.listFieldValues = function (request, callOptions) {
                return this.endpoint.listFieldValues(request, this.enrichCallOptions(callOptions));
            };
            SearchEndpointWithDefaultCallOptions.prototype.listFields = function (callOptions) {
                return this.endpoint.listFields(this.enrichCallOptions(callOptions));
            };
            SearchEndpointWithDefaultCallOptions.prototype.enrichCallOptions = function (callOptions) {
                return Coveo._.extend({}, callOptions, this.callOptions);
            };
            return SearchEndpointWithDefaultCallOptions;
        })();
        Rest.SearchEndpointWithDefaultCallOptions = SearchEndpointWithDefaultCallOptions;
    })(Rest = Coveo.Rest || (Coveo.Rest = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        Coveo._.templateSettings = {
            evaluate: /(?:<%|{{)([\s\S]+?)(?:%>|}})/g,
            interpolate: /(?:<%|{{)=([\s\S]+?)(?:%>|}})/g,
            escape: /(?:<%|{{)-([\s\S]+?)(?:%>|}})/g
        };
        var UnderscoreTemplate = (function () {
            function UnderscoreTemplate(template) {
                this.logger = new Coveo.Logger(this);
                if (Coveo.Utils.isHtmlElement(template)) {
                    Coveo.Assert.exists(template);
                    var templateString = Coveo.$(template).html();
                    this.template = Coveo._.template(templateString);
                }
                else if (template instanceof Function) {
                    this.template = template;
                }
            }
            UnderscoreTemplate.prototype.instantiateToString = function (data) {
                var extended = Coveo._.extend({}, data, UnderscoreTemplate.templateHelpers);
                return this.template(extended);
            };
            UnderscoreTemplate.prototype.instantiateToElement = function (data) {
                var html = this.instantiateToString(data);
                var element = Coveo.JQueryUtils.htmlToDom(html);
                this.logger.trace('Instantiated result template', data, element);
                return element;
            };
            UnderscoreTemplate.create = function (element) {
                Coveo.Assert.exists(element);
                return new UnderscoreTemplate(element);
            };
            UnderscoreTemplate.registerTemplateHelper = function (helperName, helper) {
                UnderscoreTemplate.templateHelpers[helperName] = helper;
            };
            UnderscoreTemplate.isLibraryAvailable = function () {
                return Coveo.Utils.exists(window['_']);
            };
            UnderscoreTemplate.templateHelpers = {};
            UnderscoreTemplate.mimeTypes = [
                'text/underscore',
                'text/underscore-template',
                'text/x-underscore',
                'text/x-underscore-template'
            ];
            return UnderscoreTemplate;
        })();
        Ui.UnderscoreTemplate = UnderscoreTemplate;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var JsRenderTemplate = (function () {
            function JsRenderTemplate(template) {
                this.template = template;
                Coveo.Assert.check(JsRenderTemplate.isLibraryAvailable(), 'The JsRender library must be loaded within the page');
                Coveo.Assert.exists(template);
                this.logger = new Coveo.Logger(this);
            }
            JsRenderTemplate.prototype.instantiateToString = function (data) {
                return Coveo.$(this.template).render(data);
            };
            JsRenderTemplate.prototype.instantiateToElement = function (data) {
                var html = Coveo.$(this.template).render(data);
                var element = Coveo.JQueryUtils.htmlToDom(html);
                this.logger.trace('Instantiated result template', data, element);
                return element;
            };
            JsRenderTemplate.create = function (element) {
                Coveo.Assert.exists(element);
                return new JsRenderTemplate(element);
            };
            JsRenderTemplate.isLibraryAvailable = function () {
                return Coveo.Utils.exists(Coveo.$['views']);
            };
            JsRenderTemplate.mimeTypes = [
                'text/jsrender',
                'text/jsrender-template',
                'text/x-jsrender',
                'text/x-jsrender-template'
            ];
            return JsRenderTemplate;
        })();
        Ui.JsRenderTemplate = JsRenderTemplate;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var HandlebarsTemplate = (function () {
            function HandlebarsTemplate(element) {
                Coveo.Assert.check(HandlebarsTemplate.isLibraryAvailable(), 'The Handlebars library must be loaded within the page');
                Coveo.Assert.exists(element);
                this.logger = new Coveo.Logger(this);
                var templateString = Coveo.$(element).html();
                this.template = Handlebars.compile(templateString);
            }
            HandlebarsTemplate.prototype.instantiateToString = function (data) {
                return this.template(data);
            };
            HandlebarsTemplate.prototype.instantiateToElement = function (data) {
                var html = this.template(data);
                var element = Coveo.JQueryUtils.htmlToDom(html);
                this.logger.trace('Instantiated result template', data, element);
                return element;
            };
            HandlebarsTemplate.create = function (element) {
                Coveo.Assert.exists(element);
                return new HandlebarsTemplate(element);
            };
            HandlebarsTemplate.isLibraryAvailable = function () {
                return Coveo.Utils.exists(window['Handlebars']);
            };
            HandlebarsTemplate.mimeTypes = [
                'text/handlebars',
                'text/handlebars-template',
                'text/x-handlebars',
                'text/x-handlebars-template'
            ];
            return HandlebarsTemplate;
        })();
        Ui.HandlebarsTemplate = HandlebarsTemplate;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var TemplateCache = (function () {
            function TemplateCache() {
            }
            TemplateCache.registerTemplate = function (name, template) {
                Coveo.Assert.isNonEmptyString(name);
                Coveo.Assert.exists(template);
                TemplateCache.templates[name] = template;
            };
            TemplateCache.getTemplate = function (name) {
                Coveo.Assert.exists(TemplateCache.templates[name]);
                return TemplateCache.templates[name];
            };
            TemplateCache.getTemplateNames = function () {
                return Coveo._.keys(TemplateCache.templates);
            };
            TemplateCache.scanAndRegisterTemplates = function () {
                // Here we take care not to scan for templates for which the base library
                // is not available. Case in point: someone was using the JS UI on a page
                // that was also using Handlebars, but our code was initialized before
                // the Handlebars library (loaded through AMD).
                if (Ui.UnderscoreTemplate.isLibraryAvailable()) {
                    TemplateCache.scanAndRegisterUnderscoreTemplates();
                }
                if (Ui.JsRenderTemplate.isLibraryAvailable()) {
                    TemplateCache.scanAndRegisterJsRenderTemplates();
                    TemplateCache.scanAndRegisterJsonTemplates();
                }
                if (Ui.HandlebarsTemplate.isLibraryAvailable()) {
                    TemplateCache.scanAndRegisterHandlebarsTemplates();
                }
            };
            TemplateCache.scanAndRegisterUnderscoreTemplates = function () {
                Coveo._.each(Ui.UnderscoreTemplate.mimeTypes, function (type) {
                    Coveo.$("script[id][type='" + type + "']").each(function (index, elem) {
                        var template = new Ui.UnderscoreTemplate(elem);
                        TemplateCache.registerTemplate(Coveo.$(elem).attr('id'), function (data) { return template.instantiateToString(data); });
                    });
                });
            };
            TemplateCache.scanAndRegisterJsRenderTemplates = function () {
                Coveo._.each(Ui.JsRenderTemplate.mimeTypes, function (type) {
                    Coveo.$("script[id][type='" + type + "']").each(function (index, elem) {
                        var template = new Ui.JsRenderTemplate(elem);
                        TemplateCache.registerTemplate(Coveo.$(elem).attr('id'), function (data) { return template.instantiateToString(data); });
                    });
                });
            };
            TemplateCache.scanAndRegisterHandlebarsTemplates = function () {
                Coveo._.each(Ui.HandlebarsTemplate.mimeTypes, function (type) {
                    Coveo.$("script[id][type='" + type + "']").each(function (index, elem) {
                        var template = new Ui.HandlebarsTemplate(elem);
                        TemplateCache.registerTemplate(Coveo.$(elem).attr('id'), function (data) { return template.instantiateToString(data); });
                    });
                });
            };
            TemplateCache.scanAndRegisterJsonTemplates = function () {
                Coveo._.each(Ui.JsonTemplate.mimeTypes, function (type) {
                    Coveo.$("script[id][type='" + type + "']").each(function (index, elem) {
                        var template = new Ui.JsonTemplate(elem);
                        TemplateCache.registerTemplate(Coveo.$(elem).attr('id'), function (data) { return template.instantiateToString(data); });
                    });
                });
            };
            TemplateCache.templates = {};
            return TemplateCache;
        })();
        Ui.TemplateCache = TemplateCache;
        Coveo.$(function () {
            TemplateCache.scanAndRegisterTemplates();
        });
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var JsonTemplate = (function () {
            function JsonTemplate(template) {
                var jsonTemplate;
                if (Coveo.Utils.isHtmlElement(template)) {
                    Coveo.Assert.exists(template);
                    var templateString = Coveo.$(template).html();
                    if (Coveo.Utils.isNullOrEmptyString(templateString)) {
                        jsonTemplate = null;
                    }
                    else {
                        jsonTemplate = JSON.parse(templateString);
                    }
                }
                else if (template instanceof Object) {
                    jsonTemplate = template;
                }
                this.template = new Ui.JsRenderTemplate(Coveo.$(this.renderTemplate(jsonTemplate).result).get(0));
            }
            JsonTemplate.prototype.instantiateToString = function (data) {
                return this.template.instantiateToString(data);
            };
            JsonTemplate.prototype.instantiateToElement = function (data) {
                return this.template.instantiateToElement(data);
            };
            JsonTemplate.prototype.renderTemplate = function (data) {
                if (data == null) {
                    data = { type: 'list', containers: [], leftContainers: [], rightContainers: [] };
                }
                if (data.type == 'list') {
                    var result = '<script type="text/x-jsrender"><div class="item result">';
                    if (data.leftContainers && data.leftContainers.length > 0) {
                        result += '<div style="float: left;">' + this.renderContainers(data.leftContainers) + '</div>';
                    }
                    if (data.rightContainers && data.rightContainers.length > 0) {
                        result += '<div style="float: right;">' + this.renderContainers(data.rightContainers) + '</div>';
                    }
                    if (data.containers.length > 0) {
                        result += '<div style="overflow: hidden;">' + this.renderContainers(data.containers) + '</div>';
                    }
                    result += '</div></script>';
                    return { result: result };
                }
                else {
                    var header = '<thead><tr>';
                    var result = '<script type="text/x-jsrender"><tr class="item result">';
                    for (var i = 0; i < data.containers.length; i++) {
                        var container = data.containers[i];
                        var width = this.cleanWidth(container.settings['width']);
                        header += '<th width="' + width + '">' + this.plainText(container.settings['header']) + '</th>';
                        var contents = [];
                        for (var j = 0; j < container.contents.length; j++) {
                            contents.push(this.renderContent(container.contents[j]));
                        }
                        result += '<td width="' + width + '">' + contents.join(' ') + '</td>';
                    }
                    header += '</tr></thead>';
                    result += '</tr></script>';
                    return { header: header, result: result };
                }
            };
            JsonTemplate.prototype.renderContainers = function (containers) {
                var result = '';
                for (var i = 0; i < containers.length; i++) {
                    var container = containers[i];
                    var contents = [];
                    for (var j = 0; j < container.contents.length; j++) {
                        contents.push(this.renderContent(container.contents[j]));
                    }
                    result += '<div>' + contents.join(' ') + '</div>';
                }
                return result;
            };
            JsonTemplate.prototype.renderContent = function (content) {
                if (content.type == 'field') {
                    return this.renderField(content);
                }
                else if (content.type == 'code') {
                    return this.renderCode(content);
                }
                else if (content.type == 'link') {
                    return this.renderLink(content);
                }
                else if (content.type == 'thumbnail') {
                    return this.renderThumbnail(content);
                }
                else if (content.type == 'badge') {
                    return this.renderBadge(content);
                }
                else if (content.type == 'quickview') {
                    return this.renderQuickView(content);
                }
                else if (content.type == 'custom_component') {
                    return this.renderCustomComponent(content);
                }
                else if (content.type == 'field_table') {
                    return this.renderFieldTable(content);
                }
                return '';
            };
            JsonTemplate.prototype.renderField = function (data) {
                var content = '';
                var fieldName = this.cleanText(data.settings['name']);
                fieldName = this.lowercaseFirstLetter(fieldName);
                var container = 'span';
                var styleClass = fieldName.split('.');
                var attrs = {};
                var styles = {};
                switch (data.settings['renderAs']) {
                    case 'link':
                        var text = this.cleanText(data.settings['text']);
                        if (text == '') {
                            text = fieldName;
                        }
                        container = 'a';
                        attrs.href = '{{url:' + fieldName + '}}';
                        attrs['data-href'] = '{{>' + fieldName + '}}';
                        attrs.target = data.settings['sameTab'] != null && data.settings['sameTab'] == 'true' ? '_self' : '_blank';
                        var lowecasedText = this.lowercaseFirstLetter(text);
                        if (lowecasedText.indexOf('\'') >= 0) {
                            content = '{{>' + lowecasedText + '}}';
                        }
                        else {
                            content = '{{if ' + lowecasedText + 'Highlights}}{{:~highlight(' + lowecasedText + ', ' + lowecasedText + 'Highlights' + ')}}{{else}}{{>' + text + '}}{{/if}}';
                        }
                        styleClass.push('CoveoResultLink');
                        styleClass.push('coveo-link');
                        break;
                    case 'email':
                        if (data.settings['toHyperlinks'] == 'true') {
                            content = '{{:~email(' + fieldName + ')}}';
                        }
                        else {
                            content = '{{>' + fieldName + '}}';
                        }
                        styleClass.push('coveo-email');
                        break;
                    case 'date':
                        var format = data.settings['format'];
                        // Revise older format strings
                        if (format == 'dateToString') {
                            format = 'date';
                        }
                        if (format == 'timeToString') {
                            format = 'time';
                        }
                        if (format == 'dateTimeToString') {
                            format = 'dateTime';
                        }
                        if (format == 'emailDateTimeToString') {
                            format = 'emailDateTime';
                        }
                        if (format == null || (format != 'time' && format != 'dateTime' && format != 'emailDateTime')) {
                            format = 'date';
                        }
                        content = '{{>~' + format + '(' + fieldName + ')}}';
                        styleClass.push('coveo-date');
                        break;
                    default:
                        if (data.settings['emailList'] == 'true') {
                            content = '{{:~email(' + fieldName + ')}}';
                        }
                        else {
                            content = '{{if ' + fieldName + 'Highlights}}{{:~highlight(' + fieldName + ', ' + fieldName + 'Highlights' + ')}}{{else}}{{>' + fieldName + '}}{{/if}}';
                        }
                        break;
                }
                attrs['class'] = styleClass.join(' ');
                content = this.renderStyleSettings(data.settings, content, container, attrs);
                content = this.renderEllipsis(data.settings, content);
                if (data.settings['label'] != null && !data.settings['label'].match('^\\s*$')) {
                    content = '<span class="coveo-label">' + this.plainText(data.settings['label']) + '</span>' + content;
                }
                return '{{if ' + fieldName + '}}' + content + '{{/if}}';
            };
            JsonTemplate.prototype.renderEllipsis = function (settings, content) {
                if (settings['ellipsis'] != null && settings['ellipsis'] == 'true') {
                    return '<div class="coveo-ellipsis">' + content + '</div>';
                }
                return content;
            };
            JsonTemplate.prototype.renderStyleSettings = function (settings, content, container, attrs) {
                var styles = {};
                if (settings['color'] != null && settings['color'] != '') {
                    styles.color = this.cleanColor(settings['color']);
                }
                if (settings['bold'] != null && settings['bold'] == 'true') {
                    styles['font-weight'] = 'bold';
                }
                if (settings['italic'] != null && settings['italic'] == 'true') {
                    styles['font-style'] = 'italic';
                }
                if (settings['underline'] != null && settings['underline'] == 'true') {
                    styles['text-decoration'] = 'underline';
                }
                var attrsString = ' ';
                for (var key in attrs) {
                    attrsString += key + '="' + attrs[key] + '" ';
                }
                var stylesString = '';
                for (var key in styles) {
                    stylesString += key + ':' + styles[key] + ';';
                }
                return '<' + container + attrsString + 'style="' + stylesString + '">' + content + '</' + container + '>';
            };
            JsonTemplate.prototype.renderCustomComponent = function (data) {
                var dom = '{{if ' + this.jsRenderEncode(data.settings['condition']) + '}}';
                dom += '     <span class="' + this.jsRenderEncode(data.settings['component']) + '" href="javascript:void(0);"></span>';
                dom += '{{/if}}';
                return dom;
            };
            JsonTemplate.prototype.renderCode = function (data) {
                return '<span>{{html:' + this.jsRenderEncode(data.settings['value']) + '}}</span>';
            };
            JsonTemplate.prototype.renderLink = function (data) {
                var url = this.jsRenderEncode(data.settings['value']);
                var text = this.jsRenderEncode(data.settings['text']);
                if (text == null || text == '') {
                    text = url;
                }
                text = this.lowercaseFirstLetter(text);
                var target = data.settings['sameTab'] != null && data.settings['sameTab'] == 'true' ? '_self' : '_blank';
                var content;
                if (text.indexOf('\'') >= 0) {
                    content = '{{>' + text + '}}';
                }
                else {
                    content = '{{if ' + text + 'Highlights}}{{:~highlight(' + text + ', ' + text + 'Highlights' + ')}}{{else}}{{html:' + text + '}}{{/if}}';
                }
                return '<a href="{{url:' + url + '}}" data-href="{{>' + url + '}}" target="' + target + '">' + content + '</a>';
            };
            JsonTemplate.prototype.renderThumbnail = function (data) {
                var url = this.jsRenderEncode(data.settings['url']);
                return '<img class="coveo-sf-thumb" src="{{url:' + url + '}}" style="height: ' + data.settings['height'] + 'px"/>';
            };
            JsonTemplate.prototype.renderBadge = function (data) {
                var value = this.jsRenderEncode(data.settings['fieldName']);
                var content = '{{html:' + value + '}}';
                content = this.renderStyleSettings(data.settings, content, 'span', { 'class': 'coveo-badge' });
                return '{{if ' + value + ' != undefined}}' + content + '{{/if}}';
            };
            JsonTemplate.prototype.renderQuickView = function (data) {
                return '<div class="CoveoQuickView" data-title="{{html:' + this.jsRenderEncode(data.settings['title']) + '}}"><div class="CoveoQuickViewDocument"></div></div>';
            };
            JsonTemplate.prototype.renderFieldTable = function (data) {
                var _this = this;
                var rows;
                try {
                    rows = JSON.parse(data.settings['rows']);
                }
                catch (e) {
                    rows = [];
                }
                return '<table class="CoveoFieldTable">' + Coveo._.map(rows, function (row) {
                    var attrs = [];
                    attrs.push('data-field="' + _this.jsRenderEncode(row.field) + '"');
                    if (row.caption) {
                        attrs.push('data-caption="' + _this.jsRenderEncode(row.caption) + '"');
                    }
                    return '<tr ' + attrs.join(' ') + '></tr>';
                }).join('') + '</div>';
            };
            JsonTemplate.prototype.cleanText = function (text) {
                if (text == null) {
                    return '';
                }
                return text.replace(/[^A-Za-z0-9_\.]/g, '');
            };
            JsonTemplate.prototype.lowercaseFirstLetter = function (text) {
                if (text && text.length > 0) {
                    return text.charAt(0).toLowerCase() + text.slice(1);
                }
                return '';
            };
            JsonTemplate.prototype.cleanColor = function (color) {
                if (color == null) {
                    return '';
                }
                if (!color.match(/^#[0-9A-Fa-f]{3,6}$/) && !color.match(/^[a-z]+$/)) {
                    return '';
                }
                return color;
            };
            JsonTemplate.prototype.cleanWidth = function (width) {
                if (width == null) {
                    return '';
                }
                if (!width.match(/^[0-9]{1,2}?%|[0-9]+$/)) {
                    return '';
                }
                return width;
            };
            JsonTemplate.prototype.plainText = function (text) {
                return this.jsRenderEncode(this.htmlEncode(text));
            };
            JsonTemplate.prototype.htmlEncode = function (text) {
                if (text == null) {
                    return '';
                }
                return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
                ;
            };
            JsonTemplate.prototype.jsRenderEncode = function (text) {
                if (text == null) {
                    return '';
                }
                // put a invisible charater between the }}
                return text.replace(/\}\}/g, '}\u0081}');
            };
            JsonTemplate.create = function (element) {
                Coveo.Assert.exists(element);
                return new JsonTemplate(element);
            };
            JsonTemplate.isLibraryAvailable = function () {
                return Coveo.Utils.exists(window['TemplateEditorUtils']) && Ui.JsRenderTemplate.isLibraryAvailable();
            };
            JsonTemplate.mimeTypes = [
                'text/json-template'
            ];
            return JsonTemplate;
        })();
        Ui.JsonTemplate = JsonTemplate;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var TemplateHelpers = (function () {
            function TemplateHelpers() {
            }
            TemplateHelpers.registerTemplateHelper = function (name, helper) {
                Coveo.Assert.isNonEmptyString(name);
                Coveo.Assert.exists(helper);
                if (Ui.UnderscoreTemplate.isLibraryAvailable()) {
                    TemplateHelpers.registerTemplateHelperInUnderscore(name, helper);
                }
                if (Ui.JsRenderTemplate.isLibraryAvailable()) {
                    TemplateHelpers.registerTemplateHelperInJsRender(name, helper);
                }
                if (Ui.HandlebarsTemplate.isLibraryAvailable()) {
                    TemplateHelpers.registerTemplateHelperInHandlebars(name, helper);
                }
                TemplateHelpers.helpers[name] = helper;
            };
            TemplateHelpers.getHelper = function (name) {
                return TemplateHelpers.helpers[name];
            };
            TemplateHelpers.registerTemplateHelperInJsRender = function (name, helper) {
                Coveo.Assert.isNonEmptyString(name);
                Coveo.Assert.exists(helper);
                // We must arrange for our helpers to be called with the data as 'this'
                var dict = {};
                dict[name] = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i - 0] = arguments[_i];
                    }
                    return helper.apply(this.data, args);
                };
                Coveo.$.views.helpers(dict);
            };
            TemplateHelpers.registerTemplateHelperInHandlebars = function (name, helper) {
                Coveo.Assert.isNonEmptyString(name);
                Coveo.Assert.exists(helper);
                Coveo.Assert.check(Ui.HandlebarsTemplate.isLibraryAvailable());
                Handlebars.registerHelper(name, function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i - 0] = arguments[_i];
                    }
                    // If the last argument is a "hash", we assume it's an option dictionary
                    // and we move the hash part to the top-level.
                    var lastArgument = args[args.length - 1];
                    if (Coveo._.isObject(lastArgument) && Coveo.Utils.exists(lastArgument.hash)) {
                        args[args.length - 1] = lastArgument.hash;
                    }
                    // We must use SafeString to prevent Handlebars from escaping the return value of our helpers.
                    return new Handlebars.SafeString(helper.apply(this, args));
                });
            };
            TemplateHelpers.registerTemplateHelperInUnderscore = function (name, helper) {
                Coveo.Assert.isNonEmptyString(name);
                Coveo.Assert.exists(helper);
                Coveo.Assert.check(Ui.UnderscoreTemplate.isLibraryAvailable());
                Ui.UnderscoreTemplate.registerTemplateHelper(name, helper);
            };
            TemplateHelpers.helpers = {};
            return TemplateHelpers;
        })();
        Ui.TemplateHelpers = TemplateHelpers;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var CoveoJQuery = (function () {
            function CoveoJQuery() {
            }
            CoveoJQuery.registerDefaultOptions = function (element, options) {
                var existing = Coveo.$(element).data('CoveoDefaultOptions') || {};
                var updated = Coveo.$.extend(true, {}, existing, options);
                Coveo.$(element).data('CoveoDefaultOptions', updated);
            };
            CoveoJQuery.resolveDefaultOptions = function (element, options) {
                var optionsForThisElement = Coveo.$(element).data('CoveoDefaultOptions');
                var optionsSoFar;
                if (Coveo.Utils.exists(optionsForThisElement)) {
                    optionsSoFar = Coveo.$.extend(true, {}, optionsForThisElement, options);
                }
                else {
                    optionsSoFar = options;
                }
                if (element.parentElement) {
                    return CoveoJQuery.resolveDefaultOptions(element.parentElement, optionsSoFar);
                }
                else {
                    return optionsSoFar;
                }
            };
            CoveoJQuery.registerAutoCreateComponent = function (componentClass) {
                Coveo.Assert.exists(componentClass);
                Coveo.Assert.exists(componentClass.ID);
                Coveo.Assert.doesNotExists(CoveoJQuery.autoCreateComponents[componentClass.ID]);
                Coveo.Assert.doesNotExists(CoveoJQuery.namedMethods[componentClass.ID]);
                CoveoJQuery.autoCreateComponents[componentClass.ID] = componentClass;
            };
            CoveoJQuery.isComponentClassIdRegistered = function (componentClassId) {
                return Coveo.Utils.exists(CoveoJQuery.autoCreateComponents[componentClassId]);
            };
            CoveoJQuery.getListOfRegistredComponents = function () {
                return Coveo._.keys(CoveoJQuery.autoCreateComponents);
            };
            CoveoJQuery.getRegistredComponent = function (name) {
                return CoveoJQuery.autoCreateComponents[name];
            };
            CoveoJQuery.initializeSearchInterface = function (element, options) {
                Coveo.Assert.exists(element);
                this.logger.info("Internal Coveo JQuery version", Coveo.$.fn.jquery);
                if (Coveo.DeviceUtils.isIE8or9())
                    Coveo.$('html').addClass('ie8or9');
                options = CoveoJQuery.resolveDefaultOptions(element, options);
                CoveoJQuery.performInitFunctionsOption(options, Coveo.Events.InitializationEvents.beforeInitialization);
                Coveo.$(element).trigger(Coveo.Events.InitializationEvents.beforeInitialization);
                CoveoJQuery.initComponents(element, options);
                CoveoJQuery.initExternalComponents(element, options);
                CoveoJQuery.performInitFunctionsOption(options, Coveo.Events.InitializationEvents.afterComponentsInitialization);
                Coveo.$(element).trigger(Coveo.Events.InitializationEvents.afterComponentsInitialization);
                Coveo.$(element).trigger(Coveo.Events.InitializationEvents.restoreHistoryState);
                CoveoJQuery.performInitFunctionsOption(options, Coveo.Events.InitializationEvents.afterInitialization);
                Coveo.$(element).trigger(Coveo.Events.InitializationEvents.afterInitialization);
                var searchInterface = Ui.Component.get(element, Ui.SearchInterface);
                // Elements that have the coveo-hide-until-loaded class are hidden by default.
                // Now that we're loaded (and before the first query returns), we can remove
                // the class. Also, we add a class that gives the opportunity for an animation
                // to apply at startup, such as a fade-in that comes in by default.
                Coveo.$('.coveo-hide-until-loaded').removeClass('coveo-hide-until-loaded').addClass('coveo-show-after-loaded');
                if (searchInterface.options.autoTriggerQuery) {
                    Ui.Component.get(element, Coveo.Controllers.QueryController).executeQuery();
                }
            };
            CoveoJQuery.initializeSearchInterfaceForSearchBox = function (element, searchPageUri, options) {
                Coveo.Assert.isNonEmptyString(searchPageUri);
                var searchInterfaceOptions = {};
                searchInterfaceOptions.searchPageUri = searchPageUri;
                searchInterfaceOptions.autoTriggerQuery = false;
                searchInterfaceOptions.hideUntilFirstQuery = false;
                searchInterfaceOptions.enableHistory = false;
                options = Coveo._.extend({}, options, { SearchInterface: searchInterfaceOptions });
                CoveoJQuery.initializeSearchInterface(element, options);
            };
            CoveoJQuery.performInitFunctionsOption = function (options, event) {
                if (Coveo.Utils.exists(options)) {
                    CoveoJQuery.performFunctions(options[event]);
                }
            };
            CoveoJQuery.performPreInitFunctions = function (options) {
                if (Coveo.Utils.exists(options)) {
                    CoveoJQuery.performFunctions(options[Coveo.Events.InitializationEvents.beforeInitialization]);
                }
            };
            CoveoJQuery.performPostInitFunction = function (options) {
                if (Coveo.Utils.exists(options)) {
                    CoveoJQuery.performFunctions(options[Coveo.Events.InitializationEvents.afterInitialization]);
                }
            };
            CoveoJQuery.performFunctions = function (option) {
                if (Coveo.Utils.exists(option)) {
                    Coveo._.each(option, function (func) {
                        if (typeof func == "function") {
                            func();
                        }
                    });
                }
            };
            CoveoJQuery.initComponents = function (element, options) {
                if (options === void 0) { options = {}; }
                // Arrange for init options to be remembered by SearchInterface
                options.SearchInterface = options.SearchInterface || {};
                (options.SearchInterface).initOptions = options;
                var searchInterface = new Ui.SearchInterface(element, options.SearchInterface, options.Analytics);
                var initParameters = Coveo.$.extend({}, { options: options }, searchInterface.getBindings());
                CoveoJQuery.automaticallyCreateComponentsInside(element, initParameters);
            };
            CoveoJQuery.initExternalComponents = function (element, options) {
                if (options && options["externalComponents"]) {
                    var searchInterface = Coveo.$(element).coveo(Coveo.Ui.SearchInterface);
                    var queryStateModel = Coveo.$(element).coveo(Coveo.Models.QueryStateModel);
                    var componentStateModel = Coveo.$(element).coveo(Coveo.Models.ComponentStateModel);
                    var queryController = Coveo.$(element).coveo(Coveo.Controllers.QueryController);
                    var componentOptionsModel = Coveo.$(element).coveo(Coveo.Models.ComponentOptionsModel);
                    var usageAnalytics = searchInterface.usageAnalytics;
                    Coveo.Assert.exists(searchInterface);
                    Coveo.Assert.exists(queryStateModel);
                    Coveo.Assert.exists(queryController);
                    Coveo.Assert.exists(componentStateModel);
                    Coveo.Assert.exists(usageAnalytics);
                    var initParameters = {
                        options: options,
                        searchInterface: searchInterface,
                        queryStateModel: queryStateModel,
                        queryController: queryController,
                        usageAnalytics: usageAnalytics,
                        componentStateModel: componentStateModel,
                        componentOptionsModel: componentOptionsModel,
                        root: element
                    };
                    Coveo._.each(options["externalComponents"], function (externalComponent) {
                        var elementToInstantiate = externalComponent;
                        if (elementToInstantiate instanceof Coveo.$) {
                            elementToInstantiate = Coveo.$(elementToInstantiate).get(0);
                        }
                        if (Coveo.Utils.isHtmlElement(elementToInstantiate)) {
                            CoveoJQuery.automaticallyCreateComponentsInside(elementToInstantiate, initParameters);
                        }
                    });
                }
            };
            CoveoJQuery.automaticallyCreateComponentsInside = function (element, initParameters, ignore) {
                Coveo.Assert.exists(element);
                var codeToExecute = [];
                for (var componentClassId in CoveoJQuery.autoCreateComponents) {
                    if (!Coveo._.contains(ignore, componentClassId)) {
                        var componentClass = CoveoJQuery.autoCreateComponents[componentClassId];
                        var classname = Ui.Component.computeCssClassNameForType(componentClass.ID);
                        var elements = Coveo.$(element).find('.' + classname);
                        if (Coveo.$(element).hasClass(classname)) {
                            elements = elements.add(element);
                        }
                        if (elements.length != 0) {
                            // Queue the code that will scan the now resolved selector to after we've
                            // finished evaluating all selectors. This ensures that if a component
                            // constructor adds child components under his tags, those won't get auto-
                            // initialize by this invocation of this method. Components inserting child
                            // components are responsible of invoking this method again if they want
                            // child components to be auto-initialized.
                            //
                            // Explanation: If we don't do that, child components for which selector have
                            // already been evaluated won't be initialized, whereas those that are next
                            // in the list will be.
                            //
                            // Oh, and the call to a separate function is to work around JavaScript
                            // shocking lack of block scope. One day it'll support the let keyword.
                            codeToExecute.push(CoveoJQuery.createFunctionThatInitializesComponentOnElements(elements, componentClassId, componentClass, initParameters));
                        }
                    }
                }
                // Now that all selectors are executed, let's really initialize the components.
                Coveo._.each(codeToExecute, function (code) { return code(); });
            };
            CoveoJQuery.createFunctionThatInitializesComponentOnElements = function (elements, componentClassId, componentClass, initParameters) {
                return function () {
                    elements.each(function (index, matchingElement) {
                        // If options were provided, lookup options for this component class and
                        // also for the element id. Merge them and pass those to the factory method.
                        var optionsToUse = undefined;
                        if (Coveo.Utils.exists(initParameters.options)) {
                            var optionsForComponentClass = initParameters.options[componentClassId];
                            var optionsForElementId = initParameters.options[matchingElement.id];
                            var initOptions = initParameters.options["initOptions"] ? initParameters.options["initOptions"][componentClassId] : {};
                            optionsToUse = Coveo.$.extend({}, optionsForComponentClass, optionsForElementId, initOptions);
                        }
                        var initParamToUse = Coveo.$.extend({}, initParameters, { options: optionsToUse });
                        CoveoJQuery.createComponentOfThisClassOnElement(componentClass.ID, matchingElement, initParamToUse);
                    });
                };
            };
            CoveoJQuery.createComponentOfThisClassOnElement = function (componentClassId, element, initParameters) {
                Coveo.Assert.isNonEmptyString(componentClassId);
                Coveo.Assert.exists(element);
                var componentClass = CoveoJQuery.autoCreateComponents[componentClassId];
                Coveo.Assert.exists(componentClass);
                var bindings = {};
                var options = {};
                var result = undefined;
                if (initParameters != undefined) {
                    bindings = {
                        queryController: initParameters.queryController,
                        queryStateModel: initParameters.queryStateModel,
                        componentStateModel: initParameters.componentStateModel,
                        root: initParameters.root,
                        searchInterface: initParameters.searchInterface,
                        usageAnalytics: initParameters.usageAnalytics,
                        componentOptionsModel: initParameters.componentOptionsModel
                    };
                    options = initParameters.options;
                    result = initParameters.result;
                }
                CoveoJQuery.logger.trace('Creating component of class ' + componentClassId, element, options);
                return new componentClass(element, options, bindings, result);
            };
            CoveoJQuery.registerNamedMethod = function (methodName, handler) {
                Coveo.Assert.isNonEmptyString(methodName);
                Coveo.Assert.doesNotExists(CoveoJQuery.autoCreateComponents[methodName]);
                Coveo.Assert.doesNotExists(CoveoJQuery.namedMethods[methodName]);
                Coveo.Assert.exists(handler);
                CoveoJQuery.namedMethods[methodName] = handler;
            };
            CoveoJQuery.isNamedMethodRegistered = function (methodName) {
                return Coveo.Utils.exists(CoveoJQuery.namedMethods[methodName]);
            };
            CoveoJQuery.dispatchNamedMethodCall = function (methodName, element, args) {
                Coveo.Assert.isNonEmptyString(methodName);
                Coveo.Assert.exists(element);
                var namedMethodHandler = CoveoJQuery.namedMethods[methodName];
                Coveo.Assert.exists(namedMethodHandler);
                CoveoJQuery.logger.trace('Dispatching named method call of ' + methodName, element, args);
                return namedMethodHandler.apply(null, [element].concat(args));
            };
            CoveoJQuery.isThereASingleComponentBoundToThisElement = function (element) {
                Coveo.Assert.exists(element);
                return Coveo.Utils.exists(Ui.Component.get(element));
            };
            CoveoJQuery.dispatchMethodCallOnBoundComponent = function (methodName, element, args) {
                Coveo.Assert.isNonEmptyString(methodName);
                Coveo.Assert.exists(element);
                var boundComponent = Ui.Component.get(element);
                Coveo.Assert.exists(boundComponent);
                var method = boundComponent[methodName];
                if (Coveo.Utils.exists(method)) {
                    return method.apply(boundComponent, args);
                }
                else {
                    Coveo.Assert.fail('No method named ' + methodName + ' exist on component ' + boundComponent.type);
                }
            };
            CoveoJQuery.dispatchNamedMethodCallOrComponentCreation = function (token, element, args) {
                Coveo.Assert.isNonEmptyString(token);
                Coveo.Assert.exists(element);
                if (CoveoJQuery.isNamedMethodRegistered(token)) {
                    return CoveoJQuery.dispatchNamedMethodCall(token, element, args);
                }
                else if (CoveoJQuery.isComponentClassIdRegistered(token)) {
                    return CoveoJQuery.createComponentOfThisClassOnElement(token, element, args[0]);
                }
                else if (CoveoJQuery.isThereASingleComponentBoundToThisElement(element)) {
                    return CoveoJQuery.dispatchMethodCallOnBoundComponent(token, element, args);
                }
                else {
                    Coveo.Assert.fail('No method or component named ' + token + ' are registered.');
                }
            };
            CoveoJQuery.monkeyPatchComponentMethod = function (methodName, element, handler) {
                Coveo.Assert.isNonEmptyString(methodName);
                Coveo.Assert.exists(handler);
                var componentClass;
                if (methodName.indexOf('.') > 0) {
                    var splitArg = methodName.split(".");
                    Coveo.Assert.check(splitArg.length == 2, "Invalid method name, correct syntax is CoveoComponent.methodName.");
                    componentClass = splitArg[0];
                    methodName = splitArg[1];
                }
                var boundComponent = Ui.Component.get(element, componentClass);
                Coveo.Assert.exists(boundComponent);
                Coveo.Assert.exists(boundComponent[methodName]);
                var originalMethodName = '__' + methodName;
                if (!Coveo.Utils.exists(boundComponent[originalMethodName])) {
                    boundComponent[originalMethodName] = boundComponent[methodName];
                }
                boundComponent[methodName] = handler;
            };
            CoveoJQuery.noConflict = function () {
                Coveo.$ = jQuery.noConflict(true);
                window["$"].fn.coveo = Coveo.$.fn.coveo;
            };
            CoveoJQuery.logger = new Coveo.Logger('JQuery');
            CoveoJQuery.autoCreateComponents = {};
            CoveoJQuery.namedMethods = {};
            return CoveoJQuery;
        })();
        Ui.CoveoJQuery = CoveoJQuery;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
$.fn.coveo = function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i - 0] = arguments[_i];
    }
    var returnValue;
    this.each(function (index, element) {
        var returnValueForThisElement;
        if (_.isString(args[0])) {
            var token = args[0];
            returnValueForThisElement = Coveo.Ui.CoveoJQuery.dispatchNamedMethodCallOrComponentCreation(token, element, args.slice(1));
        }
        else {
            // Invoking with no method name is a shortcut for the 'get' method (from Component).
            returnValueForThisElement = Coveo.Ui.CoveoJQuery.dispatchNamedMethodCall('get', element, args);
        }
        // Keep only the first return value we encounter
        returnValue = returnValue || returnValueForThisElement;
    });
    return returnValue;
};
//http://stackoverflow.com/a/2897510
Coveo.$.fn.getCursorPosition = function () {
    var input = this.get(0);
    if (!input)
        return; // No (input) element found
    if ('selectionStart' in input) {
        // Standard-compliant browsers
        return input.selectionStart;
    }
    else if (document.selection) {
        // IE
        input.focus();
        var sel = document.selection.createRange();
        var selLen = document.selection.createRange().text.length;
        sel.moveStart('character', -input.value.length);
        return sel.text.length - selLen;
    }
};
Coveo.Ui.CoveoJQuery.registerNamedMethod('options', function (element, options) {
    Coveo.Ui.CoveoJQuery.registerDefaultOptions(element, options);
});
Coveo.Ui.CoveoJQuery.registerNamedMethod('init', function (element, options) {
    Coveo.Ui.CoveoJQuery.initializeSearchInterface(element, options);
});
Coveo.Ui.CoveoJQuery.registerNamedMethod('initSearchBox', function (element, searchPageUri, options) {
    Coveo.Ui.CoveoJQuery.initializeSearchInterfaceForSearchBox(element, searchPageUri, options);
});
Coveo.Ui.CoveoJQuery.registerNamedMethod('patch', function (element, methodName, handler) {
    Coveo.Ui.CoveoJQuery.monkeyPatchComponentMethod(methodName, element, handler);
});
Coveo.Ui.CoveoJQuery.registerNamedMethod('noConflict', function () {
    Coveo.Ui.CoveoJQuery.noConflict();
});
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Component = (function () {
            function Component(element, type, bindings) {
                var _this = this;
                if (bindings === void 0) { bindings = {}; }
                this.element = element;
                this.type = type;
                this.disabled = false;
                this.bind = new Ui.ComponentEvents(this);
                Coveo.Assert.exists(element);
                Coveo.Assert.isNonEmptyString(type);
                Component.bindComponentToElement(this.element, this);
                this.logger = new Coveo.Logger(this);
                this.root = bindings.root || this.resolveRoot();
                this.queryStateModel = bindings.queryStateModel || this.resolveQueryStateModel();
                this.componentStateModel = bindings.componentStateModel || this.resolveComponentStateModel();
                this.queryController = bindings.queryController || this.resolveQueryController();
                this.searchInterface = bindings.searchInterface || this.resolveSearchInterface();
                this.usageAnalytics = bindings.usageAnalytics || this.resolveUA();
                this.componentOptionsModel = bindings.componentOptionsModel || this.resolveComponentOptionsModel();
                this.ensureDom = Coveo._.once(function () { return _this.createDom(); });
                if (this.searchInterface != null) {
                    this.searchInterface.attachComponent(type, this);
                }
            }
            Component.prototype.getBindings = function () {
                return {
                    root: this.root,
                    queryStateModel: this.queryStateModel,
                    queryController: this.queryController,
                    searchInterface: this.searchInterface,
                    componentStateModel: this.componentStateModel,
                    componentOptionsModel: this.componentOptionsModel,
                    usageAnalytics: this.usageAnalytics
                };
            };
            Component.prototype.enable = function () {
                this.disabled = false;
            };
            Component.prototype.disable = function () {
                this.disabled = true;
            };
            Component.prototype.createDom = function () {
                // By default we do nothing
            };
            Component.prototype.resolveSearchInterface = function () {
                return Component.resolveBinding(this.element, Ui.SearchInterface);
            };
            Component.prototype.resolveRoot = function (defaultValue) {
                var resolvedSearchInterface = Component.resolveBinding(this.element, Ui.SearchInterface);
                return resolvedSearchInterface ? resolvedSearchInterface.element : defaultValue;
            };
            Component.prototype.resolveQueryController = function (defaultValue) {
                return Component.resolveBinding(this.element, Coveo.Controllers.QueryController) || defaultValue;
            };
            Component.prototype.resolveComponentStateModel = function (defaultValue) {
                return Component.resolveBinding(this.element, Coveo.Models.ComponentStateModel) || defaultValue;
            };
            Component.prototype.resolveQueryStateModel = function (defaultValue) {
                return Component.resolveBinding(this.element, Coveo.Models.QueryStateModel) || defaultValue;
            };
            Component.prototype.resolveComponentOptionsModel = function (defaultValue) {
                return Component.resolveBinding(this.element, Coveo.Models.ComponentOptionsModel) || defaultValue;
            };
            Component.prototype.resolveUA = function () {
                var searchInterface = this.resolveSearchInterface();
                return (searchInterface && searchInterface.usageAnalytics) ? searchInterface.usageAnalytics : new Ui.NoopAnalyticsClient();
            };
            Component.prototype.resolveResult = function () {
                // TODO: We need more generic binding but that'll do for now
                var resultElement = Coveo.$(this.element).closest('.CoveoResult');
                Coveo.Assert.check(resultElement.length == 1);
                return resultElement.get(0)['CoveoResult'];
            };
            Component.prototype.isInstanceOf = function (component) {
                return Component.getComponentRef(component) && this instanceof Coveo.Ui[component];
            };
            Component.getComponentRef = function (component) {
                return Coveo.Ui[component];
            };
            Component.get = function (element, componentClass, noThrow) {
                Coveo.Assert.exists(element);
                if (Coveo._.isString(componentClass)) {
                    return element[Component.computeMemberNameForType(componentClass)];
                }
                else if (Coveo.Utils.exists(componentClass)) {
                    Coveo.Assert.exists(componentClass.ID);
                    return element[Component.computeMemberNameForType(componentClass.ID)];
                }
                else {
                    // No class specified, but we support returning the bound component
                    // if there is exactly one.
                    var boundComponents = Component.getBoundComponentsForElement(element);
                    if (!noThrow) {
                        Coveo.Assert.check(boundComponents.length <= 1, 'More than one component is bound to this element. You need to specify the component type.');
                    }
                    return boundComponents[0];
                }
            };
            Component.bindComponentToElement = function (element, component) {
                Coveo.Assert.exists(element);
                Coveo.Assert.exists(component);
                Coveo.Assert.isNonEmptyString(component.type);
                element[Component.computeMemberNameForType(component.type)] = component;
                Coveo.$(element).addClass(Component.computeCssClassNameForType(component.type));
                Component.getBoundComponentsForElement(element).push(component);
            };
            Component.bindResultToElement = function (element, result) {
                Coveo.Assert.exists(element);
                Coveo.Assert.exists(result);
                Coveo.$(element).addClass('CoveoResult');
                element['CoveoResult'] = result;
            };
            Component.resolveBinding = function (element, componentClass) {
                Coveo.Assert.exists(element);
                Coveo.Assert.exists(componentClass);
                Coveo.Assert.exists(componentClass.ID);
                var foundElement = Coveo.$(element).closest('.' + Component.computeCssClassNameForType(componentClass.ID));
                if (foundElement.length == 0) {
                    return undefined;
                }
                return foundElement.get(0)[Component.computeMemberNameForType(componentClass.ID)];
            };
            Component.computeCssClassNameForType = function (type) {
                Coveo.Assert.isNonEmptyString(type);
                return 'Coveo' + type;
            };
            Component.computeSelectorForType = function (type) {
                Coveo.Assert.isNonEmptyString(type);
                return '.' + Component.computeCssClassNameForType(type);
            };
            Component.computeMemberNameForType = function (type) {
                Coveo.Assert.isNonEmptyString(type);
                return 'Coveo' + type;
            };
            Component.pointElementsToDummyForm = function (selector) {
                selector.add(selector.find('*')).filter('input').attr('form', 'coveo-dummy-form');
            };
            Component.getBoundComponentsForElement = function (element) {
                Coveo.Assert.exists(element);
                if (element.CoveoBoundComponents == null) {
                    element.CoveoBoundComponents = [];
                }
                return element.CoveoBoundComponents;
            };
            return Component;
        })();
        Ui.Component = Component;
        Ui.CoveoJQuery.registerNamedMethod('get', function (element, componentClass) {
            Coveo.Assert.exists(element);
            return Component.get(element, componentClass);
        });
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ComponentEvents = (function () {
            function ComponentEvents(owner) {
                this.owner = owner;
                Coveo.Assert.exists(owner);
            }
            ComponentEvents.prototype.on = function (selector, event, handler) {
                selector.on(event, this.wrapToCallIfEnabled(handler));
            };
            ComponentEvents.prototype.onRoot = function (event, handler) {
                this.on(Coveo.$(this.owner.root), event, handler);
            };
            ComponentEvents.prototype.fastClick = function (selector, handler) {
                selector.fastClick(this.wrapToCallIfEnabled(handler));
            };
            ComponentEvents.prototype.trigger = function (selector, event, args) {
                this.wrapToCallIfEnabled(function () {
                    selector.trigger(event, args);
                });
            };
            ComponentEvents.prototype.wrapToCallIfEnabled = function (func) {
                var _this = this;
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i - 0] = arguments[_i];
                    }
                    if (!_this.owner.disabled) {
                        return func.apply(_this.owner, args);
                    }
                };
            };
            return ComponentEvents;
        })();
        Ui.ComponentEvents = ComponentEvents;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ComponentOptions;
        (function (ComponentOptions) {
            (function (Type) {
                Type[Type["BOOLEAN"] = 0] = "BOOLEAN";
                Type[Type["NUMBER"] = 1] = "NUMBER";
                Type[Type["STRING"] = 2] = "STRING";
                Type[Type["LOCALIZED_STRING"] = 3] = "LOCALIZED_STRING";
                Type[Type["LIST"] = 4] = "LIST";
                Type[Type["SELECTOR"] = 5] = "SELECTOR";
                Type[Type["CHILD_HTML_ELEMENT"] = 6] = "CHILD_HTML_ELEMENT";
                Type[Type["TEMPLATE"] = 7] = "TEMPLATE";
                Type[Type["FIELD"] = 8] = "FIELD";
                Type[Type["ICON"] = 9] = "ICON";
                Type[Type["OBJECT"] = 10] = "OBJECT";
                Type[Type["NONE"] = 11] = "NONE";
            })(ComponentOptions.Type || (ComponentOptions.Type = {}));
            var Type = ComponentOptions.Type;
            function buildBooleanOption(optionArgs) {
                return buildOption(0 /* BOOLEAN */, loadBooleanOption, optionArgs);
            }
            ComponentOptions.buildBooleanOption = buildBooleanOption;
            function buildNumberOption(optionArgs) {
                return buildOption(1 /* NUMBER */, loadNumberOption, optionArgs);
            }
            ComponentOptions.buildNumberOption = buildNumberOption;
            function buildStringOption(optionArgs) {
                return buildOption(2 /* STRING */, loadStringOption, optionArgs);
            }
            ComponentOptions.buildStringOption = buildStringOption;
            function buildIconOption(optionArgs) {
                return buildOption(9 /* ICON */, loadStringOption, optionArgs);
            }
            ComponentOptions.buildIconOption = buildIconOption;
            function buildLocalizedStringOption(optionArgs) {
                return buildOption(3 /* LOCALIZED_STRING */, loadLocalizedStringOption, optionArgs);
            }
            ComponentOptions.buildLocalizedStringOption = buildLocalizedStringOption;
            function buildFieldOption(optionArgs) {
                return buildOption(8 /* FIELD */, loadFieldOption, optionArgs);
            }
            ComponentOptions.buildFieldOption = buildFieldOption;
            function buildListOption(optionArgs) {
                return buildOption(4 /* LIST */, loadListOption, optionArgs);
            }
            ComponentOptions.buildListOption = buildListOption;
            function buildSelectorOption(optionArgs) {
                return buildOption(5 /* SELECTOR */, loadSelectorOption, optionArgs);
            }
            ComponentOptions.buildSelectorOption = buildSelectorOption;
            function buildChildHtmlElementOption(optionArgs) {
                return buildOption(6 /* CHILD_HTML_ELEMENT */, loadChildHtmlElementOption, optionArgs);
            }
            ComponentOptions.buildChildHtmlElementOption = buildChildHtmlElementOption;
            function buildTemplateOption(optionArgs) {
                return buildOption(7 /* TEMPLATE */, loadTemplateOption, optionArgs);
            }
            ComponentOptions.buildTemplateOption = buildTemplateOption;
            function buildCustomOption(converter, optionArgs) {
                var loadOption = function (element, name, option) {
                    var stringvalue = loadStringOption(element, name, option);
                    return converter(stringvalue);
                };
                return buildOption(2 /* STRING */, loadOption, optionArgs);
            }
            ComponentOptions.buildCustomOption = buildCustomOption;
            function buildCustomListOption(converter, optionArgs) {
                var loadOption = function (element, name, option) {
                    var stringvalue = loadListOption(element, name, option);
                    return converter(stringvalue);
                };
                return buildOption(4 /* LIST */, loadOption, optionArgs);
            }
            ComponentOptions.buildCustomListOption = buildCustomListOption;
            function buildObjectOption(optionArgs) {
                var loadOption = function (element, name, option) {
                    var keys = Coveo._.keys(optionArgs.subOptions);
                    var scopedOptions = {};
                    var scopedValues = {};
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        var scopedkey = name + key.substr(0, 1).toUpperCase() + key.substr(1);
                        scopedOptions[scopedkey] = optionArgs.subOptions[key];
                    }
                    initOptions(element, scopedOptions, scopedValues);
                    var resultValues = {};
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        var scopedkey = name + key.substr(0, 1).toUpperCase() + key.substr(1);
                        if (scopedValues[scopedkey] != null) {
                            resultValues[key] = scopedValues[scopedkey];
                        }
                    }
                    return Coveo._.keys(resultValues).length > 0 ? resultValues : null;
                };
                return buildOption(10 /* OBJECT */, loadOption, optionArgs);
            }
            ComponentOptions.buildObjectOption = buildObjectOption;
            function buildOption(type, load, optionArg) {
                if (optionArg === void 0) { optionArg = {}; }
                var option = optionArg;
                option.type = type;
                option.load = load;
                return option;
            }
            ComponentOptions.buildOption = buildOption;
            function attrNameFromName(name, optionArgs) {
                if (optionArgs.attrName) {
                    return optionArgs.attrName;
                }
                return 'data-' + name.replace(/([A-Z])/g, "-$1").toLowerCase();
            }
            ComponentOptions.attrNameFromName = attrNameFromName;
            function nameFromattrName(attrName) {
                var parts = attrName.split('-');
                parts.shift();
                for (var i = 1; i < parts.length; i++) {
                    parts[i] = parts[i].substr(0, 1).toUpperCase() + parts[i].substr(1);
                }
                return parts.join('');
            }
            ComponentOptions.nameFromattrName = nameFromattrName;
            function initComponentOptions(element, component, values) {
                return initOptions(element, component.options, values);
            }
            ComponentOptions.initComponentOptions = initComponentOptions;
            function initOptions(element, options, values) {
                if (values == null) {
                    values = {};
                }
                var names = Coveo._.keys(options);
                for (var i = 0; i < names.length; i++) {
                    var name = names[i];
                    var optionDefinition = options[name];
                    var attrName = optionDefinition.attrName || attrNameFromName(name, optionDefinition);
                    var value;
                    var loadFromAttribute = optionDefinition.load;
                    if (loadFromAttribute != null) {
                        value = loadFromAttribute(element, name, optionDefinition);
                    }
                    if (value == null && values[name] == undefined) {
                        if (optionDefinition.defaultValue != null) {
                            if (optionDefinition.type == 4 /* LIST */) {
                                value = Coveo._.extend([], optionDefinition.defaultValue);
                            }
                            else if (optionDefinition.type == 10 /* OBJECT */) {
                                value = Coveo._.extend({}, optionDefinition.defaultValue);
                            }
                            else {
                                value = optionDefinition.defaultValue;
                            }
                        }
                        else if (optionDefinition.defaultFunction != null) {
                            value = optionDefinition.defaultFunction(element);
                        }
                    }
                    if (value != null) {
                        values[name] = value;
                    }
                }
                for (var i = 0; i < names.length; i++) {
                    var name = names[i];
                    var optionDefinition = options[name];
                    if (optionDefinition.postProcessing) {
                        values[name] = optionDefinition.postProcessing(values[name], values);
                    }
                }
                return values;
            }
            ComponentOptions.initOptions = initOptions;
            function loadStringOption(element, name, option) {
                return Coveo.$(element).attr(attrNameFromName(name, option));
            }
            ComponentOptions.loadStringOption = loadStringOption;
            function loadFieldOption(element, name, option) {
                var field = loadStringOption(element, name, option);
                Coveo.Assert.check(!Coveo.Utils.isNonEmptyString(field) || Coveo.Utils.isCoveoField(field), field + ' is not a valid field');
                return field != null ? field.toLowerCase() : null;
            }
            ComponentOptions.loadFieldOption = loadFieldOption;
            var localizer = /([a-zA-Z\-]+)\s*:\s*(([^,]|,\s*(?!([a-zA-Z\-]+)\s*:))+)/g;
            function loadLocalizedStringOption(element, name, option) {
                var attributeValue = loadStringOption(element, name, option);
                var locale = String['locale'] || String['defaultLocale'];
                if (locale != null && attributeValue != null) {
                    var localeParts = locale.toLowerCase().split("-");
                    var locales = Coveo._.map(localeParts, function (part, i) { return localeParts.slice(0, i + 1).join("-"); });
                    var localizers = attributeValue.match(localizer);
                    if (localizers != null) {
                        for (var i = 0; i < localizers.length; i++) {
                            var groups = localizer.exec(localizers[i]);
                            if (groups != null) {
                                var lang = groups[1].toLowerCase();
                                if (Coveo._.contains(locales, lang)) {
                                    return groups[2].replace(/^\s+|\s+$/g, '');
                                }
                            }
                        }
                    }
                    return attributeValue != null ? attributeValue.toLocaleString() : null;
                }
                return attributeValue;
            }
            ComponentOptions.loadLocalizedStringOption = loadLocalizedStringOption;
            function loadNumberOption(element, name, option) {
                return Coveo.Utils.parseIntIfNotUndefined(loadStringOption(element, name, option));
            }
            ComponentOptions.loadNumberOption = loadNumberOption;
            function loadFloatOption(element, name, option) {
                return Coveo.Utils.parseFloatIfNotUndefined(loadStringOption(element, name, option));
            }
            ComponentOptions.loadFloatOption = loadFloatOption;
            function loadBooleanOption(element, name, option) {
                return Coveo.Utils.parseBooleanIfNotUndefined(loadStringOption(element, name, option));
            }
            ComponentOptions.loadBooleanOption = loadBooleanOption;
            function loadListOption(element, name, option) {
                var separator = option.separator || /\s*,\s*/;
                var attributeValue = loadStringOption(element, name, option);
                return Coveo.Utils.isNonEmptyString(attributeValue) ? attributeValue.split(separator) : null;
            }
            ComponentOptions.loadListOption = loadListOption;
            function loadEnumOption(element, name, option, _enum) {
                var enumAsString = loadStringOption(element, name, option);
                return enumAsString != null ? _enum[enumAsString] : null;
            }
            ComponentOptions.loadEnumOption = loadEnumOption;
            function loadSelectorOption(element, name, option) {
                var attributeValue = loadStringOption(element, name, option);
                return Coveo.Utils.isNonEmptyString(attributeValue) ? Coveo.$(attributeValue).get(0) : null;
            }
            ComponentOptions.loadSelectorOption = loadSelectorOption;
            function loadChildHtmlElementOption(element, name, option) {
                var htmlElement;
                // Attribute: selector
                var selectorAttr = option.selectorAttr || attrNameFromName(name, option) + '-selector';
                var selector = Coveo.$(element).attr(selectorAttr);
                htmlElement = Coveo.$(selector).get(0);
                // Child
                if (htmlElement == null) {
                    var childSelector = option.childSelector;
                    if (childSelector == null) {
                        childSelector = '.' + name;
                    }
                    htmlElement = loadChildHtmlElementFromSelector(element, childSelector);
                }
                return htmlElement;
            }
            ComponentOptions.loadChildHtmlElementOption = loadChildHtmlElementOption;
            function loadChildHtmlElementFromSelector(element, selector) {
                Coveo.Assert.isNonEmptyString(selector);
                if (Coveo.$(element).is(selector)) {
                    return element;
                }
                var foundElement = Coveo.$(element).find(selector);
                return foundElement.length != 0 ? foundElement.get(0) : null;
            }
            ComponentOptions.loadChildHtmlElementFromSelector = loadChildHtmlElementFromSelector;
            function loadTemplateOption(element, name, option) {
                var template;
                // Attribute: template selector
                var selectorAttr = option.selectorAttr || attrNameFromName(name, option) + '-selector';
                var selector = Coveo.$(element).attr(selectorAttr);
                var templateElement = Coveo.$(selector).get(0);
                if (templateElement != null) {
                    template = createResultTemplateFromElement(templateElement);
                }
                // Attribute: template id
                if (template == null) {
                    var idAttr = option.idAttr || attrNameFromName(name, option) + '-id';
                    var id = Coveo.$(element).attr(idAttr);
                    if (id != null) {
                        template = loadResultTemplateFromId(id);
                    }
                }
                // Child
                if (template == null) {
                    var childSelector = option.childSelector;
                    if (childSelector == null) {
                        childSelector = '.' + name.replace(/([A-Z])/g, "-$1").toLowerCase();
                    }
                    template = loadChildResultTemplateFromSelector(element, childSelector);
                }
                return template;
            }
            ComponentOptions.loadTemplateOption = loadTemplateOption;
            function loadResultTemplateFromId(templateId) {
                return Coveo.Utils.isNonEmptyString(templateId) ? new Ui.UnderscoreTemplate(Ui.TemplateCache.getTemplate(templateId)) : null;
            }
            ComponentOptions.loadResultTemplateFromId = loadResultTemplateFromId;
            function loadChildResultTemplateFromSelector(element, selector) {
                var foundElement = loadChildHtmlElementFromSelector(element, selector);
                return foundElement != null ? createResultTemplateFromElement(foundElement) : null;
            }
            ComponentOptions.loadChildResultTemplateFromSelector = loadChildResultTemplateFromSelector;
            function findParentScrolling(element) {
                var currentElement = Coveo.$(element);
                while (!(currentElement.is(document)) && (currentElement.length != 0)) {
                    if (isElementScrollable(currentElement)) {
                        if (!currentElement.is("body")) {
                            return currentElement.get(0);
                        }
                        return Coveo.$(window).get(0);
                    }
                    currentElement = currentElement.parent();
                }
                return Coveo.$(window).get(0);
            }
            ComponentOptions.findParentScrolling = findParentScrolling;
            function isElementScrollable(element) {
                return element.css("overflow-y") == "scroll";
            }
            ComponentOptions.isElementScrollable = isElementScrollable;
            function createResultTemplateFromElement(element) {
                Coveo.Assert.exists(element);
                var type = Coveo.$(element).attr('type');
                Coveo.Assert.check(Coveo.Utils.isNonEmptyString(type), 'You must specify the type of template');
                if (Coveo._.indexOf(Ui.UnderscoreTemplate.mimeTypes, type) != -1) {
                    return Ui.UnderscoreTemplate.create(element);
                }
                else if (Coveo._.indexOf(Ui.JsRenderTemplate.mimeTypes, type) != -1) {
                    return Ui.JsRenderTemplate.create(element);
                }
                else if (Coveo._.indexOf(Ui.HandlebarsTemplate.mimeTypes, type) != -1) {
                    return Ui.HandlebarsTemplate.create(element);
                }
                else if (Coveo._.indexOf(Ui.JsonTemplate.mimeTypes, type) != -1) {
                    return Ui.JsonTemplate.create(element);
                }
                else {
                    Coveo.Assert.fail('Cannot guess template type from attribute: ' + type);
                    return undefined;
                }
            }
            ComponentOptions.createResultTemplateFromElement = createResultTemplateFromElement;
        })(ComponentOptions = Ui.ComponentOptions || (Ui.ComponentOptions = {}));
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var QueryBuilder = (function () {
            function QueryBuilder() {
                this.expression = new Ui.ExpressionBuilder();
                this.advancedExpression = new Ui.ExpressionBuilder();
                this.constantExpression = new Ui.ExpressionBuilder();
                this.disjunctionExpression = new Ui.ExpressionBuilder();
                this.firstResult = 0;
                this.numberOfResults = 10;
                this.enableDidYouMean = false;
                this.enableDebug = true;
                this.sortCriteria = "relevancy";
                this.retrieveFirstSentences = true; // True by default because otherwise everyone stumbles on this
                this.queryUid = Coveo.QueryUtils.createGuid();
                this.queryFunctions = [];
                this.rankingFunctions = [];
                this.groupByRequests = [];
                this.enableDuplicateFiltering = false;
            }
            QueryBuilder.prototype.build = function () {
                var query = {
                    q: this.expression.build(),
                    aq: this.advancedExpression.build(),
                    cq: this.constantExpression.build(),
                    dq: this.disjunctionExpression.build(),
                    wildcards: this.enableWildcards,
                    questionMarks: this.enableQuestionMarks,
                    lowercaseOperators: this.enableLowercaseOperators,
                    partialMatch: this.enablePartialMatch,
                    partialMatchKeywords: this.partialMatchKeywords,
                    partialMatchThreshold: this.partialMatchThreshold,
                    firstResult: this.firstResult,
                    numberOfResults: this.numberOfResults,
                    excerptLength: this.excerptLength,
                    filterField: this.filterField,
                    filterFieldRange: this.filterFieldRange,
                    parentField: this.parentField,
                    childField: this.childField,
                    fieldsToInclude: this.fieldsToInclude,
                    fieldsToExclude: this.fieldsToExclude,
                    enableDidYouMean: this.enableDidYouMean,
                    sortCriteria: this.sortCriteria,
                    sortField: this.sortField,
                    queryFunctions: this.queryFunctions,
                    rankingFunctions: this.rankingFunctions,
                    groupBy: this.groupByRequests,
                    retrieveFirstSentences: this.retrieveFirstSentences,
                    timezone: this.timezone,
                    enableDuplicateFiltering: this.enableDuplicateFiltering
                };
                return query;
            };
            QueryBuilder.prototype.computeCompleteExpression = function () {
                return this.computeCompleteExpressionParts().full;
            };
            QueryBuilder.prototype.computeCompleteExpressionParts = function () {
                var withoutConstant = Ui.ExpressionBuilder.merge(this.expression, this.advancedExpression);
                return {
                    full: Ui.ExpressionBuilder.mergeUsingOr(Ui.ExpressionBuilder.merge(withoutConstant, this.constantExpression), this.disjunctionExpression).build(),
                    withoutConstant: Ui.ExpressionBuilder.mergeUsingOr(withoutConstant, this.disjunctionExpression).build(),
                    constant: Ui.ExpressionBuilder.mergeUsingOr(this.constantExpression, this.disjunctionExpression).build()
                };
            };
            QueryBuilder.prototype.computeCompleteExpressionExcept = function (except) {
                return this.computeCompleteExpressionPartsExcept(except).full;
            };
            QueryBuilder.prototype.computeCompleteExpressionPartsExcept = function (except) {
                var withoutConstantAndExcept = Ui.ExpressionBuilder.merge(this.expression, this.advancedExpression);
                withoutConstantAndExcept.remove(except);
                return {
                    full: Ui.ExpressionBuilder.mergeUsingOr(Ui.ExpressionBuilder.merge(withoutConstantAndExcept, this.constantExpression), this.disjunctionExpression).build(),
                    withoutConstant: Ui.ExpressionBuilder.mergeUsingOr(withoutConstantAndExcept, this.disjunctionExpression).build(),
                    constant: Ui.ExpressionBuilder.mergeUsingOr(this.constantExpression, this.disjunctionExpression).build()
                };
            };
            return QueryBuilder;
        })();
        Ui.QueryBuilder = QueryBuilder;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ExpressionBuilder = (function () {
            function ExpressionBuilder() {
                this.parts = []; // he he he
                this.wrapParts = true;
            }
            ExpressionBuilder.prototype.add = function (expression) {
                Coveo.Assert.isNonEmptyString(expression);
                this.parts.push(expression);
            };
            ExpressionBuilder.prototype.addFieldExpression = function (field, operator, values) {
                Coveo.Assert.isNonEmptyString(field);
                Coveo.Assert.stringStartsWith(field, '@');
                Coveo.Assert.isNonEmptyString(operator);
                Coveo.Assert.isLargerOrEqualsThan(1, values.length);
                this.add(Coveo.QueryUtils.buildFieldExpression(field, operator, values));
            };
            ExpressionBuilder.prototype.addFieldNotEqualExpression = function (field, values) {
                Coveo.Assert.isNonEmptyString(field);
                Coveo.Assert.stringStartsWith(field, '@');
                Coveo.Assert.isLargerOrEqualsThan(1, values.length);
                this.add(Coveo.QueryUtils.buildFieldNotEqualExpression(field, values));
            };
            ExpressionBuilder.prototype.remove = function (expression) {
                Coveo.Assert.isNonEmptyString(expression);
                var index = Coveo._.indexOf(this.parts, expression);
                if (index != -1) {
                    this.parts.splice(Coveo._.indexOf(this.parts, expression), 1);
                }
            };
            ExpressionBuilder.prototype.isEmpty = function () {
                return this.parts.length == 0;
            };
            ExpressionBuilder.prototype.build = function () {
                if (this.parts.length == 0) {
                    return undefined;
                }
                else if (this.parts.length == 1) {
                    return this.parts[0];
                }
                else if (this.wrapParts) {
                    return '(' + this.parts.join(') (') + ')';
                }
                else {
                    return this.parts.join(' ');
                }
            };
            ExpressionBuilder.merge = function () {
                var builders = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    builders[_i - 0] = arguments[_i];
                }
                var merged = new ExpressionBuilder();
                Coveo._.each(builders, function (builder) {
                    merged.parts = merged.parts.concat(builder.parts);
                });
                return merged;
            };
            ExpressionBuilder.mergeUsingOr = function () {
                var builders = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    builders[_i - 0] = arguments[_i];
                }
                var nonEmpty = Coveo._.filter(builders, function (b) { return !b.isEmpty(); });
                var merged = new ExpressionBuilder();
                if (nonEmpty.length == 1) {
                    merged.parts = [].concat(nonEmpty[0].parts);
                }
                else if (nonEmpty.length > 1) {
                    var parts = Coveo._.map(nonEmpty, function (b) { return b.build(); });
                    merged.add('(' + parts.join(') OR (') + ')');
                }
                return merged;
            };
            return ExpressionBuilder;
        })();
        Ui.ExpressionBuilder = ExpressionBuilder;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        Ui.AnalyticsActionCauseList = {
            interfaceLoad: {
                name: "interfaceLoad",
                type: 'interface'
            },
            interfaceChange: {
                name: "interfaceChange",
                type: 'interface',
                metaMap: { interfaceChangeTo: 1 }
            },
            contextRemove: {
                name: "contextRemove",
                type: 'misc',
                metaMap: { contextName: 1 }
            },
            didyoumeanAutomatic: {
                name: "didyoumeanAutomatic",
                type: 'misc'
            },
            didyoumeanClick: {
                name: "didyoumeanClick",
                type: 'misc'
            },
            resultsSort: {
                name: "resultsSort",
                type: 'misc',
                metaMap: { resultsSortBy: 1 }
            },
            searchboxSubmit: {
                name: "searchboxSubmit",
                type: 'search box'
            },
            searchboxClear: {
                name: "searchboxClear",
                type: 'search box'
            },
            searchboxAsYouType: {
                name: "searchboxAsYouType",
                type: 'search box'
            },
            breadcrumbFacet: {
                name: "breadcrumbFacet",
                type: 'breadcrumb',
                metaMap: { facetId: 1, facetValue: 2 }
            },
            breadcrumbResetAll: {
                name: "breadcrumbResetAll",
                type: 'breadcrumb'
            },
            documentTag: {
                name: "documentTag",
                type: 'document',
                metaMap: { facetId: 1, facetValue: 2 }
            },
            documentField: {
                name: "documentField",
                type: 'document',
                metaMap: { facetId: 1, facetValue: 2 }
            },
            documentQuickView: {
                name: "documentQuickView",
                type: 'document',
                metaMap: { documentTitle: 1, documentURL: 2 }
            },
            documentOpen: {
                name: "documentOpen",
                type: 'document',
                metaMap: { documentTitle: 1, documentURL: 2 }
            },
            omniboxFacet: {
                name: "omniboxFacet",
                type: 'omnibox',
                metaMap: { facetId: 1, facetValue: 2 }
            },
            omniboxAnalytics: {
                name: "omniboxAnalytics",
                type: 'omnibox'
            },
            omniboxField: {
                name: "omniboxField",
                type: 'omnibox'
            },
            facetClearAll: {
                name: "facetClearAll",
                type: 'facet',
                metaMap: { facetId: 1 }
            },
            facetSearch: {
                name: "facetSearch",
                type: 'facet',
                metaMap: { facetId: 1 }
            },
            facetToggle: {
                name: "facetToggle",
                type: 'facet',
                metaMap: { facetId: 1, facetOperatorBefore: 2, facetOperatorAfter: 3 }
            },
            facetRangeSlider: {
                name: "facetRangeSlider",
                type: 'facet',
                metaMap: { facetId: 1, facetRangeStart: 2, facetRangeEnd: 3 }
            },
            facetRangeGraph: {
                name: "facetRangeGraph",
                type: 'facet',
                metaMap: { facetId: 1, facetRangeStart: 2, facetRangeEnd: 3 }
            },
            facetSelect: {
                name: "facetSelect",
                type: 'facet',
                metaMap: { facetId: 1, facetValue: 2 }
            },
            facetSelectAll: {
                name: "facetSelectAll",
                type: 'facet',
                metaMap: { facetId: 1, facetValue: 2 }
            },
            facetDeselect: {
                name: "facetDeselect",
                type: 'facet',
                metaMap: { facetId: 1, facetValue: 2 }
            },
            facetExclude: {
                name: "facetExclude",
                type: 'facet',
                metaMap: { facetId: 1, facetValue: 2 }
            },
            facetUnexclude: {
                name: "facetUnexclude",
                type: 'facet',
                metaMap: { facetId: 1, facetValue: 2 }
            },
            facetSortValues: {
                name: "facetSortValues",
                type: 'facet',
                metaMap: { facetId: 1, facetSortBy: 2 }
            },
            errorBack: {
                name: "errorBack",
                type: 'errors'
            },
            errorClearQuery: {
                name: "errorClearQuery",
                type: 'errors'
            },
            errorRetry: {
                name: "errorRetry",
                type: 'errors'
            },
            expandToFullUI: {
                name: "expandToFullUI",
                type: 'interface'
            },
            caseCreate: {
                name: "caseCreate",
                type: "case"
            },
            casecontextAdd: {
                name: "casecontextAdd",
                type: "casecontext",
                metaMap: { caseID: 5 }
            },
            casecontextRemove: {
                name: "casecontextRemove",
                type: "casecontext",
                metaMap: { caseID: 5 }
            },
            preferencesChange: {
                name: "preferencesChange",
                type: 'preferences',
                metaMap: { preferenceName: 1, preferenceType: 2 }
            },
            caseAttach: {
                name: "caseAttach",
                type: 'case',
                metaMap: { documentTitle: 1, resultUriHash: 3, articleID: 4, caseID: 5 }
            },
            caseDetach: {
                name: "caseDetach",
                type: 'case',
                metaMap: { documentTitle: 1, resultUriHash: 3, articleID: 4, caseID: 5 }
            },
            customfiltersChange: {
                name: "customfiltersChange",
                type: 'customfilters',
                metaMap: { customFilterName: 1, customFilterType: 2, customFilterExpression: 3 }
            },
            pagerNumber: {
                name: "pagerNumber",
                type: "getMoreResults",
                metaMap: { "pagerNumber": 1 }
            },
            pagerNext: {
                name: "pagerNext",
                type: "getMoreResults",
                metaMap: { "pagerNumber": 1 }
            },
            pagerPrevious: {
                name: "pagerPrevious",
                type: "getMoreResults",
                metaMap: { "pagerNumber": 1 }
            },
            pagerScrolling: {
                name: "pagerScrolling",
                type: "getMoreResults"
            },
            searchFromLink: {
                name: 'searchFromLink',
                type: 'interface'
            }
        };
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var NoopAnalyticsClient = (function () {
            function NoopAnalyticsClient() {
                this.isContextual = false;
            }
            NoopAnalyticsClient.prototype.isActivated = function () {
                return false;
            };
            NoopAnalyticsClient.prototype.getCurrentEventCause = function () {
                return null;
            };
            NoopAnalyticsClient.prototype.getCurrentEventMeta = function () {
                return {};
            };
            NoopAnalyticsClient.prototype.logSearchEvent = function (actionCause, meta) {
            };
            NoopAnalyticsClient.prototype.logSearchAsYouType = function (actionCause, meta) {
            };
            NoopAnalyticsClient.prototype.logClickEvent = function (actionCause, meta, result, element) {
            };
            NoopAnalyticsClient.prototype.logCustomEvent = function (actionCause, meta, element) {
            };
            NoopAnalyticsClient.prototype.getTopQueries = function (params) {
                var deferred = Coveo.$.Deferred();
                deferred.resolve([]);
                return deferred;
            };
            NoopAnalyticsClient.prototype.sendAllPendingEvents = function () {
            };
            return NoopAnalyticsClient;
        })();
        Ui.NoopAnalyticsClient = NoopAnalyticsClient;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Coveo;
(function (Coveo) {
    var Models;
    (function (Models) {
        var Model = (function (_super) {
            __extends(Model, _super);
            function Model(element, id, attributes, bindings) {
                _super.call(this, element, id, bindings);
                this.eventNameSpace = id;
                this.defaultAttributes = Coveo.$.extend(true, {}, this.defaultAttributes, attributes); //Copy to default attributes
                this.attributes = attributes;
                this.logger.debug("Creating model");
            }
            Model.prototype.set = function (attribute, value, options) {
                var toSet = {};
                toSet[attribute] = value;
                this.setMultiple(toSet, options);
            };
            Model.prototype.setMultiple = function (toSet, options) {
                var _this = this;
                var anythingChanged = false;
                this.preprocessEvent(toSet);
                Coveo._.each(toSet, function (value, attribute) {
                    if (!options || !options.customAttribute) {
                        _this.checkIfAttributeExists(attribute);
                    }
                    value = _this.parseToCorrectType(attribute, value);
                    if (!options || options.validateType) {
                        _this.validateType(attribute, value);
                    }
                    if (_this.checkIfAttributeChanged(attribute, value)) {
                        _this.attributes[attribute] = value;
                        anythingChanged = true;
                        if (options == null || !options.silent) {
                            _this.attributeHasChangedEvent(attribute);
                        }
                    }
                });
                if (anythingChanged && (options == null || !options.silent)) {
                    this.attributesHasChangedEvent();
                    this.anyEvent();
                }
            };
            Model.prototype.setNewDefault = function (attribute, value, options) {
                if (!options || !options.customAttribute) {
                    this.checkIfAttributeExists(attribute);
                }
                this.defaultAttributes[attribute] = value;
            };
            Model.prototype.setDefault = function (attribute, options) {
                this.set(attribute, this.defaultAttributes[attribute]);
            };
            Model.prototype.get = function (attribute) {
                if (attribute == undefined) {
                    return this.attributes;
                }
                else {
                    return this.attributes[attribute];
                }
            };
            Model.prototype.getDefault = function (attribute) {
                if (attribute == undefined) {
                    return this.defaultAttributes;
                }
                else {
                    return this.defaultAttributes[attribute];
                }
            };
            Model.prototype.reset = function () {
                this.setMultiple(this.defaultAttributes);
                this.modelWasResetEvent();
            };
            Model.prototype.registerNewAttribute = function (attribute, defaultValue) {
                this.defaultAttributes[attribute] = defaultValue;
                this.attributes[attribute] = defaultValue;
            };
            Model.prototype.getEventName = function (event) {
                return this.eventNameSpace + ":" + event;
            };
            Model.prototype.attributesHasChangedEvent = function () {
                Coveo.$(this.element).trigger(this.getEventName(Model.eventTypes.change), this.createAttributesChangedArgument());
            };
            Model.prototype.attributeHasChangedEvent = function (attr) {
                Coveo.$(this.element).trigger(this.getEventName(Model.eventTypes.changeOne) + attr, this.createAttributeChangedArgument(attr));
            };
            Model.prototype.preprocessEvent = function (attributes) {
                Coveo.$(this.element).trigger(this.getEventName(Model.eventTypes.preprocess), attributes);
            };
            Model.prototype.modelWasResetEvent = function () {
                Coveo.$(this.element).trigger(this.getEventName(Model.eventTypes.reset), this.createModelChangedArgument());
            };
            Model.prototype.anyEvent = function () {
                Coveo.$(this.element).trigger(this.getEventName(Model.eventTypes.all), this.createModelChangedArgument());
            };
            Model.prototype.createAttributeChangedArgument = function (attribute) {
                return { attribute: attribute, value: this.attributes[attribute] };
            };
            Model.prototype.createAttributesChangedArgument = function () {
                return { attributes: this.attributes };
            };
            Model.prototype.createModelChangedArgument = function () {
                return { model: this };
            };
            Model.prototype.checkIfAttributeExists = function (attribute) {
                Coveo.Assert.check(Coveo._.has(this.attributes, attribute));
            };
            Model.prototype.validateType = function (attribute, value) {
                if (!Coveo.Utils.isNullOrUndefined(this.attributes[attribute]) && !Coveo.Utils.isUndefined(value)) {
                    if (Coveo._.isNumber(this.attributes[attribute])) {
                        Coveo.Assert.check(Coveo._.isNumber(value) && !isNaN(value), "Non-matching type");
                    }
                    else if (Coveo._.isBoolean(this.attributes[attribute])) {
                        Coveo.Assert.check(Coveo._.isBoolean(value) || Coveo.Utils.parseBooleanIfNotUndefined(value) !== undefined, "Non-matching type");
                    }
                    else {
                        if (!Coveo.Utils.isNullOrUndefined(this.defaultAttributes[attribute])) {
                            Coveo.Assert.check(typeof value === typeof this.defaultAttributes[attribute], "Non-matching type");
                        }
                    }
                }
            };
            Model.prototype.parseToCorrectType = function (attribute, value) {
                if (Coveo._.isNumber(this.attributes[attribute])) {
                    return parseInt(value, 10);
                }
                else if (Coveo._.isBoolean(this.attributes[attribute])) {
                    if (Coveo._.isBoolean(value)) {
                        return value;
                    }
                    else {
                        return Coveo.Utils.parseBooleanIfNotUndefined(value);
                    }
                }
                return value;
            };
            Model.prototype.checkIfAttributeChanged = function (attribute, newValue) {
                var oldValue = this.attributes[attribute];
                if (Coveo._.isNumber(oldValue) || Coveo._.isString(oldValue) || Coveo._.isBoolean(oldValue)) {
                    return oldValue !== newValue;
                }
                if (Coveo._.isArray(oldValue)) {
                    return !Coveo.Utils.arrayEqual(oldValue, newValue);
                }
                if (Coveo._.isObject(oldValue)) {
                    return !Coveo.Utils.objectEqual(oldValue, newValue);
                }
                return true;
            };
            //changeOne: is when one specific attribute change, change is when any attribute change
            Model.eventTypes = {
                preprocess: "preprocess",
                changeOne: "change:",
                change: "change",
                reset: "reset",
                all: "all"
            };
            return Model;
        })(Coveo.Ui.Component);
        Models.Model = Model;
    })(Models = Coveo.Models || (Coveo.Models = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Models;
    (function (Models) {
        var QueryStateModel = (function (_super) {
            __extends(QueryStateModel, _super);
            function QueryStateModel(element, attributes, bindings) {
                var merged = Coveo._.extend({}, QueryStateModel.defaultAttributes, attributes);
                _super.call(this, element, QueryStateModel.ID, merged, bindings);
            }
            QueryStateModel.getFacetId = function (id, include) {
                if (include === void 0) { include = true; }
                return 'f:' + id + (include ? '' : ':not');
            };
            QueryStateModel.getFacetOperator = function (id) {
                return 'f:' + id + ':operator';
            };
            QueryStateModel.getFacetLookupValue = function (id) {
                return QueryStateModel.getFacetId(id) + ":lookupvalues";
            };
            QueryStateModel.prototype.set = function (attribute, value, options) {
                this.validate(attribute, value);
                _super.prototype.set.call(this, attribute, value, options);
            };
            QueryStateModel.prototype.validate = function (attribute, value) {
                if (attribute == QueryStateModel.attributesEnum.first) {
                    Coveo.Assert.isLargerOrEqualsThan(0, value);
                }
            };
            QueryStateModel.prototype.getAttributes = function () {
                var _this = this;
                var attributes = {};
                Coveo._.each(this.queryStateModel.attributes, function (attribute, key) {
                    if (Coveo._.isObject(attribute)) {
                        if (!Coveo.Utils.objectEqual(attribute, _this.queryStateModel.defaultAttributes[key])) {
                            attributes[key] = attribute;
                        }
                    }
                    else if (attribute != _this.queryStateModel.defaultAttributes[key]) {
                        attributes[key] = attribute;
                    }
                });
                return attributes;
            };
            QueryStateModel.ID = "state";
            QueryStateModel.defaultAttributes = {
                q: "",
                first: 0,
                t: "",
                hd: "",
                hq: "",
                sort: "",
                tg: ""
            };
            QueryStateModel.attributesEnum = {
                q: "q",
                first: "first",
                t: "t",
                sort: "sort",
                hd: "hd",
                hq: "hq",
                tg: "tg"
            };
            return QueryStateModel;
        })(Models.Model);
        Models.QueryStateModel = QueryStateModel;
        Coveo.Ui.CoveoJQuery.registerNamedMethod('state', function (element) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            Coveo.Assert.exists(element);
            var model = Coveo.Ui.Component.resolveBinding(element, QueryStateModel);
            Coveo.Assert.exists(model);
            if (args.length == 0) {
                // No args means return the model
                return model;
            }
            else if (args.length == 1 && Coveo.Utils.isNonEmptyString(args[0])) {
                // One string arg means retrieve value from model
                return model.get(args[0]);
            }
            else if (Coveo._.isObject(args[0])) {
                // One dictionary means set multiple values
                var toSet = args[0];
                var options = Coveo.$.extend({ customAttribute: true }, args[1]);
                return model.setMultiple(toSet, options);
            }
            else if (args.length > 1) {
                // Otherwise we're setting a value
                var name = args[0];
                var value = args[1];
                var options = Coveo.$.extend({ customAttribute: true }, args[2]);
                Coveo.Assert.isNonEmptyString(name);
                return model.set(name, value, options);
            }
        });
    })(Models = Coveo.Models || (Coveo.Models = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Models;
    (function (Models) {
        var ComponentStateModel = (function (_super) {
            __extends(ComponentStateModel, _super);
            function ComponentStateModel(element, window_) {
                _super.call(this, element, ComponentStateModel.ID, {});
            }
            ComponentStateModel.prototype.registerComponent = function (componentId, component) {
                var currentAttribute = this.attributes[componentId];
                if (currentAttribute == undefined) {
                    this.attributes[componentId] = [component];
                }
                else {
                    this.attributes[componentId].push(component);
                }
            };
            ComponentStateModel.ID = "ComponentState";
            return ComponentStateModel;
        })(Models.Model);
        Models.ComponentStateModel = ComponentStateModel;
    })(Models = Coveo.Models || (Coveo.Models = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Models;
    (function (Models) {
        var ComponentOptionsModel = (function (_super) {
            __extends(ComponentOptionsModel, _super);
            function ComponentOptionsModel(element, attributes, window_) {
                var merged = Coveo._.extend({}, ComponentOptionsModel.defaultAttributes, attributes);
                _super.call(this, element, ComponentOptionsModel.ID, merged);
            }
            ComponentOptionsModel.ID = "ComponentOptions";
            ComponentOptionsModel.defaultAttributes = {
                resultLink: undefined
            };
            ComponentOptionsModel.attributesEnum = {
                resultLink: "resultLink"
            };
            return ComponentOptionsModel;
        })(Models.Model);
        Models.ComponentOptionsModel = ComponentOptionsModel;
    })(Models = Coveo.Models || (Coveo.Models = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Controllers;
    (function (Controllers) {
        var HistoryController = (function (_super) {
            __extends(HistoryController, _super);
            function HistoryController(element, _window, queryStateModel, queryController) {
                var _this = this;
                _super.call(this, element, HistoryController.ID);
                this._window = _window;
                this.queryStateModel = queryStateModel;
                this.queryController = queryController;
                this.ignoreNextHashChange = false;
                this.initialHashChange = false;
                this.willUpdateHash = false;
                this._window = this._window || window;
                this.queryStateModel = queryStateModel || this.resolveQueryStateModel();
                this.queryController = queryController || this.resolveQueryController();
                Coveo.Assert.exists(this.queryStateModel);
                Coveo.Assert.exists(this.queryController);
                Coveo.$(this.element).on(Coveo.Events.InitializationEvents.restoreHistoryState, function () { return _this.updateModelFromHash(); });
                Coveo.$(this.element).on(this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.all), function () { return _this.updateHashFromModel(); });
                Coveo.$(this._window).on('hashchange', Coveo.$.proxy(this.handleHashChange, this));
            }
            HistoryController.prototype.handleHashChange = function () {
                if (this.ignoreNextHashChange) {
                    this.ignoreNextHashChange = false;
                    return;
                }
                this.updateModelFromHash();
                this.queryController.executeQuery();
            };
            HistoryController.prototype.updateHashFromModel = function () {
                var _this = this;
                if (!this.willUpdateHash) {
                    Coveo.Defer.defer(function () {
                        var attributes = _this.queryStateModel.getAttributes();
                        _this.setHashValues(attributes);
                        _this.logger.debug("Saving state to hash", attributes);
                        _this.willUpdateHash = false;
                    });
                    this.willUpdateHash = true;
                }
            };
            HistoryController.prototype.updateModelFromHash = function () {
                var _this = this;
                var toSet = {};
                Coveo._.each(this.queryStateModel.attributes, function (value, key, obj) {
                    var valToSet = _this.getHashValue(key);
                    var modelSetOptions = {};
                    if (valToSet == undefined) {
                        valToSet = _this.queryStateModel.defaultAttributes[key];
                    }
                    toSet[key] = valToSet;
                });
                //try {
                this.initialHashChange = true;
                this.queryStateModel.setMultiple(toSet);
                //} catch (err) {
                //  this.logger.error("Error while setting attribute for the query state !", err);
                //}
            };
            HistoryController.prototype.getHashValue = function (value) {
                Coveo.Assert.isNonEmptyString(value);
                return Coveo.HashUtils.getValue(value, Coveo.HashUtils.getHash(this._window));
            };
            HistoryController.prototype.setHashValues = function (values) {
                var hash = '#' + Coveo.HashUtils.encodeValues(values);
                this.ignoreNextHashChange = this._window.location.hash != hash;
                if (this.ignoreNextHashChange) {
                    if (this.initialHashChange) {
                        this.initialHashChange = false;
                        this._window.location.replace(hash);
                    }
                    else {
                        this._window.location.hash = hash;
                    }
                }
            };
            HistoryController.ID = 'HistoryController';
            return HistoryController;
        })(Coveo.Ui.Component);
        Controllers.HistoryController = HistoryController;
    })(Controllers = Coveo.Controllers || (Coveo.Controllers = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Controllers;
    (function (Controllers) {
        var DefaultQueryOptions = (function () {
            function DefaultQueryOptions() {
                this.searchAsYouType = false;
            }
            return DefaultQueryOptions;
        })();
        var QueryController = (function (_super) {
            __extends(QueryController, _super);
            function QueryController(element, options) {
                _super.call(this, element, QueryController.ID);
                this.options = options;
                this.showingExecutingQueryAnimation = false;
                Coveo.Assert.exists(element);
                Coveo.Assert.exists(options);
                this.firstQuery = true;
            }
            QueryController.prototype.setEndpoint = function (endpoint) {
                this.overrideEndpoint = endpoint;
                this.logger.debug('Endpoint set', endpoint);
            };
            QueryController.prototype.getEndpoint = function () {
                var endpoint = this.overrideEndpoint || this.options.endpoint;
                // We must wrap the endpoint in a decorator that'll add the call options
                // we obtain by firing the proper event. Those are used for authentication
                // providers, and I guess other stuff later on.
                return new Coveo.Rest.SearchEndpointWithDefaultCallOptions(endpoint, this.getCallOptions());
            };
            QueryController.prototype.executeQuery = function (options) {
                var _this = this;
                Coveo.ModalBox.close(true);
                this.logger.debug('Executing new query', query);
                var options = Coveo._.extend(new DefaultQueryOptions(), options);
                this.cancelAnyCurrentPendingQuery();
                if (options.beforeExecuteQuery != null) {
                    options.beforeExecuteQuery();
                }
                if (this.isStandaloneSearchBox() && !options.searchAsYouType) {
                    this.redirectToSearchPage();
                    return Coveo.$.Deferred();
                }
                this.showExecutingQueryAnimation();
                var deferred = Coveo.$.Deferred();
                this.currentPendingQuery = deferred;
                if (this.firstQuery) {
                    var firstQueryCause = Coveo.HashUtils.getValue('firstQueryCause', Coveo.HashUtils.getHash());
                    if (firstQueryCause != null) {
                        var meta = Coveo.HashUtils.getValue('firstQueryMeta', Coveo.HashUtils.getHash()) || {};
                        this.usageAnalytics.logSearchEvent(Coveo.Ui.AnalyticsActionCauseList[firstQueryCause], meta);
                    }
                    else {
                        if (Coveo.Utils.isNonEmptyString(this.getBindings().queryStateModel.get('q'))) {
                            this.usageAnalytics.logSearchEvent(Coveo.Ui.AnalyticsActionCauseList.searchFromLink, {});
                        }
                        else {
                            this.usageAnalytics.logSearchEvent(Coveo.Ui.AnalyticsActionCauseList.interfaceLoad, {});
                        }
                    }
                }
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.newQuery, { deferred: deferred });
                var queryBuilder = this.createQueryBuilder(options);
                var query = queryBuilder.build();
                var endpointToUse = this.getEndpoint();
                var deferredFromEndpoint = endpointToUse.search(query);
                deferredFromEndpoint.done(function (queryResults) {
                    Coveo.Assert.exists(queryResults);
                    if (_this.firstQuery) {
                        _this.firstQuery = false;
                    }
                    // If our deferred is no longer the current one, then the query
                    // has been cancel. We should do nothing here.
                    if (deferred !== _this.currentPendingQuery) {
                        return;
                    }
                    _this.logger.debug('Query results received', query, queryResults);
                    _this.lastSearchUid = queryResults.searchUid;
                    Coveo.QueryUtils.setIndexAndUidOnQueryResults(query, queryResults, _this.lastSearchUid);
                    Coveo.QueryUtils.setStateObjectOnQueryResults(_this.queryStateModel.get(), queryResults);
                    Coveo.QueryUtils.setTermsToHighlightOnQueryResults(query, queryResults);
                    var dataToSendOnPreprocessResult = {
                        queryBuilder: queryBuilder,
                        query: query,
                        results: queryResults,
                        searchAsYouType: options.searchAsYouType
                    };
                    _this.preprocessResultsEvent(dataToSendOnPreprocessResult);
                    var dataToSendOnNoResult = {
                        queryBuilder: queryBuilder,
                        query: query,
                        results: queryResults,
                        searchAsYouType: options.searchAsYouType,
                        retryTheQuery: false
                    };
                    if (queryResults.results.length == 0) {
                        _this.noResultEvent(dataToSendOnNoResult);
                    }
                    if (dataToSendOnNoResult.retryTheQuery) {
                        // When retrying the query, we must forward the results to the deferred we
                        // initially returned, in case someone is listening on it.
                        _this.executeQuery().done(function (queryResults) {
                            deferred.resolve(queryResults);
                        }).fail(function (data, error) {
                            deferred.reject(data, error);
                        });
                    }
                    else {
                        _this.lastQueryBuilder = queryBuilder;
                        _this.currentPendingQuery.resolve(queryResults);
                        _this.currentPendingQuery = undefined;
                        var dataToSendOnSuccess = {
                            queryBuilder: queryBuilder,
                            query: query,
                            results: queryResults,
                            searchAsYouType: options.searchAsYouType
                        };
                        _this.querySuccessEvent(dataToSendOnSuccess);
                        Coveo.Defer.defer(function () {
                            _this.deferredQuerySuccessEvent(dataToSendOnSuccess);
                            _this.hideExecutingQueryAnimation();
                        });
                    }
                });
                deferredFromEndpoint.fail(function (data, error) {
                    // If our deferred is no longer the current one, then the query
                    // has been cancel. We should do nothing here.
                    if (deferred !== _this.currentPendingQuery) {
                        return;
                    }
                    _this.logger.error('Query triggered an error', query, error);
                    _this.currentPendingQuery.reject(error);
                    _this.currentPendingQuery = undefined;
                    var dataToSendOnError = {
                        queryBuilder: queryBuilder,
                        endpoint: endpointToUse,
                        query: query,
                        error: error,
                        searchAsYouType: options.searchAsYouType
                    };
                    _this.queryError(dataToSendOnError);
                    _this.hideExecutingQueryAnimation();
                });
                var dataToSendDuringQuery = {
                    queryBuilder: queryBuilder,
                    query: query,
                    deferred: deferred,
                    searchAsYouType: options.searchAsYouType
                };
                this.duringQueryEvent(dataToSendDuringQuery);
                return deferred;
            };
            QueryController.prototype.deferExecuteQuery = function (options) {
                var _this = this;
                this.showExecutingQueryAnimation();
                Coveo.Defer.defer(function () { return _this.executeQuery(options); });
            };
            QueryController.prototype.fetchMore = function (count) {
                var _this = this;
                if (this.currentPendingQuery != undefined) {
                    return undefined;
                }
                var deferred = this.currentPendingQuery = Coveo.$.Deferred();
                var queryBuilder = new Coveo.Ui.QueryBuilder();
                this.continueLastQueryBuilder(queryBuilder, count);
                var query = queryBuilder.build();
                deferred = this.getEndpoint().search(query);
                var dataToSendDuringQuery = {
                    queryBuilder: queryBuilder,
                    query: query,
                    deferred: deferred,
                    searchAsYouType: false
                };
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.duringFetchMoreQuery, dataToSendDuringQuery);
                this.lastQueryBuilder = queryBuilder;
                deferred.done(function (results) {
                    // We re-use the search id from the initial search here, even though the
                    // server provided us with a new one. "Fetch mores" are considered to be
                    // the same query from an analytics point of view.
                    Coveo.QueryUtils.setIndexAndUidOnQueryResults(query, results, _this.lastSearchUid);
                    Coveo.QueryUtils.setStateObjectOnQueryResults(_this.queryStateModel.get(), results);
                    Coveo.QueryUtils.setTermsToHighlightOnQueryResults(query, results);
                    _this.currentPendingQuery = undefined;
                });
                return deferred;
            };
            QueryController.prototype.isStandaloneSearchBox = function () {
                return Coveo.Utils.isNonEmptyString(this.options.searchPageUri);
            };
            QueryController.prototype.continueLastQueryBuilder = function (queryBuilder, count) {
                Coveo.$.extend(queryBuilder, this.lastQueryBuilder);
                queryBuilder.firstResult = queryBuilder.firstResult + queryBuilder.numberOfResults;
                queryBuilder.numberOfResults = count;
            };
            QueryController.prototype.createQueryBuilder = function (options) {
                Coveo.Assert.exists(options);
                var queryBuilder = new Coveo.Ui.QueryBuilder();
                //Default values, components will probably override them if they exists
                queryBuilder.firstResult = queryBuilder.firstResult || 0;
                queryBuilder.numberOfResults = this.options.resultsPerPage;
                queryBuilder.filterField = this.options.filterField;
                queryBuilder.excerptLength = this.options.excerptLength;
                if (Coveo.Utils.isNonEmptyString(this.options.hiddenExpression)) {
                    queryBuilder.advancedExpression.add(this.options.hiddenExpression);
                }
                if (Coveo.Utils.isNonEmptyString(this.options.timezone)) {
                    queryBuilder.timezone = this.options.timezone;
                }
                // Allow outside code to customize the query builder. We provide two events,
                // to allow someone to have a peep at the query builder after the first phase
                // and add some stuff depending on what was put in there. The facets are using
                // this mechanism to generate query overrides.
                var dataToSendDuringBuildingQuery = {
                    queryBuilder: queryBuilder,
                    searchAsYouType: options.searchAsYouType
                };
                this.buildingQueryEvent(dataToSendDuringBuildingQuery);
                var dataToSendDuringDoneBuildingQuery = {
                    queryBuilder: queryBuilder,
                    searchAsYouType: options.searchAsYouType
                };
                this.doneBuildingQueryEvent(dataToSendDuringDoneBuildingQuery);
                return queryBuilder;
            };
            QueryController.prototype.cancelAnyCurrentPendingQuery = function () {
                if (Coveo.Utils.exists(this.currentPendingQuery)) {
                    this.logger.debug('Cancelling current pending query');
                    this.currentPendingQuery.reject();
                    this.currentPendingQuery = undefined;
                    return true;
                }
                return false;
            };
            QueryController.prototype.showExecutingQueryAnimation = function () {
                if (!this.showingExecutingQueryAnimation) {
                    Coveo.$(this.root).addClass('coveo-executing-query');
                    this.showingExecutingQueryAnimation = true;
                }
            };
            QueryController.prototype.hideExecutingQueryAnimation = function () {
                if (this.showingExecutingQueryAnimation) {
                    Coveo.$(this.root).removeClass('coveo-executing-query');
                    this.showingExecutingQueryAnimation = false;
                }
            };
            QueryController.prototype.redirectToSearchPage = function () {
                var stateValues = this.queryStateModel.getAttributes();
                var UACauseBy = this.usageAnalytics.getCurrentEventCause();
                if (UACauseBy != null) {
                    stateValues['firstQueryCause'] = UACauseBy;
                }
                var UAMeta = this.usageAnalytics.getCurrentEventMeta();
                if (UAMeta != null) {
                    stateValues['firstQueryMeta'] = UAMeta;
                }
                window.location.href = this.options.searchPageUri + '#' + Coveo.HashUtils.encodeValues(stateValues);
            };
            QueryController.prototype.getCallOptions = function () {
                var args = {
                    options: {
                        authentication: []
                    }
                };
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.buildingCallOptions, args);
                return args.options;
            };
            QueryController.prototype.buildingQueryEvent = function (args) {
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.buildingQuery, args);
            };
            QueryController.prototype.doneBuildingQueryEvent = function (args) {
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.doneBuildingQuery, args);
            };
            QueryController.prototype.duringQueryEvent = function (args) {
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.duringQuery, args);
            };
            QueryController.prototype.querySuccessEvent = function (args) {
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.querySuccess, args);
            };
            QueryController.prototype.deferredQuerySuccessEvent = function (args) {
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.deferredQuerySuccess, args);
            };
            QueryController.prototype.queryError = function (args) {
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.queryError, args);
            };
            QueryController.prototype.preprocessResultsEvent = function (args) {
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.preprocessResults, args);
            };
            QueryController.prototype.noResultEvent = function (args) {
                Coveo.$(this.element).trigger(Coveo.Events.QueryEvents.noResults, args);
            };
            QueryController.ID = 'QueryController';
            return QueryController;
        })(Coveo.Ui.Component);
        Controllers.QueryController = QueryController;
        Coveo.Ui.CoveoJQuery.registerNamedMethod('executeQuery', function (element) {
            Coveo.Assert.exists(element);
            var queryController = Coveo.Ui.Component.resolveBinding(element, QueryController);
            Coveo.Assert.exists(queryController);
            queryController.executeQuery();
        });
    })(Controllers = Coveo.Controllers || (Coveo.Controllers = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Events;
    (function (Events) {
        var QueryEvents = (function () {
            function QueryEvents() {
            }
            QueryEvents.newQuery = "newQuery";
            QueryEvents.buildingQuery = "buildingQuery";
            QueryEvents.doneBuildingQuery = "doneBuildingQuery";
            QueryEvents.duringQuery = "duringQuery";
            QueryEvents.duringFetchMoreQuery = "duringFetchMoreQuery";
            QueryEvents.querySuccess = "querySuccess";
            QueryEvents.deferredQuerySuccess = "deferredQuerySuccess";
            QueryEvents.queryError = "queryError";
            QueryEvents.preprocessResults = "preprocessResults";
            QueryEvents.noResults = "noResults";
            QueryEvents.buildingCallOptions = "buildingCallOptions";
            return QueryEvents;
        })();
        Events.QueryEvents = QueryEvents;
    })(Events = Coveo.Events || (Coveo.Events = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Events;
    (function (Events) {
        var InitializationEvents = (function () {
            function InitializationEvents() {
            }
            InitializationEvents.beforeInitialization = "beforeInitialization";
            InitializationEvents.afterComponentsInitialization = "afterComponentsInitialization";
            InitializationEvents.restoreHistoryState = "restoreHistoryState";
            InitializationEvents.afterInitialization = "afterInitialization";
            return InitializationEvents;
        })();
        Events.InitializationEvents = InitializationEvents;
    })(Events = Coveo.Events || (Coveo.Events = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Events;
    (function (Events) {
        var ResultListEvents = (function () {
            function ResultListEvents() {
            }
            ResultListEvents.newResultsDisplayed = "newResultsDisplayed";
            ResultListEvents.newResultDisplayed = "newResultDisplayed";
            return ResultListEvents;
        })();
        Events.ResultListEvents = ResultListEvents;
    })(Events = Coveo.Events || (Coveo.Events = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Events;
    (function (Events) {
        var ImageResultListEvents = (function () {
            function ImageResultListEvents() {
            }
            ImageResultListEvents.imageResultsLayoutComplete = "imageResultsLayoutComplete";
            return ImageResultListEvents;
        })();
        Events.ImageResultListEvents = ImageResultListEvents;
    })(Events = Coveo.Events || (Coveo.Events = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Events;
    (function (Events) {
        var UserActionEvents = (function () {
            function UserActionEvents() {
            }
            UserActionEvents.enterOnSearchBox = "enterOnSearchBox";
            UserActionEvents.quickViewLoaded = "quickViewLoaded";
            return UserActionEvents;
        })();
        Events.UserActionEvents = UserActionEvents;
    })(Events = Coveo.Events || (Coveo.Events = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Events;
    (function (Events) {
        var PreferencesPanelEvents = (function () {
            function PreferencesPanelEvents() {
            }
            PreferencesPanelEvents.savePreferences = "savePreferences";
            PreferencesPanelEvents.exitPreferencesWithoutSave = "exitPreferencesWithoutSave";
            return PreferencesPanelEvents;
        })();
        Events.PreferencesPanelEvents = PreferencesPanelEvents;
    })(Events = Coveo.Events || (Coveo.Events = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var SearchInterface = (function (_super) {
            __extends(SearchInterface, _super);
            function SearchInterface(element, options, analyticsOptions, _window) {
                var _this = this;
                if (_window === void 0) { _window = window; }
                _super.call(this, element, SearchInterface.ID);
                this.element = element;
                this.options = options;
                this.analyticsOptions = analyticsOptions;
                this.options = Ui.ComponentOptions.initComponentOptions(element, SearchInterface, options);
                Coveo.Assert.exists(element);
                Coveo.Assert.exists(this.options);
                if (this.options.hideUntilFirstQuery) {
                    this.showAndHideFirstQueryAnimation();
                }
                this.root = element;
                this.usageAnalytics = this.initializeAnalytics();
                this.queryStateModel = new Coveo.Models.QueryStateModel(element);
                this.componentStateModel = new Coveo.Models.ComponentStateModel(element);
                this.componentOptionsModel = new Coveo.Models.ComponentOptionsModel(element);
                this.queryController = new Coveo.Controllers.QueryController(element, this.options);
                this.searchInterface = this;
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.preprocess);
                Coveo.$(this.element).on(eventName, function (e, args) { return _this.handlePreprocessQueryStateModel(args); });
                if (this.options.enableHistory) {
                    new Coveo.Controllers.HistoryController(element, _window, this.queryStateModel, this.queryController);
                }
                else {
                    Coveo.$(this.element).on(Coveo.Events.InitializationEvents.restoreHistoryState, function () { return _this.queryStateModel.setMultiple(_this.queryStateModel.defaultAttributes); });
                }
                if (this.options.enableDebugInfo) {
                    //Debug component might not be present in the source file : check for it first
                    var debugRef = Ui.Component.getComponentRef("Debug");
                    if (debugRef) {
                        setTimeout(function () { return new debugRef(element); });
                    }
                    else {
                        this.logger.warn('Options to enable debug component was true, but not present in the Coveo object (not compiled)');
                    }
                }
            }
            SearchInterface.prototype.initializeAnalytics = function () {
                var analyticsRef = Ui.Component.getComponentRef("Analytics");
                if (analyticsRef) {
                    return analyticsRef.makeSingleton(this.element, this.analyticsOptions, this.getBindings());
                }
                return new Ui.NoopAnalyticsClient();
            };
            SearchInterface.prototype.showAndHideFirstQueryAnimation = function () {
                var _this = this;
                this.displayFirstQueryWaitAnimation();
                // On first query success, wait for call stack to finish, then remove the animation
                Coveo.$(this.element).one(Coveo.Events.QueryEvents.querySuccess, function () {
                    Coveo._.defer(function () { return _this.hideFirstQueryWaitAnimation(); });
                });
                Coveo.$(this.element).on(Coveo.Events.QueryEvents.queryError, function () {
                    Coveo._.defer(function () { return _this.hideFirstQueryWaitAnimation(); });
                });
            };
            SearchInterface.prototype.displayFirstQueryWaitAnimation = function () {
                Coveo.$(this.options.firstLoadingAnimation).remove();
                Coveo.$(this.element).addClass('coveo-waiting-for-first-query');
                Coveo.$(this.element).append(this.options.firstLoadingAnimation);
            };
            SearchInterface.prototype.hideFirstQueryWaitAnimation = function () {
                Coveo.$(this.options.firstLoadingAnimation).remove();
                Coveo.$(this.element).removeClass('coveo-waiting-for-first-query');
            };
            SearchInterface.prototype.handlePreprocessQueryStateModel = function (args) {
                var tgFromModel = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.tg);
                var tFromModel = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.t);
                var tg = tgFromModel;
                var t = tFromModel;
                // if you want to set the tab group
                if (args.tg !== undefined) {
                    args.tg = this.getTabGroupId(args.tg);
                    if (tg != args.tg) {
                        args.t = args.t || Coveo.Models.QueryStateModel.defaultAttributes.t;
                        args.sort = args.sort || Coveo.Models.QueryStateModel.defaultAttributes.sort;
                        tg = args.tg;
                    }
                }
                if (args.t !== undefined) {
                    args.t = this.getTabId(tg, args.t);
                    if (t != args.t) {
                        args.sort = args.sort || Coveo.Models.QueryStateModel.defaultAttributes.sort;
                        t = args.t;
                    }
                }
                if (args.sort !== undefined) {
                    args.sort = this.getSort(t, args.sort);
                }
            };
            SearchInterface.prototype.getTabGroupId = function (tabGroupId) {
                var tabGroupRef = Ui.Component.getComponentRef("TabGroup");
                if (tabGroupRef) {
                    var tabGroups = this.searchInterface.components(tabGroupRef.ID);
                    // check if the tabgroup is correct
                    if (tabGroupId != Coveo.Models.QueryStateModel.defaultAttributes.tg && Coveo._.any(tabGroups, function (tabGroup) { return !tabGroup.disabled && tabGroupId == tabGroup.options.id; })) {
                        return tabGroupId;
                    }
                    // select the first tabGroup
                    if (tabGroups.length > 0) {
                        return tabGroups[0].options.id;
                    }
                }
                return Coveo.Models.QueryStateModel.defaultAttributes.tg;
            };
            SearchInterface.prototype.getTabId = function (tabGroupId, tabId) {
                var tabRef = Ui.Component.getComponentRef("Tab");
                var tabGroupRef = Ui.Component.getComponentRef("TabGroup");
                if (tabRef) {
                    var tabs = this.searchInterface.components(tabRef.ID);
                    if (tabGroupRef) {
                        // if has a tabGroup
                        if (tabGroupId != Coveo.Models.QueryStateModel.defaultAttributes.tg) {
                            var tabGroups = this.searchInterface.components(tabGroupRef.ID);
                            var tabGroup = Coveo._.find(tabGroups, function (tabGroup) { return tabGroupId == tabGroup.options.id; });
                            // check if the tabgroup contain this tab
                            if (tabId != Coveo.Models.QueryStateModel.defaultAttributes.t && Coveo._.any(tabs, function (tab) { return tabId == tab.options.uniqueId && tabGroup.isElementIncludedInTabGroup(tab.element); })) {
                                return tabId;
                            }
                            // select the first tab in the tabGroup
                            var tab = Coveo._.find(tabs, function (tab) { return tabGroup.isElementIncludedInTabGroup(tab.element); });
                            if (tab != null) {
                                return tab.options.uniqueId;
                            }
                            return Coveo.Models.QueryStateModel.defaultAttributes.t;
                        }
                    }
                    // check if the tab is correct
                    if (tabId != Coveo.Models.QueryStateModel.defaultAttributes.t && Coveo._.any(tabs, function (tab) { return tabId == tab.options.uniqueId; })) {
                        return tabId;
                    }
                    // select the first tab
                    if (tabs.length > 0) {
                        return tabs[0].options.uniqueId;
                    }
                }
                return Coveo.Models.QueryStateModel.defaultAttributes.t;
            };
            SearchInterface.prototype.getSort = function (tabId, sortId) {
                var sortRef = Ui.Component.getComponentRef("Sort");
                if (sortRef) {
                    var sorts = this.searchInterface.components(sortRef.ID);
                    // if has a selected tab
                    var tabRef = Ui.Component.getComponentRef("Tab");
                    if (tabRef) {
                        if (tabId != Coveo.Models.QueryStateModel.defaultAttributes.t) {
                            var tabs = this.searchInterface.components(tabRef.ID);
                            var tab = Coveo._.find(tabs, function (tab) { return tabId == tab.options.uniqueId; });
                            var sortCriteria = tab.options.sort;
                            // check if the tab contain this sort
                            if (sortId != Coveo.Models.QueryStateModel.defaultAttributes.sort && Coveo._.any(sorts, function (sort) { return tab.isElementIncludedInTab(sort.element) && sort.match(sortId); })) {
                                return sortId;
                            }
                            else if (sortCriteria != null) {
                                // if not and tab.options.sort is set apply it
                                return sortCriteria.toString();
                            }
                            // select the first sort in the tab
                            var sort = Coveo._.find(sorts, function (sort) { return tab.isElementIncludedInTab(sort.element); });
                            if (sort != null) {
                                return sort.options.sortCriteria[0].toString();
                            }
                            return Coveo.Models.QueryStateModel.defaultAttributes.sort;
                        }
                    }
                    // check if the sort is correct
                    if (sortId != Coveo.Models.QueryStateModel.defaultAttributes.sort && Coveo._.any(sorts, function (sort) { return sort.match(sortId); })) {
                        return sortId;
                    }
                    // select the first sort
                    if (sorts.length > 0) {
                        return sorts[0].options.sortCriteria[0].toString();
                    }
                }
                return Coveo.Models.QueryStateModel.defaultAttributes.sort;
            };
            SearchInterface.prototype.attachComponent = function (type, component) {
                this.components(type).push(component);
            };
            SearchInterface.prototype.detachComponent = function (type, component) {
                var components = this.components(type);
                var index = Coveo._.indexOf(components, component);
                if (index > -1) {
                    components.splice(index, 1);
                }
            };
            SearchInterface.prototype.components = function (type) {
                if (this.attachedComponents == null) {
                    this.attachedComponents = {};
                }
                if (!(type in this.attachedComponents)) {
                    this.attachedComponents[type] = [];
                }
                return this.attachedComponents[type];
            };
            SearchInterface.ID = 'SearchInterface';
            SearchInterface.options = {
                searchPageUri: Ui.ComponentOptions.buildStringOption(),
                enableHistory: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                resultsPerPage: Ui.ComponentOptions.buildNumberOption({ defaultValue: 10 }),
                excerptLength: Ui.ComponentOptions.buildNumberOption({ defaultValue: 200 }),
                hiddenExpression: Ui.ComponentOptions.buildStringOption({ defaultValue: '' }),
                filterField: Ui.ComponentOptions.buildStringOption({ defaultValue: '' }),
                hideUntilFirstQuery: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                firstLoadingAnimation: Ui.ComponentOptions.buildChildHtmlElementOption({
                    childSelector: ".coveo-first-loading-animation",
                    defaultFunction: function () { return Coveo.JQueryUtils.getBasicLoadingAnimation().get(0); }
                }),
                autoTriggerQuery: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                endpoint: Ui.ComponentOptions.buildCustomOption(function (endpoint) { return endpoint != null && endpoint in Coveo.Rest.SearchEndpoint.endpoints ? Coveo.Rest.SearchEndpoint.endpoints[endpoint] : null; }, { defaultFunction: function () { return Coveo.Rest.SearchEndpoint.endpoints['default']; } }),
                timezone: Ui.ComponentOptions.buildStringOption({ defaultFunction: function () { return jstz.determine().name(); } }),
                enableDebugInfo: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true })
            };
            return SearchInterface;
        })(Ui.Component);
        Ui.SearchInterface = SearchInterface;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Aggregate = (function (_super) {
            __extends(Aggregate, _super);
            function Aggregate(element, options, bindings) {
                _super.call(this, element, Aggregate.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, Aggregate, options);
                this.bind.onRoot(Coveo.Events.QueryEvents.buildingQuery, this.handleBuildingQuery);
                this.bind.onRoot(Coveo.Events.QueryEvents.querySuccess, this.handleQuerySuccess);
                Coveo.$(this.element).hide();
            }
            Aggregate.prototype.handleBuildingQuery = function (e, args) {
                var gbr = {
                    field: this.options.field,
                    maximumNumberOfValues: 0,
                    computedFields: [{
                        field: this.options.field,
                        operation: this.options.operation
                    }]
                };
                this.index = args.queryBuilder.groupByRequests.length;
                args.queryBuilder.groupByRequests.push(gbr);
            };
            Aggregate.prototype.handleQuerySuccess = function (e, args) {
                if (Coveo._.isNumber(this.index) && args.results.groupByResults.length != 0) {
                    var gbr = args.results.groupByResults[this.index];
                    var aggregate = gbr.globalComputedFieldResults[0];
                    Coveo.$(this.element).text(Globalize.format(aggregate, this.options.format));
                    Coveo.$(this.element).show();
                }
                else {
                    Coveo.$(this.element).hide();
                }
            };
            Aggregate.ID = 'Aggregate';
            Aggregate.options = {
                field: Ui.ComponentOptions.buildStringOption(),
                operation: Ui.ComponentOptions.buildStringOption({ defaultValue: 'sum' }),
                format: Ui.ComponentOptions.buildStringOption({ defaultValue: 'c0' })
            };
            return Aggregate;
        })(Ui.Component);
        Ui.Aggregate = Aggregate;
        Ui.CoveoJQuery.registerAutoCreateComponent(Aggregate);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Rest;
    (function (Rest) {
        var AnalyticsEndpoint = (function () {
            function AnalyticsEndpoint(options) {
                this.options = options;
                this.logger = new Coveo.Logger(this);
            }
            AnalyticsEndpoint.prototype.sendSearchEvents = function (searchEvents) {
                if (searchEvents.length > 0) {
                    this.logger.info('Logging analytics search events', searchEvents);
                    this.sendEventToApi(searchEvents, 'searches', 'searchEvents');
                }
            };
            AnalyticsEndpoint.prototype.sendDocumentViewEvent = function (documentViewEvent) {
                Coveo.Assert.exists(documentViewEvent);
                this.logger.info('Logging analytics document view', documentViewEvent);
                this.sendEventToApi(documentViewEvent, 'click', 'clickEvent');
            };
            AnalyticsEndpoint.prototype.sendCustomEvent = function (customEvent) {
                Coveo.Assert.exists(customEvent);
                this.logger.info('Logging analytics custom event', customEvent);
                this.sendEventToApi(customEvent, 'custom', 'customEvent');
            };
            AnalyticsEndpoint.prototype.getTopQueries = function (params) {
                var url = Coveo.QueryUtils.mergePath(this.options.serviceUrl, "/rest/" + (AnalyticsEndpoint.CUSTOM_ANALYTICS_VERSION || AnalyticsEndpoint.DEFAULT_ANALYTICS_VERSION) + "/stats/topQueries");
                return this.getFromService(url, params);
            };
            AnalyticsEndpoint.prototype.sendEventToApi = function (data, path, paramName) {
                var url = Coveo.QueryUtils.mergePath(this.options.serviceUrl, '/rest/' + (AnalyticsEndpoint.CUSTOM_ANALYTICS_VERSION || AnalyticsEndpoint.DEFAULT_ANALYTICS_VERSION) + '/analytics/' + path);
                url = this.appendUrlParamSign(url);
                url += paramName + '=' + encodeURIComponent(JSON.stringify(data));
                if (this.options.token && this.options.token != "") {
                    url += "&access_token=" + encodeURIComponent(this.options.token);
                }
                if (Coveo.Utils.isNonEmptyString(this.options.userId)) {
                    url += "&user=" + encodeURIComponent(this.options.userId);
                }
                return Coveo.$.ajax({
                    url: url,
                    dataType: 'jsonp'
                });
            };
            AnalyticsEndpoint.prototype.appendUrlParamSign = function (url) {
                if (url.charAt(url.length - 1) == "?") {
                    return url;
                }
                else {
                    return url + "?";
                }
            };
            AnalyticsEndpoint.prototype.getFromService = function (url, params) {
                var paramsToSend = (this.options.token && this.options.token != "") ? Coveo.$.extend({ "access_token": this.options.token }, params) : params;
                return Coveo.$.ajax({
                    url: this.appendUrlParamSign(url) + this.buildQueryStringFromParam(paramsToSend),
                    dataType: 'jsonp'
                });
            };
            AnalyticsEndpoint.prototype.buildQueryStringFromParam = function (params) {
                var linked = Coveo._.map(Coveo._.pairs(params), function (pair) {
                    return pair[0] + "=" + pair[1];
                });
                return linked.join("&");
            };
            AnalyticsEndpoint.DEFAULT_ANALYTICS_URI = "https://usageanalytics.coveo.com";
            AnalyticsEndpoint.DEFAULT_ANALYTICS_VERSION = "v10";
            AnalyticsEndpoint.CUSTOM_ANALYTICS_VERSION = undefined;
            return AnalyticsEndpoint;
        })();
        Rest.AnalyticsEndpoint = AnalyticsEndpoint;
    })(Rest = Coveo.Rest || (Coveo.Rest = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var PendingSearchEvent = (function () {
            function PendingSearchEvent(_root, _endpoint, _templateSearchEvent, _sendToCloud) {
                this._root = _root;
                this._endpoint = _endpoint;
                this._templateSearchEvent = _templateSearchEvent;
                this._sendToCloud = _sendToCloud;
                this.searchDeferred = [];
                this.searchEvents = [];
                this.results = [];
                this._cancelled = false;
                this._finished = false;
                Coveo.Assert.exists(_root);
                Coveo.Assert.exists(_endpoint);
                Coveo.Assert.exists(_templateSearchEvent);
                this.handler = Coveo.$.proxy(this._handleDuringQuery, this);
                Coveo.$(_root).on(Coveo.Events.QueryEvents.duringQuery + ' ' + Coveo.Events.QueryEvents.duringFetchMoreQuery, this.handler);
            }
            PendingSearchEvent.prototype.getEventCause = function () {
                return this._templateSearchEvent.actionCause;
            };
            PendingSearchEvent.prototype.getEventMeta = function () {
                return this._templateSearchEvent.customData;
            };
            PendingSearchEvent.prototype.cancel = function () {
                this._stopRecording();
                this._cancelled = true;
            };
            PendingSearchEvent.prototype._handleDuringQuery = function (e, args) {
                var _this = this;
                Coveo.Assert.check(!this._finished);
                Coveo.Assert.check(!this._cancelled);
                // When synchronizing multiple search interfaces under a single search event
                // (think Salesforce boxes), we need to collect all search events and send them
                // in one single batch. So we gather all events until we idle out and then we
                // monitor those before sending the data.
                this.searchDeferred.push(args.deferred);
                // TODO: Maybe a better way to grab the search interface?
                var searchInterface = Ui.Component.get(e.target, Ui.SearchInterface);
                Coveo.Assert.exists(searchInterface);
                // TODO: Maybe a better way to grab the query controller?
                var queryController = Ui.Component.get(e.target, Coveo.Controllers.QueryController);
                Coveo.Assert.exists(queryController);
                args.deferred.done(function (queryResults) {
                    Coveo.Assert.exists(queryResults);
                    Coveo.Assert.check(!_this._finished);
                    var searchEvent = Coveo._.extend({}, _this._templateSearchEvent);
                    _this.fillSearchEvent(searchEvent, searchInterface, args.query, queryResults);
                    _this.searchEvents.push(searchEvent);
                    _this.results.push(queryResults);
                }).always(function () {
                    var index = Coveo._.indexOf(_this.searchDeferred, args.deferred);
                    _this.searchDeferred.splice(index, 1);
                    if (_this.searchDeferred.length == 0) {
                        _this.flush();
                    }
                });
            };
            PendingSearchEvent.prototype._stopRecording = function () {
                if (this.handler) {
                    Coveo.$(this._root).off(Coveo.Events.QueryEvents.duringQuery + ' ' + Coveo.Events.QueryEvents.duringFetchMoreQuery, this.handler);
                    this.handler = undefined;
                }
            };
            PendingSearchEvent.prototype.flush = function () {
                var _this = this;
                if (!this._cancelled) {
                    this._stopRecording();
                    this._finished = true;
                    Coveo.Assert.check(this.searchEvents.length == this.results.length);
                    Coveo.Defer.defer(function () {
                        if (_this._sendToCloud) {
                            _this._endpoint.sendSearchEvents(_this.searchEvents);
                        }
                        var apiSearchEvents = Coveo._.map(_this.searchEvents, function (searchEvent) {
                            return Coveo.Rest.APIAnalyticsBuilder.convertSearchEventToAPI(searchEvent);
                        });
                        Coveo.$(_this._root).trigger(Coveo.Events.AnalyticsEvents.searchEvent, { searchEvents: apiSearchEvents });
                    });
                }
            };
            PendingSearchEvent.prototype.fillSearchEvent = function (searchEvent, searchInterface, query, queryResults) {
                Coveo.Assert.exists(searchEvent);
                Coveo.Assert.exists(searchInterface);
                Coveo.Assert.exists(query);
                Coveo.Assert.exists(queryResults);
                var currentQuery = searchInterface.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.q);
                searchEvent.originLevel2 = searchEvent.originLevel2 || searchInterface.queryStateModel.get('t') || "default";
                searchEvent.queryText = currentQuery || query.q || ''; // do not log the query sent to the server if possible; it may contain added syntax depending on options
                searchEvent.advancedQuery = query.aq || '';
                searchEvent.didYouMean = query.enableDidYouMean;
                searchEvent.results = this.convertResults(queryResults);
                searchEvent.responseTime = queryResults.duration;
                searchEvent.pageNumber = (query.firstResult / query.numberOfResults);
                searchEvent.resultsPerPage = query.numberOfResults;
                searchEvent.facets = this.convertFacets();
                searchEvent.searchQueryUid = queryResults.searchUid;
            };
            PendingSearchEvent.prototype.convertResults = function (results) {
                Coveo.Assert.exists(results);
                var resultsToReturn = [];
                Coveo.$.each(results.results, function (index, result) {
                    resultsToReturn.push({
                        clickUri: result.clickUri,
                        documentUri: result.uri,
                        documentUriHash: result.raw["sysurihash"]
                    });
                });
                return resultsToReturn;
            };
            PendingSearchEvent.prototype.convertFacets = function () {
                var _this = this;
                var facetsToReturn = [];
                var facetRef = Ui.Component.getComponentRef("Facet");
                if (facetRef) {
                    Coveo.$.each(Coveo.$(this.getFacetSelector(facetRef)), function (index, facet) {
                        var facet = Coveo.$(facet).coveo();
                        if (!facet.disabled) {
                            facetsToReturn.push({
                                fieldName: facet.options.field,
                                mode: facet.options.useAnd ? "and" : "or",
                                name: facet.options.title,
                                sort: facet.options.sortCriteria,
                                selections: _this.convertFacetValues(facet)
                            });
                        }
                    });
                }
                return facetsToReturn;
            };
            PendingSearchEvent.prototype.getFacetSelector = function (facetRef) {
                return [
                    "." + Ui.Component.computeCssClassNameForType(facetRef.ID),
                    "." + Ui.Component.computeCssClassNameForType(facetRef.ID)
                ].join(", ");
            };
            PendingSearchEvent.prototype.convertFacetValues = function (facet) {
                Coveo.Assert.exists(facet);
                return this.convertClassicFacetValues(facet);
            };
            PendingSearchEvent.prototype.convertClassicFacetValues = function (facet) {
                var selectedValues = [];
                if (!facet.disabled) {
                    Coveo.$.each(facet.getSelectedValues(), function (index, value) {
                        selectedValues.push({
                            entryName: value,
                            status: 'INCLUDE'
                        });
                    });
                    Coveo.$.each(facet.getExcludedValues(), function (index, value) {
                        selectedValues.push({
                            entryName: value,
                            status: 'EXCLUDE'
                        });
                    });
                }
                return selectedValues;
            };
            return PendingSearchEvent;
        })();
        Ui.PendingSearchEvent = PendingSearchEvent;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var PendingSearchAsYouTypeSearchEvent = (function (_super) {
            __extends(PendingSearchAsYouTypeSearchEvent, _super);
            function PendingSearchAsYouTypeSearchEvent(_root, _endpoint, _templateSearchEvent, _sendToCloud) {
                _super.call(this, _root, _endpoint, _templateSearchEvent, _sendToCloud);
                this._root = _root;
                this._endpoint = _endpoint;
                this._templateSearchEvent = _templateSearchEvent;
                this._sendToCloud = _sendToCloud;
                this.delayBeforeSending = 5000;
                this.armBatchDelay = 50;
                this.beforeUnloadHandler = Coveo.$.proxy(this.onWindowUnload, this);
                Coveo.$(window).on('beforeunload', this.beforeUnloadHandler);
            }
            PendingSearchAsYouTypeSearchEvent.prototype._handleDuringQuery = function (e, args) {
                var _this = this;
                this.toSendRightNow = function () {
                    if (!_this.isCancelledOrFinished()) {
                        _super.prototype._handleDuringQuery.call(_this, e, args);
                    }
                };
                Coveo._.delay(function () {
                    _this.toSendRightNow();
                }, this.delayBeforeSending);
            };
            PendingSearchAsYouTypeSearchEvent.prototype.sendRightNow = function () {
                if (this.toSendRightNow) {
                    this.toSendRightNow();
                }
            };
            PendingSearchAsYouTypeSearchEvent.prototype._stopRecording = function () {
                _super.prototype._stopRecording.call(this);
                if (this.beforeUnloadHandler) {
                    Coveo.$(window).off('beforeunload', this.beforeUnloadHandler);
                    this.beforeUnloadHandler = undefined;
                }
            };
            PendingSearchAsYouTypeSearchEvent.prototype.onWindowUnload = function () {
                if (!this.isCancelledOrFinished()) {
                    this.armBatchDelay = 0;
                    this.sendRightNow();
                }
            };
            PendingSearchAsYouTypeSearchEvent.prototype.isCancelledOrFinished = function () {
                if (!this._cancelled) {
                    if (this._finished) {
                        this.cancel();
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return true;
                }
            };
            return PendingSearchAsYouTypeSearchEvent;
        })(Ui.PendingSearchEvent);
        Ui.PendingSearchAsYouTypeSearchEvent = PendingSearchAsYouTypeSearchEvent;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Events;
    (function (Events) {
        var AnalyticsEvents = (function () {
            function AnalyticsEvents() {
            }
            AnalyticsEvents.searchEvent = "analyticsSearchEvent";
            AnalyticsEvents.documentViewEvent = "analyticsDocumentViewEvent";
            AnalyticsEvents.customEvent = "analyticsCustomEvent";
            AnalyticsEvents.changeAnalyticsCustomData = "changeAnalyticsCustomData";
            return AnalyticsEvents;
        })();
        Events.AnalyticsEvents = AnalyticsEvents;
    })(Events = Coveo.Events || (Coveo.Events = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Rest;
    (function (Rest) {
        /*
         Decorates the Analytics Endpoint and triggers specific events for analytics
         */
        var APIAnalyticsBuilder = (function () {
            function APIAnalyticsBuilder() {
            }
            APIAnalyticsBuilder.convertSearchEventToAPI = function (searchEvent) {
                var apiSearchEvent = {
                    advancedQuery: searchEvent.advancedQuery,
                    customMetadatas: searchEvent.customData,
                    device: searchEvent.device,
                    didYouMean: searchEvent.didYouMean,
                    facets: APIAnalyticsBuilder.convertFacetToAPI(searchEvent.facets),
                    language: searchEvent.language,
                    pageNumber: searchEvent.pageNumber,
                    queryText: searchEvent.queryText,
                    responseTime: searchEvent.responseTime,
                    results: APIAnalyticsBuilder.convertResultsToAPI(searchEvent.results),
                    resultsPerPage: searchEvent.resultsPerPage,
                    searchHub: searchEvent.originLevel1,
                    searchInterface: searchEvent.originLevel2,
                    searchQueryUid: searchEvent.searchQueryUid,
                    type: searchEvent.actionType,
                    actionCause: searchEvent.actionCause
                };
                return apiSearchEvent;
            };
            APIAnalyticsBuilder.convertFacetToAPI = function (facets) {
                var apiFacets = Coveo._.map(facets, function (facet) {
                    return {
                        fieldName: facet.fieldName,
                        mode: facet.mode,
                        name: facet.name,
                        selections: APIAnalyticsBuilder.convertFacetSelectionToAPI(facet.selections),
                        sort: facet.sort
                    };
                });
                return apiFacets;
            };
            APIAnalyticsBuilder.convertFacetSelectionToAPI = function (facetSelections) {
                var apiFacetSelections = Coveo._.map(facetSelections, function (facetSelection) {
                    return {
                        entryName: facetSelection.entryName,
                        status: facetSelection.status
                    };
                });
                return apiFacetSelections;
            };
            APIAnalyticsBuilder.convertResultsToAPI = function (results) {
                var apiResults = Coveo._.map(results, function (result) {
                    return {
                        clickUri: result.clickUri,
                        documentUri: result.documentUri,
                        documentUriHash: result.documentUriHash
                    };
                });
                return apiResults;
            };
            APIAnalyticsBuilder.convertDocumentViewToAPI = function (documentView) {
                var apiDocumentView = {
                    collectionName: documentView.collectionName,
                    device: documentView.device,
                    documentPosition: documentView.documentPosition,
                    title: documentView.customMetadata1,
                    documentClickUri: documentView.customMetadata2,
                    documentUri: documentView.documentUri,
                    documentUriHash: documentView.documentUriHash,
                    language: documentView.language,
                    responseTime: documentView.responseTime,
                    searchHub: documentView.originLevel1,
                    searchInterface: documentView.originLevel2,
                    searchQueryUid: documentView.searchQueryUid,
                    sourceName: documentView.sourceName,
                    viewMethod: documentView.viewMethod,
                    customMetadatas: documentView.customData,
                    actionCause: documentView.actionCause
                };
                return apiDocumentView;
            };
            APIAnalyticsBuilder.convertCustomEventToAPI = function (customEvent) {
                var apiCustomEvent = {
                    actionCause: customEvent.actionCause,
                    actionType: customEvent.actionType,
                    device: customEvent.device,
                    language: customEvent.language,
                    responseTime: customEvent.responseTime,
                    searchHub: customEvent.originLevel1,
                    searchInterface: customEvent.originLevel2,
                    customMetadatas: customEvent.customData
                };
                return apiCustomEvent;
            };
            return APIAnalyticsBuilder;
        })();
        Rest.APIAnalyticsBuilder = APIAnalyticsBuilder;
    })(Rest = Coveo.Rest || (Coveo.Rest = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var LiveAnalyticsClient = (function () {
            function LiveAnalyticsClient(endpoint, rootElement, originLevel1, sendToCloud) {
                this.endpoint = endpoint;
                this.rootElement = rootElement;
                this.originLevel1 = originLevel1;
                this.sendToCloud = sendToCloud;
                this.isContextual = false;
                this.language = String['locale'];
                this.device = Coveo.DeviceUtils.getDeviceName();
                Coveo.Assert.exists(endpoint);
                Coveo.Assert.exists(rootElement);
                Coveo.Assert.isNonEmptyString(this.language);
                Coveo.Assert.isNonEmptyString(this.device);
                Coveo.Assert.isNonEmptyString(this.originLevel1);
            }
            LiveAnalyticsClient.prototype.isActivated = function () {
                return true;
            };
            LiveAnalyticsClient.prototype.getCurrentEventCause = function () {
                if (this.pendingSearchEvent != null) {
                    return this.pendingSearchEvent.getEventCause();
                }
                if (this.pendingSearchAsYouTypeSearchEvent != null) {
                    return this.pendingSearchAsYouTypeSearchEvent.getEventCause();
                }
                return null;
            };
            LiveAnalyticsClient.prototype.getCurrentEventMeta = function () {
                if (this.pendingSearchEvent != null) {
                    return this.pendingSearchEvent.getEventMeta();
                }
                if (this.pendingSearchAsYouTypeSearchEvent != null) {
                    return this.pendingSearchAsYouTypeSearchEvent.getEventMeta();
                }
                return null;
            };
            LiveAnalyticsClient.prototype.logSearchEvent = function (actionCause, meta) {
                var metaObject = this.buildMetaObject(actionCause, meta);
                this.pushSearchEvent(actionCause, metaObject);
            };
            LiveAnalyticsClient.prototype.logSearchAsYouType = function (actionCause, meta) {
                var metaObject = this.buildMetaObject(actionCause, meta);
                this.pushSearchAsYouTypeEvent(actionCause, metaObject);
            };
            LiveAnalyticsClient.prototype.logClickEvent = function (actionCause, meta, result, element) {
                var metaObject = this.buildMetaObject(actionCause, meta);
                this.pushClickEvent(actionCause, metaObject, result, element);
            };
            LiveAnalyticsClient.prototype.logCustomEvent = function (actionCause, meta, element) {
                var metaObject = this.buildMetaObject(actionCause, meta);
                this.pushCustomEvent(actionCause, metaObject, element);
            };
            LiveAnalyticsClient.prototype.getTopQueries = function (params) {
                return this.endpoint.getTopQueries(params);
            };
            LiveAnalyticsClient.prototype.sendAllPendingEvents = function () {
                if (this.pendingSearchAsYouTypeSearchEvent) {
                    this.pendingSearchAsYouTypeSearchEvent.sendRightNow();
                }
            };
            LiveAnalyticsClient.prototype.pushCustomEvent = function (actionCause, metaObject, element) {
                var _this = this;
                var customEvent = this.buildCustomEvent(actionCause, metaObject, element);
                this.triggerChangeAnalyticsCustomData("CustomEvent", metaObject, customEvent);
                this.checkToSendAnyPendingSearchAsYouType(actionCause);
                Coveo.Defer.defer(function () {
                    if (_this.sendToCloud) {
                        _this.endpoint.sendCustomEvent(customEvent);
                    }
                    Coveo.$(_this.rootElement).trigger(Coveo.Events.AnalyticsEvents.customEvent, { customEvent: Coveo.Rest.APIAnalyticsBuilder.convertCustomEventToAPI(customEvent) });
                });
            };
            LiveAnalyticsClient.prototype.pushSearchEvent = function (actionCause, metaObject) {
                var _this = this;
                Coveo.Assert.exists(actionCause);
                if (this.pendingSearchEvent && this.pendingSearchEvent.getEventCause() !== actionCause.name) {
                    this.pendingSearchEvent._stopRecording();
                    this.pendingSearchEvent = null;
                }
                this.checkToSendAnyPendingSearchAsYouType(actionCause);
                if (!this.pendingSearchEvent) {
                    var searchEvent = this.buildSearchEvent(actionCause, metaObject);
                    this.triggerChangeAnalyticsCustomData("SearchEvent", metaObject, searchEvent);
                    var pendingSearchEvent = this.pendingSearchEvent = new Ui.PendingSearchEvent(this.rootElement, this.endpoint, searchEvent, this.sendToCloud);
                    Coveo.Defer.defer(function () {
                        // At this point all duringQuery events should have been fired, so we can forget
                        // about the pending search event. It'll finish processing automatically when
                        // all the deferred that were caught terminate.
                        _this.pendingSearchEvent = undefined;
                        pendingSearchEvent._stopRecording();
                    });
                }
            };
            LiveAnalyticsClient.prototype.checkToSendAnyPendingSearchAsYouType = function (actionCause) {
                if (this.eventIsNotRelatedToSearchBox(actionCause.name)) {
                    this.sendAllPendingEvents();
                }
                else {
                    this.cancelAnyPendingSearchAsYouTypeEvent();
                }
            };
            LiveAnalyticsClient.prototype.pushSearchAsYouTypeEvent = function (actionCause, metaObject) {
                this.cancelAnyPendingSearchAsYouTypeEvent();
                var searchEvent = this.buildSearchEvent(actionCause, metaObject);
                this.triggerChangeAnalyticsCustomData('SearchEvent', metaObject, searchEvent);
                this.pendingSearchAsYouTypeSearchEvent = new Ui.PendingSearchAsYouTypeSearchEvent(this.rootElement, this.endpoint, searchEvent, this.sendToCloud);
            };
            LiveAnalyticsClient.prototype.pushClickEvent = function (actionCause, metaObject, result, element) {
                var _this = this;
                var event = this.buildClickEvent(actionCause, metaObject, result, element);
                this.triggerChangeAnalyticsCustomData("ClickEvent", metaObject, event);
                Coveo.Assert.isNonEmptyString(event.searchQueryUid);
                Coveo.Assert.isNonEmptyString(event.collectionName);
                Coveo.Assert.isNonEmptyString(event.sourceName);
                Coveo.Assert.isNumber(event.documentPosition);
                Coveo.Defer.defer(function () {
                    if (_this.sendToCloud) {
                        _this.endpoint.sendDocumentViewEvent(event);
                    }
                    Coveo.$(_this.rootElement).trigger(Coveo.Events.AnalyticsEvents.documentViewEvent, {
                        documentViewEvent: Coveo.Rest.APIAnalyticsBuilder.convertDocumentViewToAPI(event)
                    });
                });
            };
            LiveAnalyticsClient.prototype.buildAnalyticsEvent = function (actionCause, metaObject) {
                return {
                    actionCause: actionCause.name,
                    actionType: actionCause.type,
                    device: this.device,
                    language: this.language,
                    responseTime: undefined,
                    originLevel1: this.originLevel1,
                    originLevel2: this.resolveActiveTabFromElement(this.rootElement),
                    customData: Coveo._.keys(metaObject.metaDataAsString).length > 0 ? metaObject.metaDataAsString : undefined,
                    customMetadata1: metaObject.metaDataAsNumber["customMetadata1"],
                    customMetadata2: metaObject.metaDataAsNumber["customMetadata2"],
                    customMetadata3: metaObject.metaDataAsNumber["customMetadata3"],
                    customMetadata4: metaObject.metaDataAsNumber["customMetadata4"],
                    customMetadata5: metaObject.metaDataAsNumber["customMetadata5"],
                    userAgent: navigator.userAgent
                };
            };
            LiveAnalyticsClient.prototype.buildSearchEvent = function (actionCause, metaObject) {
                return this.merge(this.buildAnalyticsEvent(actionCause, metaObject), {
                    mobile: Coveo.DeviceUtils.isMobileDevice(),
                    queryText: undefined,
                    advancedQuery: undefined,
                    results: undefined,
                    resultsPerPage: undefined,
                    searchQueryUid: undefined,
                    pageNumber: undefined,
                    didYouMean: undefined,
                    facets: undefined,
                    contextual: this.isContextual
                });
            };
            LiveAnalyticsClient.prototype.buildClickEvent = function (actionCause, metaObject, result, element) {
                return this.merge(this.buildAnalyticsEvent(actionCause, metaObject), {
                    searchQueryUid: result.queryUid,
                    documentUri: result.uri,
                    originLevel2: this.resolveActiveTabFromElement(element) || "default",
                    documentUriHash: result.raw["sysurihash"],
                    collectionName: result.raw['syscollection'],
                    sourceName: result.raw['syssource'],
                    documentPosition: result.index,
                    responseTime: 0,
                    viewMethod: actionCause.name
                });
            };
            LiveAnalyticsClient.prototype.buildCustomEvent = function (actionCause, metaObject, element) {
                return this.merge(this.buildAnalyticsEvent(actionCause, metaObject), {
                    eventType: actionCause.type,
                    eventValue: actionCause.name,
                    originLevel2: this.resolveActiveTabFromElement(element) || "default",
                    responseTime: 0
                });
            };
            LiveAnalyticsClient.prototype.buildMetaObject = function (actionCause, meta) {
                var metaObject = { metaDataAsNumber: {}, metaDataAsString: {} };
                Coveo._.each(meta, function (value, key) {
                    if (actionCause.metaMap != undefined && actionCause.metaMap[key] != undefined) {
                        var numberKey = actionCause.metaMap[key];
                        metaObject.metaDataAsNumber["customMetadata" + numberKey.toString()] = value;
                    }
                    metaObject.metaDataAsString[key] = value;
                });
                metaObject.metaDataAsString["JSUIVersion"] = Coveo.version.lib + ";" + Coveo.version.product;
                return metaObject;
            };
            LiveAnalyticsClient.prototype.cancelAnyPendingSearchAsYouTypeEvent = function () {
                if (this.pendingSearchAsYouTypeSearchEvent) {
                    this.pendingSearchAsYouTypeSearchEvent.cancel();
                    this.pendingSearchAsYouTypeSearchEvent = undefined;
                }
            };
            LiveAnalyticsClient.prototype.resolveActiveTabFromElement = function (element) {
                Coveo.Assert.exists(element);
                var queryStateModel = this.resolveQueryStateModel(element);
                return (queryStateModel && queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.t));
            };
            LiveAnalyticsClient.prototype.resolveQueryStateModel = function (rootElement) {
                return Ui.Component.resolveBinding(rootElement, Coveo.Models.QueryStateModel);
            };
            LiveAnalyticsClient.prototype.eventIsNotRelatedToSearchBox = function (event) {
                return event !== Ui.AnalyticsActionCauseList.searchboxSubmit.name && event !== Ui.AnalyticsActionCauseList.searchboxClear.name;
            };
            LiveAnalyticsClient.prototype.triggerChangeAnalyticsCustomData = function (type, metaObject, event) {
                var changeableAnalyticsDataObject = {
                    language: event.language,
                    originLevel1: event.originLevel1,
                    originLevel2: event.originLevel2,
                    originLevel3: event.originLevel3
                };
                var args = Coveo.$.extend({}, { type: type, metaObject: metaObject }, changeableAnalyticsDataObject);
                Coveo.$(this.rootElement).trigger(Coveo.Events.AnalyticsEvents.changeAnalyticsCustomData, args);
                event.language = args.language;
                event.originLevel1 = args.originLevel1;
                event.originLevel2 = args.originLevel2;
                event.originLevel3 = args.originLevel3;
                event.customData = metaObject.metaDataAsString;
                Coveo._.each(Coveo._.keys(metaObject.metaDataAsNumber), function (key) {
                    event[key] = metaObject.metaDataAsNumber[key];
                });
            };
            LiveAnalyticsClient.prototype.merge = function (first, second) {
                return Coveo.$.extend({}, first, second);
            };
            return LiveAnalyticsClient;
        })();
        Ui.LiveAnalyticsClient = LiveAnalyticsClient;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var MultiAnalyticsClient = (function () {
            function MultiAnalyticsClient(analyticsClients) {
                if (analyticsClients === void 0) { analyticsClients = []; }
                this.analyticsClients = analyticsClients;
                this.isContextual = false;
            }
            MultiAnalyticsClient.prototype.isActivated = function () {
                return Coveo._.some(this.analyticsClients, function (analyticsClient) { return analyticsClient.isActivated(); });
            };
            MultiAnalyticsClient.prototype.getCurrentEventCause = function () {
                return Coveo._.find(Coveo._.map(this.analyticsClients, function (analyticsClient) { return analyticsClient.getCurrentEventCause(); }), function (currentEventCause) { return currentEventCause != null; });
            };
            MultiAnalyticsClient.prototype.getCurrentEventMeta = function () {
                return Coveo._.find(Coveo._.map(this.analyticsClients, function (analyticsClient) { return analyticsClient.getCurrentEventMeta(); }), function (currentEventMeta) { return currentEventMeta != null; });
            };
            MultiAnalyticsClient.prototype.logSearchEvent = function (actionCause, meta) {
                Coveo._.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.logSearchEvent(actionCause, meta); });
            };
            MultiAnalyticsClient.prototype.logSearchAsYouType = function (actionCause, meta) {
                Coveo._.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.logSearchEvent(actionCause, meta); });
            };
            MultiAnalyticsClient.prototype.logClickEvent = function (actionCause, meta, result, element) {
                Coveo._.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.logClickEvent(actionCause, meta, result, element); });
            };
            MultiAnalyticsClient.prototype.logCustomEvent = function (actionCause, meta, element) {
                Coveo._.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.logCustomEvent(actionCause, meta, element); });
            };
            MultiAnalyticsClient.prototype.getTopQueries = function (params) {
                var _this = this;
                var deferer = Coveo.$.Deferred();
                var results = [];
                Coveo._.forEach(this.analyticsClients, function (analyticsClient, i) {
                    analyticsClient.getTopQueries(params).done(function (values) {
                        results[i] = values;
                        var complete = true;
                        for (var i = 0; i < _this.analyticsClients.length && complete; i++) {
                            complete = complete && results[i] != undefined;
                        }
                        if (complete) {
                            deferer.resolve(_this.mergeTopQueries(results, params.pageSize));
                        }
                    });
                });
                return deferer;
            };
            MultiAnalyticsClient.prototype.sendAllPendingEvents = function () {
                Coveo._.each(this.analyticsClients, function (analyticsClient) { return analyticsClient.sendAllPendingEvents(); });
            };
            MultiAnalyticsClient.prototype.mergeTopQueries = function (values, pageSize) {
                var results = [];
                Coveo._.each(values, function (valuesToMerge) { return Coveo._.each(valuesToMerge, function (value) { return results.push(value); }); });
                results.length = Math.min(results.length, pageSize);
                return results;
            };
            return MultiAnalyticsClient;
        })();
        Ui.MultiAnalyticsClient = MultiAnalyticsClient;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Analytics = (function (_super) {
            __extends(Analytics, _super);
            function Analytics(element, options, bindings) {
                if (options === void 0) { options = {}; }
                _super.call(this, element, Analytics.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, Analytics, options);
                if (this.options.token == null) {
                    var defaultEndpoint = Coveo.Rest.SearchEndpoint.endpoints['default'];
                    if (defaultEndpoint) {
                        this.options.token = defaultEndpoint.options.accessToken;
                    }
                }
                this.initializeAnalyticsClient();
                Coveo.Assert.exists(this.client);
            }
            Analytics.makeSingleton = function (element, options) {
                if (!Analytics.analyticsSingleton) {
                    var selector = Ui.Component.computeSelectorForType(Analytics.ID);
                    var jqueryElement = Coveo.$(element);
                    var found = jqueryElement.find(selector).add(jqueryElement.closest(selector));
                    if (found.length == 1) {
                        Analytics.analyticsSingleton = new Analytics(found.get(0), options).client;
                    }
                    else if (found.length > 1) {
                        Analytics.analyticsSingleton = new Ui.MultiAnalyticsClient(Coveo._.map(found, function (element) { return new Analytics(element, options).client; }));
                    }
                    else {
                        Analytics.analyticsSingleton = new Ui.NoopAnalyticsClient();
                    }
                }
                return Analytics.analyticsSingleton;
            };
            Analytics.prototype.initializeAnalyticsClient = function () {
                if (Coveo.Utils.isNonEmptyString(this.options.endpoint)) {
                    var endpoint = new Coveo.Rest.AnalyticsEndpoint({
                        token: this.options.token,
                        userId: this.options.user,
                        serviceUrl: this.options.endpoint
                    });
                    this.client = new Ui.LiveAnalyticsClient(endpoint, this.root || this.element, this.options.searchHub, this.options.sendToCloud);
                }
                else {
                    this.client = new Ui.NoopAnalyticsClient();
                }
            };
            Analytics.ID = 'Analytics';
            Analytics.options = {
                user: Ui.ComponentOptions.buildStringOption(),
                token: Ui.ComponentOptions.buildStringOption(),
                endpoint: Ui.ComponentOptions.buildStringOption({ defaultValue: Coveo.Rest.AnalyticsEndpoint.DEFAULT_ANALYTICS_URI }),
                searchHub: Ui.ComponentOptions.buildStringOption({ defaultValue: 'default' }),
                sendToCloud: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true })
            };
            return Analytics;
        })(Ui.Component);
        Ui.Analytics = Analytics;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var AuthenticationProvider = (function (_super) {
            __extends(AuthenticationProvider, _super);
            function AuthenticationProvider(element, options, bindings) {
                if (options === void 0) { options = {}; }
                _super.call(this, element, AuthenticationProvider.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, AuthenticationProvider, options);
                this.bind.onRoot(Coveo.Events.QueryEvents.buildingCallOptions, this.handleBuildingCallOptions);
                this.bind.onRoot(Coveo.Events.QueryEvents.queryError, this.handleQueryError);
            }
            AuthenticationProvider.prototype.getCssClass = function () {
                return 'coveo-authentication-provider';
            };
            AuthenticationProvider.prototype.getMenuItems = function () {
                var _this = this;
                return [{ text: Ui.l("Reauthenticate", this.options.caption), onOpen: function () { return _this.authenticateWithProvider(); }, onClose: function () { return 0; } }];
            };
            AuthenticationProvider.prototype.handleBuildingCallOptions = function (e, args) {
                args.options.authentication.push(this.options.name);
            };
            AuthenticationProvider.prototype.handleQueryError = function (e, args) {
                if (args.error['provider'] == this.options.name) {
                    this.authenticateWithProvider();
                }
            };
            AuthenticationProvider.prototype.authenticateWithProvider = function () {
                if (this.options.useIFrame) {
                    this.useIFrameToAuthenticate();
                }
                else {
                    this.redirectToAuthenticationProvider();
                }
            };
            AuthenticationProvider.prototype.redirectToAuthenticationProvider = function () {
                this.logger.info("Redirecting to authentication provider " + this.options.name);
                window.location.href = this.getAuthenticationProviderUriForRedirect();
            };
            AuthenticationProvider.prototype.useIFrameToAuthenticate = function () {
                var _this = this;
                this.logger.info("Using iframe to retrieve authentication for provider " + this.options.name);
                var iframe = Coveo.$('<iframe/>').attr('src', this.getAuthenticationProviderUriForIFrame());
                var modalbox;
                if (this.options.showIFrame) {
                    modalbox = this.createPopupForVisibleIFrame(iframe);
                }
                else {
                    modalbox = this.createPopupForWaitMessage(iframe);
                }
                Coveo.$(window).one('message', function () {
                    modalbox.close();
                    iframe.detach();
                    _this.logger.info("Got authentication for provider " + _this.options.name + "; retrying query.");
                    _this.queryController.executeQuery();
                });
            };
            AuthenticationProvider.prototype.createPopupForWaitMessage = function (iframe) {
                var popup = Coveo.$('<div/>').addClass('coveo-waiting-for-authentication-popup').append(Coveo.JQueryUtils.getBasicLoadingDots());
                iframe.hide().appendTo(document.body);
                return Coveo.ModalBox.open(popup, {
                    title: Ui.l("Authenticating", this.options.caption)
                });
            };
            AuthenticationProvider.prototype.createPopupForVisibleIFrame = function (iframe) {
                var popup = Coveo.$('<div/>');
                iframe.addClass('coveo-authentication-iframe').appendTo(popup);
                return Coveo.ModalBox.open(popup, {
                    //title: l.Authenticating(this.options.caption),
                    className: "coveo-authentication-popup"
                });
            };
            AuthenticationProvider.prototype.getAuthenticationProviderUriForRedirect = function () {
                return this.queryController.getEndpoint().getAuthenticationProviderUri(this.options.name, window.location.href, undefined);
            };
            AuthenticationProvider.prototype.getAuthenticationProviderUriForIFrame = function () {
                return this.queryController.getEndpoint().getAuthenticationProviderUri(this.options.name, undefined, 'success');
            };
            AuthenticationProvider.ID = 'AuthenticationProvider';
            AuthenticationProvider.options = {
                name: Ui.ComponentOptions.buildStringOption(),
                caption: Ui.ComponentOptions.buildStringOption({ postProcessing: function (value, options) { return value || options.name; } }),
                useIFrame: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false, attrName: 'data-use-iframe' }),
                showIFrame: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true, attrName: 'data-show-iframe' })
            };
            return AuthenticationProvider;
        })(Ui.Component);
        Ui.AuthenticationProvider = AuthenticationProvider;
        Ui.CoveoJQuery.registerAutoCreateComponent(AuthenticationProvider);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Events;
    (function (Events) {
        var BreadcrumbEvents = (function () {
            function BreadcrumbEvents() {
            }
            BreadcrumbEvents.populateBreadcrumb = "populateBreadcrumb";
            BreadcrumbEvents.clearBreadcrumb = "clearBreadcrumb";
            BreadcrumbEvents.redrawBreadcrumb = "redrawBreadcrumb";
            return BreadcrumbEvents;
        })();
        Events.BreadcrumbEvents = BreadcrumbEvents;
    })(Events = Coveo.Events || (Coveo.Events = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Breadcrumb = (function (_super) {
            __extends(Breadcrumb, _super);
            function Breadcrumb(element, options, bindings) {
                var _this = this;
                _super.call(this, element, Breadcrumb.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, Breadcrumb, options);
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.querySuccess, function () { return _this.handleQuerySuccess(); });
                Coveo.$(this.root).on(Coveo.Events.BreadcrumbEvents.redrawBreadcrumb, function () { return _this.redrawBreadcrumb(); });
                Coveo.$(this.element).hide();
            }
            Breadcrumb.prototype.drawBreadcrumb = function (breadcrumbs) {
                var _this = this;
                this.element.innerHTML = '';
                var clear = Coveo.$('<div />').addClass('coveo-clear-all');
                Coveo.$(this.element).fastToggle(breadcrumbs.length != 0);
                if (!Coveo.DeviceUtils.isMobileDevice()) {
                    Coveo.$(this.element).append(clear);
                }
                for (var i = 0; i < breadcrumbs.length; i++) {
                    Coveo.$(breadcrumbs[i].element).addClass('item').appendTo(this.element);
                }
                if (Coveo.DeviceUtils.isMobileDevice()) {
                    Coveo.$(this.element).append(clear);
                }
                clear.attr("title", Ui.l("ClearAllFilters"));
                clear.append(Coveo.$('<div />').addClass('coveo-icon'));
                this.bind.fastClick(clear, function () {
                    _this.clearBreadcrumbs();
                });
            };
            Breadcrumb.prototype.redrawBreadcrumb = function () {
                this.lastBreadcrumbs ? this.drawBreadcrumb(this.lastBreadcrumbs) : this.drawBreadcrumb(this.getBreadcrumbs());
            };
            Breadcrumb.prototype.handleQuerySuccess = function () {
                this.drawBreadcrumb(this.getBreadcrumbs());
            };
            Breadcrumb.prototype.getBreadcrumbs = function () {
                var args = { breadcrumbs: [] };
                Coveo.$(this.root).trigger(Coveo.Events.BreadcrumbEvents.populateBreadcrumb, args);
                this.logger.debug('Retrieved breadcrumbs', args.breadcrumbs);
                this.lastBreadcrumbs = args.breadcrumbs;
                return args.breadcrumbs;
            };
            Breadcrumb.prototype.clearBreadcrumbs = function () {
                var _this = this;
                var args = {};
                Coveo.$(this.root).trigger(Coveo.Events.BreadcrumbEvents.clearBreadcrumb, args);
                this.logger.debug('Clearing breadcrumbs');
                this.queryController.deferExecuteQuery({ beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.breadcrumbResetAll, {}); } });
            };
            Breadcrumb.ID = 'Breadcrumb';
            Breadcrumb.options = {};
            return Breadcrumb;
        })(Ui.Component);
        Ui.Breadcrumb = Breadcrumb;
        Ui.CoveoJQuery.registerAutoCreateComponent(Breadcrumb);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var SortCriteria = (function () {
            function SortCriteria(sort, direction) {
                if (direction === void 0) { direction = ''; }
                this.sort = sort;
                this.direction = direction;
                Coveo.Assert.isNonEmptyString(sort);
                Coveo.Assert.check(Coveo._.contains(SortCriteria.validSorts, sort) || SortCriteria.sortIsField(sort));
                if (SortCriteria.sortNeedsDirection(sort)) {
                    Coveo.Assert.check(Coveo._.contains(SortCriteria.validDirections, direction));
                }
                else {
                    Coveo.Assert.check(direction == '');
                }
            }
            SortCriteria.prototype.putInQueryBuilder = function (queryBuilder) {
                Coveo.Assert.exists(queryBuilder);
                if (SortCriteria.sortIsField(this.sort)) {
                    queryBuilder.sortCriteria = 'field' + this.direction;
                    queryBuilder.sortField = this.sort;
                }
                else if (this.direction != '') {
                    queryBuilder.sortCriteria = this.sort + this.direction;
                }
                else {
                    queryBuilder.sortCriteria = this.sort;
                }
            };
            SortCriteria.prototype.getValueFromResult = function (result) {
                Coveo.Assert.exists(result);
                if (SortCriteria.sortIsField(this.sort)) {
                    Coveo.Assert.stringStartsWith(this.sort, '@');
                    return result.raw[this.sort.substr(1)];
                }
                else if (this.sort == 'date') {
                    return result.raw['sysdate'];
                }
                else {
                    Coveo.Assert.fail('Cannot retrieve value: ' + this.sort);
                }
            };
            SortCriteria.prototype.toString = function () {
                if (Coveo.Utils.isNonEmptyString(this.direction)) {
                    return this.sort + ' ' + this.direction;
                }
                else {
                    return this.sort;
                }
            };
            SortCriteria.prototype.equals = function (criteria) {
                Coveo.Assert.exists(criteria);
                return criteria.sort == this.sort && criteria.direction == this.direction;
            };
            SortCriteria.parse = function (criteria) {
                Coveo.Assert.isNonEmptyString(criteria);
                var split = criteria.split(" ");
                return new SortCriteria(split[0], split[1]);
            };
            SortCriteria.sortIsField = function (criteria) {
                return criteria.substr(0, 1) == "@";
            };
            SortCriteria.sortNeedsDirection = function (sort) {
                return Coveo._.contains(SortCriteria.sortsNeedingDirection, sort) || SortCriteria.sortIsField(sort);
            };
            SortCriteria.validSorts = ["relevancy", "date", "qre"];
            SortCriteria.sortsNeedingDirection = ["date"];
            SortCriteria.validDirections = ["ascending", "descending"];
            return SortCriteria;
        })();
        Ui.SortCriteria = SortCriteria;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Tab = (function (_super) {
            __extends(Tab, _super);
            function Tab(element, options, bindings) {
                _super.call(this, element, Tab.ID, bindings);
                this.element = element;
                this.options = options;
                this.iconTemplate = Coveo._.template("<span class='coveo-icon <%= icon %>'></span>");
                this.tabTemplate = Coveo._.template("<span><%= caption %></span>");
                this.isFirstQuery = true;
                this.options = Ui.ComponentOptions.initComponentOptions(element, Tab, options);
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.buildingQuery, Coveo.$.proxy(this.handleBuildingQuery, this));
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + Coveo.Models.QueryStateModel.attributesEnum.t);
                Coveo.$(this.root).on(eventName, Coveo.$.proxy(this.handleQueryStateChanged, this));
                this.render();
                Coveo.$(this.element).fastClick(Coveo.$.proxy(this.handleClick, this));
            }
            Tab.prototype.select = function () {
                this.queryStateModel.setMultiple({
                    t: this.options.uniqueId,
                    sort: Coveo.Models.QueryStateModel.defaultAttributes.sort
                });
            };
            Tab.prototype.handleClick = function (e) {
                var _this = this;
                e.preventDefault();
                this.select();
                if (Coveo.DeviceUtils.isMobileDevice()) {
                    Coveo.MobileUtils.removeToggleClassOnSearchInterface();
                }
                this.queryController.deferExecuteQuery({ beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.interfaceChange, { interfaceChangeTo: _this.options.uniqueId }); } });
            };
            Tab.prototype.render = function () {
                var icon = this.options.icon;
                if (icon != "") {
                    Coveo.$(this.element).prepend(this.iconTemplate({ icon: icon }));
                }
                var caption = this.options.caption;
                if (Coveo.Utils.isNonEmptyString(caption)) {
                    Coveo.$(this.element).append(this.tabTemplate({ caption: caption }));
                }
            };
            Tab.prototype.handleBuildingQuery = function (e, data) {
                Coveo.Assert.exists(data);
                this.isFirstQuery = false;
                if (this.isSelected() && Coveo.Utils.isNonEmptyString(this.options.expression)) {
                    if (this.options.constant) {
                        data.queryBuilder.constantExpression.add(this.options.expression);
                    }
                    else {
                        data.queryBuilder.advancedExpression.add(this.options.expression);
                    }
                }
            };
            Tab.prototype.handleQueryStateChanged = function (e, data) {
                Coveo.Assert.exists(data);
                if (this.isSelected()) {
                    Coveo.$(this.element).addClass('coveo-selected');
                    this.queryController.setEndpoint(this.options.endpoint);
                    this.showAndHideAppropriateElements();
                }
                else {
                    Coveo.$(this.element).removeClass('coveo-selected');
                }
            };
            Tab.prototype.isSelected = function () {
                var activeTab = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.t);
                return activeTab == this.options.uniqueId;
            };
            Tab.prototype.showAndHideAppropriateElements = function () {
                var _this = this;
                var showElements = [];
                var hideElements = [];
                Coveo._.each(Coveo.$(this.root).find('[data-tab],[data-tab-not]'), function (element) {
                    if (_this.isElementIncludedInTab(element)) {
                        _this.toggleAllComponentsUnder(element, true);
                        showElements.push(element);
                    }
                    else {
                        _this.toggleAllComponentsUnder(element, false);
                        hideElements.push(element);
                    }
                });
                Coveo.$(this.root).one(Coveo.Events.QueryEvents.querySuccess, function () {
                    Coveo._.each(showElements, function (elem) { return Coveo.$(elem).removeClass('coveo-tab-disabled'); });
                    Coveo._.each(hideElements, function (elem) { return Coveo.$(elem).addClass('coveo-tab-disabled'); });
                });
            };
            Tab.prototype.isElementIncludedInTab = function (element) {
                Coveo.Assert.exists(element);
                var includedTabs = this.splitListOfTabs(Coveo.$(element).attr('data-tab'));
                var excludedTabs = this.splitListOfTabs(Coveo.$(element).attr('data-tab-not'));
                Coveo.Assert.check(!(includedTabs.length != 0 && excludedTabs.length != 0), 'You cannot both explicity include and exclude an element from tabs');
                return (includedTabs.length != 0 && Coveo._.indexOf(includedTabs, this.options.uniqueId) != -1) || (excludedTabs.length != 0 && Coveo._.indexOf(excludedTabs, this.options.uniqueId) == -1) || (includedTabs.length == 0 && excludedTabs.length == 0);
            };
            Tab.prototype.splitListOfTabs = function (value) {
                if (Coveo.Utils.exists(value)) {
                    return Coveo._.map(value.split(','), function (tab) { return Coveo.Utils.trim(tab); });
                }
                else {
                    return [];
                }
            };
            Tab.prototype.toggleAllComponentsUnder = function (element, enable) {
                Coveo.Assert.exists(element);
                Coveo.$(element).find("*").addBack().each(function (index, elem) {
                    var component = Ui.Component.get(elem, undefined, true);
                    if (component) {
                        if (enable) {
                            component.enable();
                        }
                        else {
                            component.disable();
                        }
                    }
                });
            };
            Tab.prototype.enable = function () {
                _super.prototype.enable.call(this);
                Coveo.$(this.element).css('display', '');
            };
            Tab.prototype.disable = function () {
                _super.prototype.disable.call(this);
                Coveo.$(this.element).css('display', 'none');
            };
            Tab.ID = 'Tab';
            Tab.options = {
                uniqueId: Ui.ComponentOptions.buildStringOption({ attrName: 'data-id', required: true }),
                icon: Ui.ComponentOptions.buildIconOption(),
                caption: Ui.ComponentOptions.buildLocalizedStringOption(),
                expression: Ui.ComponentOptions.buildStringOption(),
                endpoint: Ui.ComponentOptions.buildCustomOption(function (endpoint) { return endpoint != null ? Coveo.Rest.SearchEndpoint.endpoints[endpoint] : null; }),
                sort: Ui.ComponentOptions.buildCustomOption(function (sort) { return sort != null ? Ui.SortCriteria.parse(sort) : null; }),
                constant: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true })
            };
            return Tab;
        })(Ui.Component);
        Ui.Tab = Tab;
        Ui.CoveoJQuery.registerAutoCreateComponent(Tab);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var CurrentTab = (function (_super) {
            __extends(CurrentTab, _super);
            function CurrentTab(element, options, bindings) {
                var _this = this;
                _super.call(this, element, CurrentTab.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, CurrentTab, options);
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + Coveo.Models.QueryStateModel.attributesEnum.t);
                Coveo.$(this.root).on(eventName, Coveo.$.proxy(this.handleTabChange, this));
                if (this.options.tabSectionToOpen) {
                    Coveo.$(this.options.tabSectionToOpen).addClass('coveo-targeted-by-current-tab');
                    Coveo.$(this.element).addClass('coveo-targeting-tab-section');
                    this.bind.fastClick(Coveo.$(this.element), function () {
                        Coveo.$('.coveo-glass').toggleClass("coveo-active-glass").toggleClass('coveo-active-glass-for-current-tab');
                        Coveo.$(_this.element).toggleClass('coveo-opening-tab-section');
                        Coveo.$(_this.options.tabSectionToOpen).toggleClass('coveo-opened-by-current-tab');
                        if (Coveo.$(_this.element).hasClass('coveo-opening-tab-section')) {
                            Coveo.$(_this.options.tabSectionToOpen).css('z-index', '1001');
                            Coveo.$(_this.element).css('z-index', '1001');
                        }
                        else {
                            Coveo.$(_this.options.tabSectionToOpen).css('z-index', undefined);
                            Coveo.$(_this.element).css('z-index', undefined);
                        }
                    });
                }
            }
            CurrentTab.prototype.handleTabChange = function () {
                var _this = this;
                var selectedTabId = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.t);
                if (Coveo.Utils.isNonEmptyString(selectedTabId)) {
                    var found = false;
                    Coveo.$(this.root).find(Ui.Component.computeSelectorForType(Ui.Tab.ID)).each(function (index, elem) {
                        var tab = Ui.Component.get(elem, Ui.Tab);
                        if (tab.options.uniqueId == selectedTabId) {
                            Coveo.$(_this.element).html(Coveo.$(tab.element).html());
                            found = true;
                        }
                    });
                    Coveo.Assert.check(found, "Cannot find the currently active tab");
                }
                else {
                    Coveo.$(this.element).hide();
                }
            };
            CurrentTab.ID = 'CurrentTab';
            CurrentTab.options = {
                tabSectionToOpen: Ui.ComponentOptions.buildStringOption()
            };
            return CurrentTab;
        })(Ui.Component);
        Ui.CurrentTab = CurrentTab;
        Ui.CoveoJQuery.registerAutoCreateComponent(CurrentTab);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Debug = (function (_super) {
            __extends(Debug, _super);
            function Debug(element, options, bindings) {
                var _this = this;
                _super.call(this, element, Debug.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, Debug, options);
                Coveo.$(this.root).on(Coveo.Events.ResultListEvents.newResultsDisplayed, function () { return _this.handleNewResultsDisplayed(); });
            }
            Debug.prototype.handleNewResultsDisplayed = function () {
                var _this = this;
                Coveo.$(this.root).find('.CoveoResult').dblclick(function (e) { return _this.handleResultDoubleClick(e); });
            };
            Debug.prototype.handleResultDoubleClick = function (e) {
                var resultLinkId = Ui.Component.computeCssClassNameForType(Coveo.Ui['ResultLink'].ID);
                var isResultLink = Coveo.$(e.target).hasClass(resultLinkId);
                if (e.altKey && !isResultLink) {
                    var result = Coveo.$(e.currentTarget).data('CoveoResult');
                    var element = this.buildResultInfo(result);
                    var modalbox = Coveo.ModalBox.open(element, { title: 'Debug', className: 'coveo-debug' });
                    Coveo.$(modalbox.wrapper.find('.coveo-title')).fastClick(function () { return modalbox.close(); });
                    Coveo.$(modalbox.overlay).fastClick(function () { return modalbox.close(); });
                    e.cancelBubble = true;
                    e.result = false;
                }
            };
            Debug.prototype.buildResultInfo = function (result) {
                Coveo.Assert.exists(result);
                var box = Coveo.$('<div/>');
                box.append(Coveo.$('<div/>').append(Coveo.$('<a/>').attr('href', result.clickUri).text(result.title || result.uri)));
                Coveo.$('<div>Properties</div>').addClass('coveo-debug-title').appendTo(box);
                this.buildPropertyTable(result).appendTo(box);
                Coveo.$('<div>Fields</div>').addClass('coveo-debug-title').appendTo(box);
                this.buildFieldTable(result).appendTo(box);
                Coveo.$('<div>Ranking Info</div>').addClass('coveo-debug-title').appendTo(box);
                this.buildRankingInfo(result).appendTo(box);
                return box;
            };
            Debug.prototype.buildPropertyTable = function (result) {
                var _this = this;
                Coveo.Assert.exists(result);
                var table = Coveo.$('<table/>').addClass('coveo-debug-property-table');
                var keys = Coveo._.keys(result).sort();
                Coveo._.each(keys, function (key) {
                    if (key == 'raw')
                        return;
                    if (key[0] != key.toLowerCase()[0])
                        return;
                    var tr = Coveo.$('<tr/>').appendTo(table);
                    Coveo.$('<td/>').addClass('coveo-debug-property-name').text(key).appendTo(tr);
                    Coveo.$('<td/>').addClass('coveo-debug-property-value').append(_this.formatValue(result[key])).appendTo(tr);
                });
                return table;
            };
            Debug.prototype.buildFieldTable = function (result) {
                var _this = this;
                Coveo.Assert.exists(result);
                var table = Coveo.$('<table/>').addClass('coveo-debug-fields-table');
                var keys = Coveo._.keys(result.raw).sort();
                Coveo._.each(keys, function (key) {
                    var tr = Coveo.$('<tr/>').appendTo(table);
                    Coveo.$('<td/>').addClass('coveo-debug-field-name').text('@' + key).appendTo(tr);
                    Coveo.$('<td/>').addClass('coveo-debug-field-value').append(_this.formatValue(result.raw[key])).appendTo(tr);
                });
                return table;
            };
            Debug.prototype.buildRankingInfo = function (result) {
                Coveo.Assert.exists(result);
                return Coveo.$('<div/>').addClass('coveo-debug-ranking-info').text(result.rankingInfo);
            };
            Debug.prototype.formatValue = function (value) {
                if (Coveo.Utils.isNonEmptyString(value) && value.indexOf('http') == 0) {
                    return Coveo.$('<a/>').attr('href', value).text(value);
                }
                else {
                    return Coveo.$('<span/>').text(value);
                }
            };
            Debug.ID = 'Debug';
            Debug.options = {};
            return Debug;
        })(Ui.Component);
        Ui.Debug = Debug;
        Ui.CoveoJQuery.registerAutoCreateComponent(Debug);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var DidYouMean = (function (_super) {
            __extends(DidYouMean, _super);
            function DidYouMean(element, options, bindings) {
                _super.call(this, element, DidYouMean.ID, bindings);
                this.element = element;
                this.options = options;
                this.bindings = bindings;
                this.options = Ui.ComponentOptions.initComponentOptions(element, DidYouMean, options);
                Coveo.Assert.exists(element);
                Coveo.Assert.exists(this.options);
                this.hideNext = true;
                this.bind.onRoot(Coveo.Events.QueryEvents.buildingQuery, this.handlePrepareQueryBuilder);
                this.bind.onRoot(Coveo.Events.QueryEvents.querySuccess, this.handleProcessNewQueryResults);
                this.bind.onRoot(Coveo.Events.QueryEvents.noResults, this.handleNoResults);
                this.bind.onRoot(Coveo.Events.QueryEvents.newQuery, this.handleNewQuery);
                Coveo.$(this.element).hide();
            }
            DidYouMean.prototype.handleNewQuery = function () {
                if (this.hideNext) {
                    Coveo.$(this.element).empty();
                    Coveo.$(this.element).hide();
                }
                else {
                    this.hideNext = true;
                }
            };
            DidYouMean.prototype.handlePrepareQueryBuilder = function (e, data) {
                Coveo.Assert.exists(data);
                data.queryBuilder.enableDidYouMean = true;
            };
            DidYouMean.prototype.handleNoResults = function (e, data) {
                // We do not auto-correct on search-as-you-type queries
                if (Coveo.Utils.isNonEmptyArray(data.results.queryCorrections) && !data.searchAsYouType) {
                    var originalQuery = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.q);
                    var correctedQuery = this.buildCorrectedSentence(data.results.queryCorrections[0]);
                    this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.q, data.results.queryCorrections[0].correctedQuery);
                    data.retryTheQuery = true;
                    this.hideNext = false;
                    Coveo.$('<div/>').html(Ui.l("noResultFor", "<span class='coveo-highlight'>" + Coveo.StringUtils.htmlEncode(originalQuery) + "</span>")).appendTo(this.element);
                    Coveo.$('<div/>').html(Ui.l("autoCorrectedQueryTo", "<span class='coveo-highlight'>" + correctedQuery + "</span>")).appendTo(this.element);
                    Coveo.$(this.element).show();
                    this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.didyoumeanAutomatic, {});
                }
            };
            DidYouMean.prototype.handleProcessNewQueryResults = function (e, data) {
                var _this = this;
                Coveo.Assert.exists(data);
                Coveo.Assert.exists(data.results);
                var results = data.results;
                this.logger.trace('Received query results from new query', results);
                if (Coveo.Utils.isNonEmptyArray(results.queryCorrections)) {
                    var correctedQuery = this.buildCorrectedSentence(results.queryCorrections[0]);
                    var didYouMean = Coveo.$('<div/>').text(Ui.l("didYouMean", "")).appendTo(this.element);
                    var searchTerm = Coveo.$('<a/>').html(correctedQuery).appendTo(didYouMean);
                    Coveo.$(searchTerm).fastClick(function () {
                        _this.doQueryWithCorrectedTerm(results.queryCorrections[0].correctedQuery);
                    });
                    Coveo.$(this.element).show();
                }
            };
            DidYouMean.prototype.buildCorrectedSentence = function (correction) {
                var toReturn = [];
                var tagStart = '<span class="coveo-word-correction">';
                var tagEnd = '</span>';
                var currentOffset = 0;
                Coveo._.each(correction.wordCorrections, function (wordCorrection) {
                    toReturn.push(Coveo.StringUtils.htmlEncode(correction.correctedQuery.slice(currentOffset, wordCorrection.offset)));
                    currentOffset = wordCorrection.offset;
                    toReturn.push(tagStart);
                    toReturn.push(Coveo.StringUtils.htmlEncode(correction.correctedQuery.slice(currentOffset, wordCorrection.length + currentOffset)));
                    toReturn.push(tagEnd);
                    currentOffset = wordCorrection.offset + wordCorrection.length;
                });
                toReturn.push(Coveo.StringUtils.htmlEncode(correction.correctedQuery.slice(currentOffset)));
                return toReturn.join("");
            };
            DidYouMean.prototype.doQueryWithCorrectedTerm = function (correctedTerm) {
                var _this = this;
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.q, correctedTerm);
                this.queryController.deferExecuteQuery({ beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.didyoumeanClick, {}); } });
            };
            DidYouMean.ID = 'DidYouMean';
            DidYouMean.options = {};
            return DidYouMean;
        })(Ui.Component);
        Ui.DidYouMean = DidYouMean;
        Ui.CoveoJQuery.registerAutoCreateComponent(DidYouMean);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ErrorReport = (function (_super) {
            __extends(ErrorReport, _super);
            function ErrorReport(element, options, bindings) {
                _super.call(this, element, ErrorReport.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, ErrorReport, options);
                Coveo.$(this.element).append(Coveo.$("<div />").addClass('coveo-error-title').append("<h3></h3><h4></h4>"));
                var optionsElement = Coveo.$('<div />').addClass('coveo-options').append(this.buildPrevious()).append(this.buildClear()).append(this.buildRetry());
                Coveo.$(this.element).append(optionsElement).append(this.message = Coveo.$("<div class='coveo-error-message'></div>")).hide();
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.newQuery, Coveo.$.proxy(this.handleNewQuery, this));
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.queryError, Coveo.$.proxy(this.handleQueryError, this));
            }
            ErrorReport.prototype.setErrorTitle = function () {
                var errorTitle = {
                    h3: Ui.l("OopsError"),
                    h4: Ui.l("ProblemPersists")
                };
                if (Coveo.DeviceUtils.isPhonegap() && navigator.connection && window.Connection && (navigator.connection.type == window.Connection.NONE || navigator.connection.type === 0)) {
                    errorTitle = {
                        h3: Ui.l("CannotConnect"),
                        h4: Ui.l("NoNetworkConnection")
                    };
                }
                Coveo.$(this.element).find("h3").text(errorTitle.h3);
                Coveo.$(this.element).find("h4").text(errorTitle.h4);
            };
            ErrorReport.prototype.buildPrevious = function () {
                var _this = this;
                return Coveo.$("<span class='coveo-previous' > " + Ui.l("GoBack") + " </span>").fastClick(function () {
                    _this.usageAnalytics.logCustomEvent(Ui.AnalyticsActionCauseList.errorBack, {}, _this.root);
                    _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.errorBack, {});
                    history.back();
                });
            };
            ErrorReport.prototype.buildClear = function () {
                var _this = this;
                return Coveo.$("<span class='coveo-clear'>" + Ui.l("Reset") + "</span>").fastClick(function () {
                    _this.queryStateModel.reset();
                    _this.queryController.deferExecuteQuery({
                        beforeExecuteQuery: function () {
                            _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.errorClearQuery, {});
                            _this.usageAnalytics.logCustomEvent(Ui.AnalyticsActionCauseList.errorClearQuery, {}, _this.root);
                        }
                    });
                });
            };
            ErrorReport.prototype.buildRetry = function () {
                var _this = this;
                return Coveo.$("<span class='coveo-retry'>" + Ui.l("Retry") + "</span>").fastClick(function () {
                    _this.queryController.deferExecuteQuery({
                        beforeExecuteQuery: function () {
                            _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.errorRetry, {});
                            _this.usageAnalytics.logCustomEvent(Ui.AnalyticsActionCauseList.errorRetry, {}, _this.root);
                        }
                    });
                });
            };
            ErrorReport.prototype.handleNewQuery = function () {
                Coveo.$(this.element).hide();
                if (this.closePopup != null) {
                    this.closePopup();
                }
            };
            ErrorReport.prototype.handleQueryError = function (e, data) {
                Coveo.Assert.exists(data);
                Coveo.Assert.exists(data.error);
                // Do not display the panel if the error is for missing authentication. The
                // appropriate authentication provider should take care of redirecting.
                if (data.error.isMissingAuthentication) {
                    return;
                }
                this.message.empty();
                this.setErrorTitle();
                if (this.options.showDetailedError) {
                    this.message.append(Coveo.$("<span class='coveo-more-info'>" + Ui.l("MoreInfo") + "</span>").fastClick(function (e) {
                        Coveo.$(e.target).parent().html(Coveo._.template('<pre><%- type %>\n<%- message %></pre>', data.error));
                    }));
                }
                Coveo.$(this.element).show();
                if (this.options.popUp) {
                    var modalbox = Coveo.ModalBox.open(Coveo.$(this.element).clone(true, true), {
                        title: Coveo.JQueryUtils.getPopUpCloseButton(Ui.l("Close"), Ui.l("ErrorReport")),
                        titleClose: true,
                        overlayClose: true,
                        className: 'coveo-error-report'
                    });
                    this.closePopup = modalbox.close;
                }
            };
            ErrorReport.ID = 'ErrorReport';
            ErrorReport.options = {
                popUp: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                showDetailedError: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false })
            };
            return ErrorReport;
        })(Ui.Component);
        Ui.ErrorReport = ErrorReport;
        Ui.CoveoJQuery.registerAutoCreateComponent(ErrorReport);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FacetValue = (function () {
            function FacetValue() {
                this.selected = false;
                this.excluded = false;
                this.waitingForDelta = false;
            }
            FacetValue.prototype.reset = function () {
                this.selected = false;
                this.excluded = false;
            };
            FacetValue.prototype.updateCountsFromNewValue = function (newValue) {
                Coveo.Assert.exists(newValue);
                this.occurrences = newValue.occurrences;
                this.delta = newValue.delta;
                this.computedField = newValue.computedField;
            };
            FacetValue.prototype.cloneWithZeroOccurrences = function () {
                this.occurrences = 0;
                this.computedField = 0;
                this.delta = undefined;
                return this;
            };
            FacetValue.prototype.cloneWithDelta = function (count, delta) {
                Coveo.Assert.isLargerOrEqualsThan(0, count);
                var clone = this.cloneWithZeroOccurrences();
                clone.delta = delta;
                clone.occurrences = count;
                return clone;
            };
            FacetValue.prototype.getFormattedCount = function () {
                var count = undefined;
                if (Coveo.Utils.exists(this.delta) && this.delta > 0) {
                    count = '+' + Globalize.format(this.delta, 'n0');
                }
                else {
                    if (this.occurrences > 0) {
                        count = Globalize.format(this.occurrences, 'n0');
                    }
                }
                return count;
            };
            FacetValue.prototype.getFormattedComputedField = function (format) {
                if (this.computedField != 0) {
                    return Globalize.format(this.computedField, format);
                }
                else {
                    return undefined;
                }
            };
            FacetValue.create = function (value) {
                if (Coveo._.isString(value)) {
                    return FacetValue.createFromValue(value);
                }
                else if (Coveo._.isObject(value)) {
                    if ('computedFieldResults' in value) {
                        return FacetValue.createFromGroupByValue(value);
                    }
                    else {
                        return FacetValue.createFromFieldValue(value);
                    }
                }
                else {
                    throw new Error('Can\'t create value from ' + value);
                }
            };
            FacetValue.createFromValue = function (value) {
                Coveo.Assert.isNonEmptyString(value);
                var facetValue = new FacetValue();
                facetValue.value = value.toLowerCase();
                facetValue.lookupValue = value;
                return facetValue;
            };
            FacetValue.createFromGroupByValue = function (groupByValue) {
                Coveo.Assert.exists(groupByValue);
                Coveo.Assert.exists(groupByValue);
                var facetValue = new FacetValue();
                facetValue.value = groupByValue.value.toLowerCase();
                facetValue.lookupValue = Coveo.Utils.exists(groupByValue.lookupValue) ? groupByValue.lookupValue : groupByValue.value;
                facetValue.occurrences = groupByValue.numberOfResults;
                facetValue.computedField = Coveo.Utils.isNonEmptyArray(groupByValue.computedFieldResults) ? groupByValue.computedFieldResults[0] : undefined;
                facetValue.score = groupByValue.score;
                return facetValue;
            };
            FacetValue.createFromFieldValue = function (fieldValue) {
                Coveo.Assert.exists(fieldValue);
                var facetValue = new FacetValue();
                facetValue.value = fieldValue.value.toLowerCase();
                facetValue.lookupValue = fieldValue.lookupValue;
                facetValue.occurrences = fieldValue.numberOfResults;
                return facetValue;
            };
            return FacetValue;
        })();
        Ui.FacetValue = FacetValue;
        var FacetValues = (function () {
            function FacetValues(groupByResult) {
                if (Coveo.Utils.exists(groupByResult)) {
                    this.values = Coveo._.map(groupByResult.values, function (groupByValue) { return FacetValue.createFromGroupByValue(groupByValue); });
                }
                else {
                    this.values = [];
                }
            }
            FacetValues.prototype.add = function (facetValue) {
                Coveo.Assert.exists(facetValue);
                Coveo.Assert.check(!this.contains(facetValue.value));
                this.values.push(facetValue);
            };
            FacetValues.prototype.remove = function (value) {
                Coveo.Assert.isNonEmptyString(value);
                value = value;
                this.values = Coveo._.filter(this.values, function (elem) { return elem.value != value; });
            };
            FacetValues.prototype.size = function () {
                return this.values.length;
            };
            FacetValues.prototype.isEmpty = function () {
                return this.values.length == 0;
            };
            FacetValues.prototype.at = function (index) {
                Coveo.Assert.isLargerOrEqualsThan(0, index);
                Coveo.Assert.isSmallerThan(this.values.length, index);
                return this.values[index];
            };
            FacetValues.prototype.get = function (value) {
                return Coveo._.find(this.values, function (elem) { return elem.value.toLowerCase() == value.toLowerCase(); });
            };
            FacetValues.prototype.contains = function (value) {
                return Coveo.Utils.exists(this.get(value));
            };
            FacetValues.prototype.getAll = function () {
                return this.values;
            };
            FacetValues.prototype.getSelected = function () {
                return Coveo._.filter(this.values, function (value) { return value.selected; });
            };
            FacetValues.prototype.getExcluded = function () {
                return Coveo._.filter(this.values, function (value) { return value.excluded; });
            };
            FacetValues.prototype.hasSelectedOrExcludedValues = function () {
                return this.getSelected().length != 0 || this.getExcluded().length != 0;
            };
            FacetValues.prototype.reset = function () {
                Coveo._.each(this.values, function (elem) { return elem.reset(); });
            };
            FacetValues.prototype.importActiveValuesFromOtherList = function (other) {
                var _this = this;
                Coveo.Assert.exists(other);
                Coveo._.each(other.getSelected(), function (otherValue) {
                    var myValue = _this.get(otherValue.value);
                    if (Coveo.Utils.exists(myValue)) {
                        myValue.selected = true;
                    }
                    else {
                        _this.values.push(otherValue.cloneWithZeroOccurrences());
                    }
                });
                Coveo._.each(other.getExcluded(), function (otherValue) {
                    var myValue = _this.get(otherValue.value);
                    if (Coveo.Utils.exists(myValue)) {
                        myValue.excluded = true;
                    }
                    else {
                        _this.values.push(otherValue.cloneWithZeroOccurrences());
                    }
                });
            };
            FacetValues.prototype.updateCountsFromNewValues = function (newValues) {
                Coveo.Assert.exists(newValues);
                this.values = Coveo._.map(this.values, function (myValue) {
                    var newValue = newValues.get(myValue.value);
                    if (Coveo.Utils.exists(newValue)) {
                        myValue.updateCountsFromNewValue(newValue);
                        return myValue;
                    }
                    else {
                        return myValue.cloneWithZeroOccurrences();
                    }
                });
            };
            FacetValues.prototype.updateDeltaWithFilteredFacetValues = function (filtered) {
                Coveo.Assert.exists(filtered);
                Coveo._.each(this.values, function (unfilteredValue) {
                    var filteredValue = filtered.get(unfilteredValue.value);
                    unfilteredValue.waitingForDelta = false;
                    if (Coveo.Utils.exists(filteredValue)) {
                        if (unfilteredValue.occurrences - filteredValue.occurrences > 0) {
                            unfilteredValue.delta = unfilteredValue.occurrences - filteredValue.occurrences;
                        }
                        else {
                            unfilteredValue.delta = null;
                        }
                    }
                    else if (!unfilteredValue.selected && !unfilteredValue.excluded) {
                        unfilteredValue.delta = unfilteredValue.occurrences;
                    }
                });
            };
            FacetValues.prototype.mergeWithUnfilteredFacetValues = function (unfiltered) {
                var _this = this;
                Coveo.Assert.exists(unfiltered);
                var values = [];
                Coveo._.each(unfiltered.values, function (unfilteredValue) {
                    var filteredValue = _this.get(unfilteredValue.value);
                    if (Coveo.Utils.exists(filteredValue)) {
                        if (filteredValue.occurrences == unfilteredValue.occurrences) {
                            values.push(filteredValue);
                        }
                        else {
                            values.push(unfilteredValue.cloneWithDelta(unfilteredValue.occurrences, unfilteredValue.occurrences - filteredValue.occurrences));
                        }
                    }
                    else {
                        values.push(unfilteredValue.cloneWithDelta(unfilteredValue.occurrences, unfilteredValue.occurrences));
                    }
                });
                var index = 0;
                Coveo._.each(this.values, function (value) {
                    var unfilteredValue = unfiltered.get(value.value);
                    if (!Coveo.Utils.exists(unfilteredValue)) {
                        if (value.selected || value.excluded) {
                            values.splice(index, 0, value);
                            index++;
                        }
                    }
                    else {
                        for (var i = 0; i < values.length; i++) {
                            if (values[i].value == value.value) {
                                index = i + 1;
                                break;
                            }
                        }
                    }
                });
                this.values = values;
            };
            FacetValues.prototype.sortValuesDependingOnStatus = function (excludeLastIndex) {
                this.values = Coveo._.sortBy(this.values, function (value) {
                    if (value.selected) {
                        return 1;
                    }
                    else if (value.excluded) {
                        return 3;
                    }
                    else {
                        return 2;
                    }
                });
                if (excludeLastIndex != null && excludeLastIndex < this.values.length) {
                    var nbExclude = this.getExcluded().length;
                    var excludes = this.values.splice(this.values.length - nbExclude, nbExclude);
                    Array.prototype.splice.apply(this.values, [excludeLastIndex - nbExclude, 0].concat(excludes));
                }
            };
            return FacetValues;
        })();
        Ui.FacetValues = FacetValues;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FileTypes;
        (function (FileTypes) {
            // On-demand mapping of file types to captions. Used by facets, but I don't
            // really like this. Maybe a dedicated filetype facet would be better? Hmm...
            var fileTypeCaptions;
            function get(result) {
                var objecttype = result.raw["objecttype"];
                var sysfiletype = result.raw["sysfiletype"];
                if (Coveo.Utils.isNonEmptyString(objecttype)) {
                    return getObjectType(objecttype);
                }
                else if (Coveo.Utils.isNonEmptyString(sysfiletype)) {
                    return getSysFileType(sysfiletype);
                }
                else {
                    return {
                        // This will render a default icon. Really it should not happen.
                        icon: 'coveo-icon sysfiletype',
                        caption: Ui.l('Unknown')
                    };
                }
            }
            FileTypes.get = get;
            function getObjectType(objecttype) {
                // We must use lowercase filetypes because that's how the CSS classes
                // are generated (they are case sensitive, alas).
                objecttype = objecttype.toLowerCase();
                // Most object types have a set of localized strings in the main dictionary
                var localizedString = Ui.l['objecttype_' + objecttype];
                return {
                    'icon': 'coveo-icon objecttype ' + objecttype,
                    caption: localizedString ? localizedString() : objecttype
                };
            }
            FileTypes.getObjectType = getObjectType;
            function getSysFileType(sysfiletype) {
                // We must use lowercase filetypes because that's how the CSS classes
                // are generated (they are case sensitive, alas).
                sysfiletype = sysfiletype.toLowerCase();
                // Sometimes, sysfiletype begins with a period (typically means the index has
                // no idea and uses the file extension as a filetype).
                if (sysfiletype[0] == ".") {
                    sysfiletype = sysfiletype.substring(1);
                }
                // Most filetypes have a set of localized strings in the main dictionary
                var localizedString = Ui.l['sysfiletype_' + sysfiletype];
                return {
                    'icon': 'coveo-icon sysfiletype ' + sysfiletype,
                    caption: localizedString ? localizedString() : sysfiletype
                };
            }
            FileTypes.getSysFileType = getSysFileType;
            function getSysFileTypeCaptions() {
                if (fileTypeCaptions == undefined) {
                    fileTypeCaptions = {};
                    var strings = String['locales'][String['locale']];
                    Coveo.Assert.isNotUndefined(strings);
                    Coveo._.each(Coveo._.keys(strings), function (key) {
                        if (key.indexOf('sysfiletype_') == 0) {
                            fileTypeCaptions[key.substr('sysfiletype_'.length)] = key.toLocaleString();
                        }
                        else if (key.indexOf('objecttype_') == 0) {
                            fileTypeCaptions[key.substr('objecttype_'.length)] = key.toLocaleString();
                        }
                    });
                }
                return fileTypeCaptions;
            }
            FileTypes.getSysFileTypeCaptions = getSysFileTypeCaptions;
        })(FileTypes = Ui.FileTypes || (Ui.FileTypes = {}));
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FacetUtils;
        (function (FacetUtils) {
            function getRegexToUseForFacetSearch(value) {
                return new RegExp(Coveo.Utils.escapeRegexCharacter(value), 'i');
            }
            FacetUtils.getRegexToUseForFacetSearch = getRegexToUseForFacetSearch;
            function getValuesToUseForSearchInFacet(original, facet) {
                var ret = [original];
                var regex = this.getRegexToUseForFacetSearch(original);
                if (facet.options.valueCaption) {
                    Coveo._.each(Coveo._.filter(Coveo._.pairs(facet.options.valueCaption), function (pair) {
                        return regex.test(pair[1]);
                    }), function (match) {
                        ret.push(match[0]);
                    });
                }
                if (facet.options.field == "@objecttype" || facet.options.field == '@sysfiletype') {
                    Coveo._.each(Coveo._.filter(Coveo._.pairs(Ui.FileTypes.getSysFileTypeCaptions()), function (pair) {
                        return regex.test(pair[1]);
                    }), function (match) {
                        ret.push(match[0]);
                    });
                }
                return ret;
            }
            FacetUtils.getValuesToUseForSearchInFacet = getValuesToUseForSearchInFacet;
            function buildFacetSearchPattern(values) {
                values = Coveo._.map(values, function (value) {
                    return Coveo.Utils.escapeRegexCharacter(value);
                });
                values[0] = ".*" + values[0] + ".*";
                return values.join("|");
            }
            FacetUtils.buildFacetSearchPattern = buildFacetSearchPattern;
            function needAnotherFacetSearch(currentSearchLength, newSearchLength, oldSearchLength, desiredSearchLength) {
                //Something was removed (currentSearch < newSearch)
                //&& we might want to display more facet search result(currentSearch < desiredSearch)
                //&& the new query returned more stuff than the old one so there's still more results(newLength != oldLength)
                return currentSearchLength < newSearchLength && currentSearchLength < desiredSearchLength && newSearchLength != oldSearchLength;
            }
            FacetUtils.needAnotherFacetSearch = needAnotherFacetSearch;
            function addNoStateCssClassToFacetValues(facet, container) {
                //This takes care of adding the correct css class on each facet value checkbox (empty white box) if at least one value is selected in that facet
                if (facet.values.getSelected().length != 0) {
                    var noStates = container.find("li").not(".coveo-selected");
                    Coveo._.each(noStates, function (noState) {
                        Coveo.$(noState).addClass('coveo-no-state');
                    });
                }
            }
            FacetUtils.addNoStateCssClassToFacetValues = addNoStateCssClassToFacetValues;
            function tryToGetTranslatedCaption(value) {
                var found = Ui.FileTypes.getSysFileTypeCaptions()[value.toLowerCase()];
                return found != undefined && Coveo.Utils.isNonEmptyString(found) ? found : value;
            }
            FacetUtils.tryToGetTranslatedCaption = tryToGetTranslatedCaption;
            function clipCaptionsToAvoidOverflowingTheirContainer(facet, forceClip) {
                if (!(facet.isInstanceOf("HierarchicalFacet")) || forceClip) {
                    facet.logger.trace("Clipping captions");
                    //force facet to show to calculate width
                    var element = Coveo.$(facet.element).show();
                    var captions = element.find('.coveo-caption');
                    for (var i = 0; i < captions.length; i++) {
                        if (captions[i].style.width != '') {
                            captions[i].style.width = '';
                        }
                    }
                    var labels = element.find('.coveo-label');
                    var labelsMaxWidth = [];
                    for (var i = 0; i < labels.length; i++) {
                        var label = labels.get(i);
                        var labelJQuery = Coveo.$(label);
                        var captionJQuery = labelJQuery.find('.coveo-caption');
                        var caption = captionJQuery.get(0);
                        var labelWidth = label.scrollWidth;
                        var labelVisibleWidth = label.clientWidth;
                        var captionWidth = caption.scrollWidth;
                        var crop = Math.max(0, labelWidth - labelVisibleWidth);
                        if (crop) {
                            labelsMaxWidth.push({
                                element: captionJQuery,
                                width: captionWidth,
                                crop: crop,
                                label: labelJQuery
                            });
                        }
                    }
                    //remove the specific css class
                    element.css("display", "");
                    for (var i = 0; i < labelsMaxWidth.length; i++) {
                        var labelMaxWidth = labelsMaxWidth[i];
                        var htmlElement = labelMaxWidth.element.get(0);
                        htmlElement.style.width = labelMaxWidth.width - labelMaxWidth.crop + 'px';
                        var dom = labelMaxWidth.element[0];
                        if (labelMaxWidth.crop > 0) {
                            labelMaxWidth.label.attr('title', labelMaxWidth.element.text());
                        }
                        else {
                            labelMaxWidth.label.attr('title', null);
                        }
                    }
                }
            }
            FacetUtils.clipCaptionsToAvoidOverflowingTheirContainer = clipCaptionsToAvoidOverflowingTheirContainer;
        })(FacetUtils = Ui.FacetUtils || (Ui.FacetUtils = {}));
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Controllers;
    (function (Controllers) {
        var FacetQueryController = (function () {
            function FacetQueryController(facet) {
                this.facet = facet;
            }
            FacetQueryController.prototype.prepareForNewQuery = function () {
                this.lastGroupByRequestIndex = undefined;
                this.expressionToUseForFacetSearch = undefined;
            };
            FacetQueryController.prototype.computeOurFilterExpression = function () {
                var _this = this;
                Coveo.Assert.check(this.facet.values.hasSelectedOrExcludedValues());
                var builder = new Coveo.Ui.ExpressionBuilder();
                var selected = this.facet.values.getSelected();
                if (selected.length > 0) {
                    if (this.facet.options.useAnd) {
                        Coveo._.each(selected, function (value) {
                            builder.addFieldExpression(_this.facet.options.field, '==', [value.value]);
                        });
                    }
                    else {
                        builder.addFieldExpression(this.facet.options.field, '==', Coveo._.map(selected, function (value) { return value.value; }));
                    }
                }
                var excluded = this.facet.values.getExcluded();
                if (excluded.length > 0) {
                    builder.addFieldNotEqualExpression(this.facet.options.field, Coveo._.map(excluded, function (value) { return value.value; }));
                }
                return builder.build();
            };
            FacetQueryController.prototype.putGroupByIntoQueryBuilder = function (queryBuilder) {
                Coveo.Assert.exists(queryBuilder);
                var allowedValues = this._createGroupByAllowedValues();
                var groupByRequest = this._createBasicGroupByRequest(allowedValues);
                var queryOverrideObject = this.createGroupByQueryOverride(queryBuilder);
                if (!Coveo.Utils.isNullOrUndefined(queryOverrideObject)) {
                    groupByRequest.queryOverride = queryOverrideObject.withoutConstant;
                    groupByRequest.constantQueryOverride = queryOverrideObject.constant;
                    this.expressionToUseForFacetSearch = queryOverrideObject.withoutConstant + (queryOverrideObject.constant ? " " + queryOverrideObject.constant : "");
                }
                else {
                    this.expressionToUseForFacetSearch = queryBuilder.computeCompleteExpression();
                    if (this.expressionToUseForFacetSearch == null) {
                        this.expressionToUseForFacetSearch = "@sysuri";
                    }
                }
                this.lastGroupByRequestIndex = queryBuilder.groupByRequests.length;
                queryBuilder.groupByRequests.push(groupByRequest);
            };
            FacetQueryController.prototype.searchInFacet = function (numberOfValuesToRequest, valuesToSearch, ignoreAccents) {
                if (ignoreAccents === void 0) { ignoreAccents = true; }
                var request = this.buildListFieldValuesRequest(numberOfValuesToRequest, valuesToSearch, false);
                return this.createListFieldDeferer(request);
            };
            FacetQueryController.prototype.searchInFacetWithLookupField = function (numberOfValuesToRequest, valuesToSearch, ignoreAccents) {
                if (ignoreAccents === void 0) { ignoreAccents = true; }
                var query = this.buildGroupByQuery();
                var groupBy = query.groupBy[0];
                groupBy.maximumNumberOfValues = numberOfValuesToRequest;
                groupBy.allowedValues = Coveo._.map(valuesToSearch, function (value) { return '*' + value + '*'; });
                var searchQuery = this.buildSearchQueryForFacetWithLookupField(valuesToSearch);
                if (query.aq == null) {
                    query.aq = searchQuery;
                }
                else {
                    query.aq += ' ' + searchQuery;
                }
                return this.createSearchDeferer(query);
            };
            FacetQueryController.prototype.recursiveFacetSearch = function (valueToCheckAgainst, numberOfValuesToRequest, oldLength, returnDeferred) {
                var _this = this;
                if (returnDeferred === void 0) { returnDeferred = Coveo.$.Deferred(); }
                var valuesToSearch = Coveo.Ui.FacetUtils.getValuesToUseForSearchInFacet(valueToCheckAgainst, this.facet);
                var onResult = function (fieldValues) {
                    var newLength = fieldValues.length;
                    fieldValues = _this.checkForFacetSearchValuesToRemove(fieldValues, valueToCheckAgainst);
                    if (Coveo.Ui.FacetUtils.needAnotherFacetSearch(fieldValues.length, newLength, oldLength, 5)) {
                        _this.recursiveFacetSearch(valueToCheckAgainst, numberOfValuesToRequest + numberOfValuesToRequest, newLength, returnDeferred);
                    }
                    else {
                        returnDeferred.resolve(fieldValues);
                    }
                };
                var searchDeferred;
                if (this.facet.options.lookupField == null && this.facet.options.computedField == null) {
                    searchDeferred = this.facet.facetQueryController.searchInFacet(numberOfValuesToRequest, valuesToSearch, this.facet.options.facetSearchIgnoreAccents);
                    searchDeferred.done(onResult);
                }
                else {
                    searchDeferred = this.facet.facetQueryController.searchInFacetWithLookupField(numberOfValuesToRequest, valuesToSearch, false);
                    searchDeferred.done(function (queryResults) {
                        var fieldValues = queryResults.groupByResults.length > 0 ? queryResults.groupByResults[0].values : [];
                        onResult(fieldValues);
                    });
                }
                searchDeferred.fail(function (data, error) {
                    returnDeferred.reject(data, error);
                });
                returnDeferred.fail(function () {
                    searchDeferred.reject();
                });
                return returnDeferred;
            };
            FacetQueryController.prototype.fetchMore = function () {
                var query = this.buildGroupByQuery();
                if (this.facet.values.size() > 0) {
                    query.groupBy.push(this._createBasicGroupByRequest(Coveo._.map(this.facet.values.getAll(), function (facetValue) { return facetValue.value; })));
                }
                return this.createSearchDeferer(query);
            };
            FacetQueryController.prototype.searchInFacetToUpdateDelta = function (facetValues) {
                var query = this.buildGroupByQuery();
                query.aq = this.computeOurFilterExpression();
                Coveo._.each(facetValues, function (facetValue) {
                    facetValue.waitingForDelta = true;
                });
                query.groupBy = [this._createBasicGroupByRequest(Coveo._.map(facetValues, function (facetValue) { return facetValue.value; }))];
                query.groupBy[0].completeFacetWithStandardValues = false;
                return this.createSearchDeferer(query);
            };
            FacetQueryController.prototype.createSearchDeferer = function (query) {
                return this.facet.getEndpoint().search(query);
            };
            FacetQueryController.prototype.createListFieldDeferer = function (request) {
                return this.facet.queryController.getEndpoint().listFieldValues(request);
            };
            FacetQueryController.prototype.buildSearchQueryForFacetWithLookupField = function (valuesToSearch) {
                var fieldToUse = this.facet.options.lookupField ? this.facet.options.lookupField : this.facet.options.field;
                return '(' + valuesToSearch.map(function (value) { return Coveo.QueryUtils.buildFieldExpression(fieldToUse, "*=", ['*' + value + '*']); }).join(' OR ') + ')';
            };
            FacetQueryController.prototype.buildListFieldValuesRequest = function (numberOfResult, pattern, ignoreAccents, queryOverride) {
                if (ignoreAccents === void 0) { ignoreAccents = true; }
                var request = {
                    field: this.facet.options.field,
                    ignoreAccents: ignoreAccents,
                    sortCriteria: 'occurrences',
                    maximumNumberOfValues: numberOfResult,
                    queryOverride: queryOverride || this.expressionToUseForFacetSearch
                };
                if (pattern != null) {
                    request.pattern = FacetQueryController.makeFacetSearchPattern(pattern);
                    request.patternType = 'RegularExpression';
                }
                return request;
            };
            FacetQueryController.prototype.buildGroupByQuery = function (allowedValues) {
                var groupBy = [this._createBasicGroupByRequest(allowedValues)];
                return {
                    q: this.expressionToUseForFacetSearch,
                    enableDidYouMean: false,
                    firstResult: 0,
                    numberOfResults: 0,
                    groupBy: groupBy
                };
            };
            FacetQueryController.prototype._createGroupByAllowedValues = function () {
                // if you want to keep displayed values next time, take all current values as allowed values
                // otherwise take only the selected value
                var allowedFacetValues;
                if (this.facet.options.allowedValues != undefined) {
                    return this.facet.options.allowedValues;
                }
                else if (this.facet.options.customSort != undefined) {
                    return this.facet.options.customSort;
                }
                else {
                    if (this.facet.options.useAnd || !this.facet.keepDisplayedValuesNextTime) {
                        var selected = this.facet.values.getSelected();
                        if (selected.length == 0) {
                            return undefined;
                        }
                        allowedFacetValues = this.facet.values.getSelected();
                    }
                    else {
                        allowedFacetValues = this.facet.values.getAll();
                    }
                    return Coveo._.map(allowedFacetValues, function (facetValue) { return facetValue.value; });
                }
            };
            FacetQueryController.prototype.createGroupByQueryOverride = function (queryBuilder) {
                var additionalFilter = this.facet.options.additionalFilter ? this.facet.options.additionalFilter : undefined;
                if (!this.facet.values.hasSelectedOrExcludedValues() || this.facet.options.useAnd) {
                    return additionalFilter ? { constant: additionalFilter, withoutConstant: "@sysuri" } : undefined;
                }
                var queryOverrideObject = Coveo._.defaults(queryBuilder.computeCompleteExpressionPartsExcept(this.computeOurFilterExpression()), { withoutConstant: "@sysuri" });
                if (queryOverrideObject.constant == undefined) {
                    //Additional filter is possible undefined : Here it does not matter as it is already undefined.
                    queryOverrideObject.constant = additionalFilter;
                }
                else {
                    queryOverrideObject.constant += (additionalFilter ? " " + additionalFilter : "");
                }
                return queryOverrideObject;
            };
            FacetQueryController.prototype._createBasicGroupByRequest = function (allowedValues, addComputedField) {
                if (addComputedField === void 0) { addComputedField = true; }
                var maximumNumberOfValues = this.facet.numberOfValues + (this.facet.options.enableMoreLess ? 1 : 0);
                var groupByRequest = {
                    field: this.facet.options.field,
                    maximumNumberOfValues: this.facet.numberOfValues + (this.facet.options.enableMoreLess ? 1 : 0),
                    sortCriteria: this.facet.options.sortCriteria,
                    injectionDepth: this.facet.options.injectionDepth,
                    completeFacetWithStandardValues: this.facet.options.allowedValues == undefined ? true : false
                };
                if (this.facet.options.lookupField) {
                    groupByRequest.lookupField = this.facet.options.lookupField;
                }
                if (allowedValues != null) {
                    groupByRequest.allowedValues = allowedValues;
                    groupByRequest.maximumNumberOfValues = Math.max(groupByRequest.maximumNumberOfValues, allowedValues.length);
                }
                if (addComputedField && Coveo.Utils.isNonEmptyString(this.facet.options.computedField)) {
                    groupByRequest.computedFields = [{
                        field: this.facet.options.computedField,
                        operation: this.facet.options.computedFieldOperation
                    }];
                }
                return groupByRequest;
            };
            FacetQueryController.prototype.checkForFacetSearchValuesToRemove = function (fieldValues, valueToCheckAgainst) {
                var _this = this;
                var regex = Coveo.Ui.FacetUtils.getRegexToUseForFacetSearch(valueToCheckAgainst);
                return Coveo._.filter(fieldValues, function (fieldValue) {
                    return regex.test(_this.facet.getValueCaption(fieldValue));
                });
            };
            FacetQueryController.makeFacetSearchPattern = function (values) {
                values = Coveo._.map(values, function (value) {
                    return Coveo.Utils.escapeRegexCharacter(value);
                });
                values[0] = ".*" + values[0] + ".*";
                return values.join("|");
            };
            return FacetQueryController;
        })();
        Controllers.FacetQueryController = FacetQueryController;
    })(Controllers = Coveo.Controllers || (Coveo.Controllers = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    (function (KEYBOARD) {
        KEYBOARD[KEYBOARD["BACKSPACE"] = 8] = "BACKSPACE";
        KEYBOARD[KEYBOARD["TAB"] = 9] = "TAB";
        KEYBOARD[KEYBOARD["ENTER"] = 13] = "ENTER";
        KEYBOARD[KEYBOARD["SHIFT"] = 16] = "SHIFT";
        KEYBOARD[KEYBOARD["CTRL"] = 17] = "CTRL";
        KEYBOARD[KEYBOARD["ALT"] = 18] = "ALT";
        KEYBOARD[KEYBOARD["ESCAPE"] = 27] = "ESCAPE";
        KEYBOARD[KEYBOARD["SPACEBAR"] = 32] = "SPACEBAR";
        KEYBOARD[KEYBOARD["PAGE_UP"] = 33] = "PAGE_UP";
        KEYBOARD[KEYBOARD["PAGE_DOWN"] = 34] = "PAGE_DOWN";
        KEYBOARD[KEYBOARD["HOME"] = 36] = "HOME";
        KEYBOARD[KEYBOARD["LEFT_ARROW"] = 37] = "LEFT_ARROW";
        KEYBOARD[KEYBOARD["UP_ARROW"] = 38] = "UP_ARROW";
        KEYBOARD[KEYBOARD["RIGHT_ARROW"] = 39] = "RIGHT_ARROW";
        KEYBOARD[KEYBOARD["DOWN_ARROW"] = 40] = "DOWN_ARROW";
        KEYBOARD[KEYBOARD["INSERT"] = 45] = "INSERT";
        KEYBOARD[KEYBOARD["DELETE"] = 46] = "DELETE";
    })(Coveo.KEYBOARD || (Coveo.KEYBOARD = {}));
    var KEYBOARD = Coveo.KEYBOARD;
    var KeyboardUtils = (function () {
        function KeyboardUtils() {
        }
        KeyboardUtils.keysEqual = function (key, code) {
            if (!Coveo.Utils.isNullOrUndefined(key.keyCode)) {
                return key.keyCode == code;
            }
            else if (!Coveo.Utils.isNullOrUndefined(key.which)) {
                return key.which == code;
            }
            return false;
        };
        KeyboardUtils.isAllowedKeyForOmniBox = function (e) {
            var keycode = e.keyCode;
            var valid = (KeyboardUtils.isNumberKeyPushed(keycode)) || (keycode == 32 || keycode == 13) || (KeyboardUtils.isLetterKeyPushed(keycode)) || (keycode > 95 && keycode < 112) || (keycode > 185 && keycode < 193) || (keycode > 218 && keycode < 223) || (keycode == 8 /* BACKSPACE */ || keycode == 46 /* DELETE */) || (KeyboardUtils.isArrowKeyPushed(keycode));
            return valid;
        };
        KeyboardUtils.isAllowedKeyForSearchAsYouType = function (e) {
            return KeyboardUtils.isAllowedKeyForOmniBox(e) && !KeyboardUtils.isArrowKeyPushed(e.keyCode);
        };
        KeyboardUtils.isDeleteOrBackspace = function (e) {
            return KeyboardUtils.keysEqual(e, 8 /* BACKSPACE */) || KeyboardUtils.keysEqual(e, 46 /* DELETE */);
        };
        KeyboardUtils.isArrowKeyPushed = function (keycode) {
            return keycode == 37 /* LEFT_ARROW */ || keycode == 38 /* UP_ARROW */ || keycode == 39 /* RIGHT_ARROW */ || keycode == 40 /* DOWN_ARROW */;
        };
        KeyboardUtils.isNumberKeyPushed = function (keycode) {
            return keycode > 47 && keycode < 58;
        };
        KeyboardUtils.isLetterKeyPushed = function (keycode) {
            return keycode > 64 && keycode < 91;
        };
        return KeyboardUtils;
    })();
    Coveo.KeyboardUtils = KeyboardUtils;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FacetSearch = (function () {
            function FacetSearch(facet, facetSearchValuesListKlass) {
                var _this = this;
                this.facet = facet;
                this.facetSearchValuesListKlass = facetSearchValuesListKlass;
                this.showingFacetSearchWaitAnimation = false;
                this.searchTemplate = Coveo._.template("<div class='coveo-search'></div>");
                this.magnifierTemplate = Coveo._.template("<div class='coveo-magnifier'></div>");
                this.waitTemplate = Coveo._.template("<div class='coveo-wait-animation'></div>");
                this.clearIconTemplate = Coveo._.template("<span class='coveo-icon'></span>");
                this.clearTemplate = Coveo._.template("<div title='" + Ui.l("Clear", Ui.l("Search")) + "' class='coveo-clear'></div>");
                this.middleTemplate = Coveo._.template("<div class='coveo-middle'></div>");
                this.inputTemplate = Coveo._.template("<input type='text' autocapitalize='off' autocorrect='off' placeholder='<%- placeholder %>'/>");
                this.searchResultsTemplate = Coveo._.template('<ul class="coveo-search-results"/>');
                this.searchResults = Coveo.$(this.searchResultsTemplate());
                Coveo.$(window).resize(function () {
                    if (!Coveo.DeviceUtils.isMobileDevice()) {
                        _this.positionSearchResults();
                    }
                });
            }
            FacetSearch.prototype.build = function () {
                if (Coveo.DeviceUtils.isMobileDevice()) {
                    return this.buildSearchMobile();
                }
                else {
                    return this.buildBaseSearch();
                }
            };
            FacetSearch.prototype.positionSearchResults = function () {
                if (this.searchResults != null && this.searchResults.is(':visible')) {
                    if (Coveo.DeviceUtils.isMobileDevice()) {
                        this.searchResults.insertAfter(this.search);
                    }
                    else {
                        var resultsBorderAndPadding = this.searchResults.outerWidth() - this.searchResults.innerWidth();
                        this.searchResults.outerWidth(this.search.outerWidth() - resultsBorderAndPadding);
                        this.searchResults.show();
                        Coveo.JQueryUtils.positionPopup(this.searchResults, this.search, Coveo.$(this.facet.element), Coveo.$(this.facet.root), { vertical: 2 /* bottom */, horizontal: 1 /* center */ });
                    }
                }
            };
            FacetSearch.prototype.completelyDismissSearch = function () {
                this.cancelAnyPendingSearchOperation();
                this.facet.unfadeInactiveValuesInMainList();
                this.search.removeClass('coveo-no-results');
                this.hideSearchResultsElement();
                this.input.val('');
                this.clear.hide();
            };
            FacetSearch.prototype.buildBaseSearch = function () {
                var _this = this;
                this.search = Coveo.$(this.searchTemplate());
                this.magnifier = Coveo.$(this.magnifierTemplate()).appendTo(this.search);
                this.wait = Coveo.$(this.waitTemplate()).hide().appendTo(this.search);
                this.clearIcon = Coveo.$(this.clearIconTemplate());
                this.clear = Coveo.$(this.clearTemplate()).appendTo(this.search).hide().append(this.clearIcon);
                // This is needed to establish a new BFC for the input.
                // http://colinaarts.com/articles/the-magic-of-overflow-hidden/#making-room-for-floats
                this.middle = Coveo.$(this.middleTemplate()).appendTo(this.search);
                this.input = Coveo.$(this.inputTemplate({ placeholder: Ui.l("SearchIn", this.facet.options.title) })).appendTo(this.middle);
                Ui.Component.pointElementsToDummyForm(this.input);
                this.input.keyup(function (event) { return _this.handleFacetSearchKeyUp(event); });
                this.clear.fastClick(function (e) { return _this.handleFacetSearchClear(); });
                this.input.focus(function (e) { return _this.handleFacetSearchFocus(e); });
                this.input.blur(function (e) { return _this.handleFacetSearchBlur(); });
                return this.search;
            };
            FacetSearch.prototype.buildSearchMobile = function () {
                var _this = this;
                var button = Coveo.$("<div class='coveo-search-button-mobile'>" + Ui.l("Search") + "</div>");
                this.search = this.buildBaseSearch();
                button.fastClick(function () {
                    var modalbox = Coveo.ModalBox.open(Coveo.$('<div />').append(_this.search), {
                        title: Coveo.JQueryUtils.getPopUpCloseButton(Ui.l("Close"), Ui.l("SearchIn", _this.facet.options.title)),
                        validation: function () {
                            _this.completelyDismissSearch();
                            return true;
                        },
                        className: 'coveo-mobile-facet-search'
                    });
                    Coveo.$(modalbox.wrapper.find('.coveo-title')).fastClick(function () { return modalbox.close(); });
                    _this.input.val('').keyup().focus();
                });
                return button;
            };
            FacetSearch.prototype.handleFacetSearchKeyUp = function (event) {
                Coveo.Assert.exists(event);
                var isEmpty = this.input.val() == '';
                this.showOrHideClearElement(isEmpty);
                if (!Coveo.DeviceUtils.isMobileDevice()) {
                    this.handleKeyboardNavigation(event, isEmpty);
                }
                else {
                    this.startNewSearchTimeout();
                }
            };
            FacetSearch.prototype.handleFacetSearchFocus = function (e) {
                if (this.getValueInInputForFacetSearch() != '' && !Coveo.DeviceUtils.isMobileDevice()) {
                    this.startNewSearchTimeout();
                }
                if (Coveo.DeviceUtils.isSmallScreenWidth()) {
                    Coveo.MobileUtils.addToggleClassOnSearchInterface("slide-left");
                }
            };
            FacetSearch.prototype.handleFacetSearchBlur = function () {
                var _this = this;
                // Give the browser time to trigger the click event on a search item if that's what
                // triggered the loss of focus.
                setTimeout(function () {
                    if (!Coveo.DeviceUtils.isMobileDevice()) {
                        _this.completelyDismissSearch();
                    }
                }, 250);
            };
            FacetSearch.prototype.handleFacetSearchClear = function () {
                this.input.val('');
                this.clear.hide();
                this.completelyDismissSearch();
            };
            FacetSearch.prototype.showOrHideClearElement = function (isEmpty) {
                if (!isEmpty) {
                    this.clear.show();
                }
                else {
                    this.clear.hide();
                    this.search.removeClass('coveo-no-results');
                }
            };
            FacetSearch.prototype.handleKeyboardNavigation = function (event, isEmpty) {
                switch (event.which) {
                    case 13 /* ENTER */:
                        this.keyboardNavigationEnterPressed(event, isEmpty);
                        break;
                    case 46 /* DELETE */:
                        this.keyboardNavigationDeletePressed(event);
                        break;
                    case 27 /* ESCAPE */:
                        this.completelyDismissSearch();
                        break;
                    case 40 /* DOWN_ARROW */:
                        this.moveCurrentResultDown();
                        break;
                    case 38 /* UP_ARROW */:
                        this.moveCurrentResultUp();
                        break;
                    default:
                        this.highlightCurrentQueryWithinSearchResults();
                        this.startNewSearchTimeout();
                        break;
                }
            };
            FacetSearch.prototype.keyboardNavigationEnterPressed = function (event, isEmpty) {
                if (event.shiftKey) {
                    this.triggerNewFacetSearch();
                }
                else {
                    // The second condition in the following IF is for UTs, since the
                    // element is not really visible when running under QUnit.
                    if (this.searchResults.is(':visible') || this.searchResults.css('display') == 'block') {
                        this.performSelectActionOnCurrentSearchResult();
                        this.completelyDismissSearch();
                    }
                    else if (!this.search.is('.coveo-no-results') && !isEmpty) {
                        this.selectAllValuesMatchingSearch();
                    }
                }
            };
            FacetSearch.prototype.keyboardNavigationDeletePressed = function (event) {
                if (event.shiftKey) {
                    this.performExcludeActionOnCurrentSearchResult();
                    this.completelyDismissSearch();
                    this.input.val('');
                }
            };
            FacetSearch.prototype.triggerNewFacetSearch = function (numberOfValuesInFacetSearch, oldLength) {
                var _this = this;
                if (numberOfValuesInFacetSearch === void 0) { numberOfValuesInFacetSearch = this.facet.options.numberOfValuesInFacetSearch; }
                this.cancelAnyPendingSearchOperation();
                this.showFacetSearchWaitingAnimation();
                this.facet.logger.info('Triggering new facet search');
                var valueInInput = this.getValueInInputForFacetSearch();
                var valueToUseForFacetSearch = Ui.FacetUtils.getValuesToUseForSearchInFacet(valueInInput, this.facet);
                this.facetSearchDeferred = this.facet.facetQueryController.recursiveFacetSearch(valueInInput, this.facet.options.numberOfValuesInFacetSearch);
                this.facetSearchDeferred.done(function (fieldValues) {
                    _this.facet.usageAnalytics.logCustomEvent(Ui.AnalyticsActionCauseList.facetSearch, { facetId: _this.facet.options.uniqueId }, _this.facet.root);
                    _this.facet.logger.debug('Received field values', fieldValues);
                    _this._processNewFacetSearchResults(fieldValues.slice(0, _this.facet.options.numberOfValuesInFacetSearch + 1));
                    _this.hideFacetSearchWaitingAnimation();
                    _this.facetSearchDeferred = undefined;
                });
                this.facetSearchDeferred.fail(function (data, error) {
                    // The request might be normally cancelled if another search is triggered.
                    // In this case we do not hide the animation to prevent flicking.
                    if (Coveo.Utils.exists(error)) {
                        _this.facet.logger.error('Error while retrieving facet values', error);
                        _this.hideFacetSearchWaitingAnimation();
                    }
                    _this.facetSearchDeferred = undefined;
                });
            };
            FacetSearch.prototype.startNewSearchTimeout = function () {
                var _this = this;
                this.cancelAnyPendingSearchOperation();
                this.facetSearchTimeout = setTimeout(function () {
                    if (_this.getValueInInputForFacetSearch() != '') {
                        _this.triggerNewFacetSearch();
                    }
                    else {
                        _this.completelyDismissSearch();
                    }
                }, this.facet.options.facetSearchDelay);
            };
            FacetSearch.prototype.cancelAnyPendingSearchOperation = function () {
                if (Coveo.Utils.exists(this.facetSearchTimeout)) {
                    clearTimeout(this.facetSearchTimeout);
                    this.facetSearchTimeout = undefined;
                }
                if (Coveo.Utils.exists(this.facetSearchDeferred)) {
                    this.facetSearchDeferred.reject();
                    this.facetSearchDeferred = undefined;
                }
                this.hideFacetSearchWaitingAnimation();
            };
            FacetSearch.prototype._processNewFacetSearchResults = function (fieldValues) {
                Coveo.Assert.exists(fieldValues);
                if (fieldValues.length > 0) {
                    this.search.removeClass('coveo-no-results');
                    this.facet.fadeInactiveValuesInMainList(this.facet.options.facetSearchDelay);
                    this.rebuildSearchResults(fieldValues);
                    this.showSearchResultsElement();
                    this.highlightCurrentQueryWithinSearchResults();
                    Ui.FacetUtils.clipCaptionsToAvoidOverflowingTheirContainer(this.facet, true);
                    this.makeFirstSearchResultTheCurrentOne();
                }
                else {
                    this.hideSearchResultsElement();
                    this.search.addClass('coveo-no-results');
                }
            };
            FacetSearch.prototype.rebuildSearchResults = function (fieldValues) {
                var _this = this;
                Coveo.Assert.exists(fieldValues);
                this.searchResults.empty();
                var selectAll = Coveo.$('<li class="coveo-selectable coveo-select-all"/>').text(Ui.l("SelectAll"));
                selectAll.fastClick(function () { return _this.selectAllValuesMatchingSearch(); });
                if (!Coveo.DeviceUtils.isMobileDevice()) {
                    selectAll.appendTo(this.searchResults);
                }
                var facetValues = Coveo._.map(fieldValues, function (fieldValue) {
                    return Ui.FacetValue.create(fieldValue);
                });
                new this.facetSearchValuesListKlass(this.facet, Ui.FacetValueElement).build(facetValues).appendTo(this.searchResults);
                if (Coveo.DeviceUtils.isMobileDevice()) {
                    selectAll.append("<span class='coveo-mobile-facet-search-select-all'></span>");
                    selectAll.appendTo(this.searchResults);
                }
                this.searchResults.find('.coveo-selectable').each(function (i, e) {
                    Coveo.$(e).mousemove(function () {
                        _this.makeCurrentResult(Coveo.$(e));
                    });
                });
            };
            FacetSearch.prototype.showSearchResultsElement = function () {
                this.searchResults.appendTo(this.facet.root);
                this.positionSearchResults();
            };
            FacetSearch.prototype.hideSearchResultsElement = function () {
                this.searchResults.remove();
            };
            FacetSearch.prototype.highlightCurrentQueryWithinSearchResults = function () {
                var _this = this;
                Coveo.$(this.searchResults).find('.coveo-caption').each(function (index, captionElement) {
                    var search = _this.getValueInInputForFacetSearch();
                    var regex = new RegExp('(' + Coveo.StringUtils.wildcardsToRegex(search) + ')', 'ig');
                    var text = Coveo.$(captionElement).text();
                    var highlighted = text.replace(regex, '<span class="coveo-highlight">$1</span>');
                    Coveo.$(captionElement).html(highlighted);
                });
            };
            FacetSearch.prototype.makeFirstSearchResultTheCurrentOne = function () {
                this.makeCurrentResult(this.getSelectables().first());
            };
            FacetSearch.prototype.makeCurrentResult = function (result) {
                this.getSelectables().removeClass('coveo-current');
                this.getSelectables().first().addClass('coveo-current');
            };
            FacetSearch.prototype.moveCurrentResultDown = function () {
                var current = this.searchResults.find(".coveo-current");
                this.getSelectables().removeClass('coveo-current');
                var next = current.next('.coveo-selectable').first();
                if (next.length > 0) {
                    next.addClass('coveo-current');
                }
                else {
                    current.siblings('.coveo-selectable').first().addClass('coveo-current');
                }
            };
            FacetSearch.prototype.moveCurrentResultUp = function () {
                var current = this.searchResults.find('.coveo-current');
                this.searchResults.find('.coveo-selectable').removeClass('coveo-current');
                var previous = current.prev('.coveo-selectable').first();
                if (previous.length > 0) {
                    previous.addClass('coveo-current');
                }
                else {
                    current.siblings('.coveo-selectable').last().addClass('coveo-current');
                }
            };
            FacetSearch.prototype.getSelectables = function (target) {
                if (target === void 0) { target = this.searchResults; }
                return target.find(".coveo-selectable");
            };
            FacetSearch.prototype.performSelectActionOnCurrentSearchResult = function () {
                var current = this.searchResults.find('.coveo-current');
                Coveo.Assert.check(current.length == 1);
                var checkbox = current.find('input[type="checkbox"]');
                if (checkbox.length > 0) {
                    checkbox.prop('checked', true);
                    checkbox.change();
                }
                else {
                    current.fastClick();
                }
            };
            FacetSearch.prototype.performExcludeActionOnCurrentSearchResult = function () {
                var current = this.searchResults.find('.coveo-current');
                Coveo.Assert.check(current.length == 1);
                current.find('.coveo-exclude').fastClick();
            };
            FacetSearch.prototype.getValueInInputForFacetSearch = function () {
                return this.input.val();
            };
            FacetSearch.prototype.selectAllValuesMatchingSearch = function () {
                var _this = this;
                this.facet.showWaitingAnimation();
                var valueInInput = this.getValueInInputForFacetSearch();
                var valueToUseForSearch = Ui.FacetUtils.getValuesToUseForSearchInFacet(valueInInput, this.facet);
                var deferred = this.facet.facetQueryController.searchInFacet(1000, valueToUseForSearch, this.facet.options.facetSearchIgnoreAccents);
                deferred.done(function (fieldValues) {
                    _this.completelyDismissSearch();
                    var facetValues = Coveo._.map(fieldValues, function (fieldValue) {
                        var facetValue = _this.facet.values.get(fieldValue.value);
                        if (!Coveo.Utils.exists(facetValue)) {
                            facetValue = Ui.FacetValue.create(fieldValue);
                        }
                        facetValue.selected = true;
                        facetValue.excluded = false;
                        return facetValue;
                    });
                    _this.facet.processFacetSearchAllResultsSelected(facetValues);
                });
                this.completelyDismissSearch();
            };
            FacetSearch.prototype.showFacetSearchWaitingAnimation = function () {
                var _this = this;
                Coveo.Defer.defer(function () {
                    if (!_this.showingFacetSearchWaitAnimation) {
                        _this.wait.width(_this.magnifier.width());
                        _this.wait.height(_this.magnifier.height());
                        _this.magnifier.hide();
                        _this.wait.show();
                        _this.showingFacetSearchWaitAnimation = true;
                    }
                });
            };
            FacetSearch.prototype.hideFacetSearchWaitingAnimation = function () {
                if (this.showingFacetSearchWaitAnimation) {
                    this.magnifier.show();
                    this.wait.hide();
                    this.showingFacetSearchWaitAnimation = false;
                }
            };
            return FacetSearch;
        })();
        Ui.FacetSearch = FacetSearch;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var LocalStorageUtils = (function () {
        function LocalStorageUtils(id) {
            this.id = id;
            Coveo.Assert.exists(window.localStorage);
        }
        LocalStorageUtils.prototype.save = function (data) {
            localStorage.setItem(this.getLocalStorageKey(), JSON.stringify(data));
        };
        LocalStorageUtils.prototype.load = function () {
            var value = localStorage.getItem(this.getLocalStorageKey());
            return value && JSON.parse(value);
        };
        LocalStorageUtils.prototype.remove = function (key) {
            if (key == undefined) {
                localStorage.removeItem(this.getLocalStorageKey());
            }
            else {
                var oldObj = this.load();
                delete oldObj[key];
                this.save(oldObj);
            }
        };
        LocalStorageUtils.prototype.getLocalStorageKey = function () {
            return "coveo-" + this.id;
        };
        return LocalStorageUtils;
    })();
    Coveo.LocalStorageUtils = LocalStorageUtils;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FacetSettings = (function () {
            function FacetSettings(sorts, facet) {
                var _this = this;
                this.facet = facet;
                this.facetSettingsIconTemplate = Coveo._.template("<span class='coveo-icon'></span>");
                this.facetSettingsButtonTemplate = Coveo._.template("<div title='" + Ui.l("Settings") + "' class='coveo-settings'></div>");
                this.facetSettingsPopupTemplate = Coveo._.template('<div class="coveo-settings-popup"></div>');
                this.facetSettingsSectionTemplate = Coveo._.template("<div class='coveo-section <%= _class %>'></div>");
                this.facetSettingsSectionIconTemplate = Coveo._.template("<div class='coveo-icon'></div>");
                this.facetSettingsItemsTemplate = Coveo._.template("<div class='coveo-items'></div>");
                this.facetSettingsItemTemplate = Coveo._.template("<div class='coveo-item' title='<%- title %>'><%- label %></div>");
                this.enabledSorts = [];
                this.enabledSortsIgnoreRenderBecauseOfPairs = [];
                this.customSortDirection = "ascending";
                this.customSortDirectionChange = false;
                Coveo._.each(sorts, function (sortToActivate) {
                    var newSortToEnable = FacetSettings.availableSorts[sortToActivate.toLowerCase()];
                    if (newSortToEnable != undefined) {
                        _this.enabledSorts.push(newSortToEnable);
                    }
                });
                this.removeEnabledSortsBasedOnFacetType();
                this.filterDuplicateForRendering();
                if (Coveo.Utils.isNonEmptyArray(this.enabledSorts)) {
                    if (this.facet.options.sortCriteria != undefined) {
                        this.activeSort = Coveo._.find(this.enabledSorts, function (enabledSort) {
                            return enabledSort.name == _this.facet.options.sortCriteria;
                        });
                    }
                    if (!this.activeSort) {
                        this.activeSort = this.enabledSorts[0];
                    }
                }
            }
            FacetSettings.prototype.build = function () {
                this.settingsButton = Coveo.$(this.facetSettingsButtonTemplate());
                this.settingsIcon = Coveo.$(this.facetSettingsIconTemplate());
                this.settingsPopup = Coveo.$(this.facetSettingsPopupTemplate());
                if (Coveo.Utils.isNonEmptyArray(this.enabledSorts)) {
                    var sortSection = this.buildSortSection();
                    this.directionSection = this.buildDirectionSection();
                }
                if (this.facet.options.enableSettingsFacetState) {
                    this.saveStateSection = this.buildSaveStateSection();
                    this.clearStateSection = this.buildClearStateSection();
                }
                this.hideSection = this.buildHideSection();
                this.showSection = this.buildShowSection();
                this.handleMouseEventOnButton(sortSection);
                if (Coveo.Utils.isNonEmptyArray(this.enabledSorts)) {
                    this.settingsPopup.append(sortSection.element, this.directionSection, this.saveStateSection, this.clearStateSection, this.hideSection, this.showSection);
                }
                else {
                    this.settingsPopup.append(this.saveStateSection, this.clearStateSection, this.hideSection, this.showSection);
                }
                this.settingsButton.append(this.settingsIcon);
                return this.settingsButton;
            };
            FacetSettings.prototype.reorderValues = function (facetValues) {
                if (this.activeSort.name == "custom" && this.facet.options.customSort != undefined) {
                    return this.reorderValuesWithCustomOrder(facetValues);
                }
                else {
                    return facetValues;
                }
            };
            FacetSettings.prototype.loadSavedState = function () {
                //set the state from the settings only if there is nothing
                //in the query state model for the current facet
                var state = this.facetStateLocalStorage.load();
                var currentStateIncluded = this.facet.queryStateModel.get(this.includedStateAttribute);
                var currentStateExcluded = this.facet.queryStateModel.get(this.excludedStateAttribute);
                var currentStateOperator = this.facet.queryStateModel.get(this.operatorStateAttribute);
                if (!Coveo.Utils.isNullOrUndefined(state) && Coveo.Utils.isEmptyArray(currentStateIncluded) && Coveo.Utils.isEmptyArray(currentStateExcluded) && !Coveo.Utils.isNonEmptyString(currentStateOperator)) {
                    var toSet = {};
                    toSet[this.includedStateAttribute] = state.included;
                    toSet[this.excludedStateAttribute] = state.excluded;
                    toSet[this.operatorStateAttribute] = state.operator;
                    this.facet.queryStateModel.setMultiple(toSet);
                    this.loadedFromSettings = toSet;
                }
            };
            FacetSettings.prototype.removeEnabledSortsBasedOnFacetType = function () {
                if (this.facet.isInstanceOf("FacetRange")) {
                    var facetRange = this.facet;
                    if (facetRange.options["slider"]) {
                        this.enabledSorts = [];
                    }
                }
            };
            FacetSettings.prototype.reorderValuesWithCustomOrder = function (facetValues) {
                var _this = this;
                var notFoundIndex = facetValues.length;
                var valueIndexPair = Coveo._.map(facetValues, function (facetValue) {
                    var index = Coveo._.indexOf(_this.facet.options.customSort, facetValue.lookupValue || facetValue.value);
                    index = index == -1 ? ++notFoundIndex : index;
                    return { facetValue: facetValue, index: index };
                });
                var sorted = Coveo._.sortBy(valueIndexPair, "index");
                sorted = this.customSortDirection == "ascending" ? sorted : sorted.reverse();
                return Coveo._.pluck(sorted, "facetValue");
            };
            FacetSettings.prototype.buildSortSection = function () {
                var sortSection = Coveo.$(this.facetSettingsSectionTemplate({ _class: "coveo-sort" }));
                var sortSectionIcon = Coveo.$(this.facetSettingsSectionIconTemplate());
                var sortSectionItems = Coveo.$(this.facetSettingsItemsTemplate());
                var sortItems = this.buildSortSectionItems();
                sortSectionItems.append(sortItems);
                sortSection.append(sortSectionIcon, sortSectionItems);
                return { element: sortSection, sortItems: sortItems };
            };
            FacetSettings.prototype.buildSortSectionItems = function () {
                var _this = this;
                return Coveo._.map(this.enabledSorts, function (enabledSort) {
                    if (Coveo._.contains(_this.enabledSortsIgnoreRenderBecauseOfPairs, enabledSort)) {
                        return Coveo.$("<div></div>").hide();
                    }
                    else {
                        return Coveo.$(_this.facetSettingsItemTemplate({
                            label: Coveo.L10N.format(enabledSort.label),
                            title: enabledSort.description
                        })).click(function (e) { return _this.handleClickSortButton(e, enabledSort); });
                    }
                });
            };
            FacetSettings.prototype.closePopupAndUpdateSort = function () {
                this.closePopup();
                if (this.activeSort.name != "custom") {
                    this.facet.updateSort(this.activeSort.name);
                }
                else {
                    this.facet.updateSort("nosort");
                    if (this.customSortDirectionChange) {
                        this.customSortDirectionChange = false;
                        this.facet.queryController.executeQuery();
                    }
                }
            };
            FacetSettings.prototype.closePopup = function () {
                this.settingsPopup.detach();
            };
            FacetSettings.prototype.buildDirectionSection = function () {
                var _this = this;
                var directionSection = Coveo.$(this.facetSettingsSectionTemplate({ _class: "coveo-direction" }));
                var icon = Coveo.$(this.facetSettingsSectionIconTemplate());
                var directionItems = Coveo.$(this.facetSettingsItemsTemplate());
                var ascending = Coveo.$(this.facetSettingsItemTemplate({
                    label: Ui.l("Ascending"),
                    title: Ui.l("Ascending")
                })).click(function (e) { return _this.handleDirectionClick(e, "ascending"); });
                var descending = Coveo.$(this.facetSettingsItemTemplate({
                    label: Ui.l("Descending"),
                    title: Ui.l("Descending")
                })).click(function (e) { return _this.handleDirectionClick(e, "descending"); });
                directionItems.append(ascending, descending);
                directionSection.append(icon, directionItems);
                if (!this.activeSort.directionToggle) {
                    directionSection.addClass("coveo-disabled");
                }
                else {
                    this.selectItem(this.getItems(directionSection).first());
                }
                return directionSection;
            };
            FacetSettings.prototype.buildSaveStateSection = function () {
                var _this = this;
                var saveStateSection = Coveo.$(this.facetSettingsSectionTemplate({ _class: "coveo-save-state" }));
                var icon = Coveo.$(this.facetSettingsSectionIconTemplate());
                var saveStateItems = Coveo.$(this.facetSettingsItemsTemplate());
                this.facetStateLocalStorage = new Coveo.LocalStorageUtils('facet-state-' + this.facet.options.uniqueId);
                this.includedStateAttribute = Coveo.Models.QueryStateModel.getFacetId(this.facet.options.uniqueId);
                this.excludedStateAttribute = Coveo.Models.QueryStateModel.getFacetId(this.facet.options.uniqueId, false);
                this.operatorStateAttribute = Coveo.Models.QueryStateModel.getFacetOperator(this.facet.options.uniqueId);
                var saveStateItem = Coveo.$(this.facetSettingsItemTemplate({ label: Ui.l("SaveFacetState"), title: Ui.l("SaveFacetState") })).fastClick(function (e) { return _this.handleSaveStateClick(e); }).appendTo(saveStateItems);
                saveStateSection.append(icon, saveStateItems);
                return saveStateSection;
            };
            FacetSettings.prototype.buildClearStateSection = function () {
                var _this = this;
                var clearStateSection = Coveo.$(this.facetSettingsSectionTemplate({ _class: "coveo-clear-state" }));
                var icon = Coveo.$(this.facetSettingsSectionIconTemplate());
                var clearStateItems = Coveo.$(this.facetSettingsItemsTemplate());
                var clearStateItem = Coveo.$(this.facetSettingsItemTemplate({ label: Ui.l("ClearFacetState"), title: Ui.l("ClearFacetState") })).fastClick(function (e) { return _this.handleClearStateClick(e); }).appendTo(clearStateItems);
                clearStateSection.append(icon, clearStateItems);
                return clearStateSection;
            };
            FacetSettings.prototype.buildHideSection = function () {
                var _this = this;
                var hideSection = Coveo.$(this.facetSettingsSectionTemplate({ _class: "coveo-hide" }));
                var icon = Coveo.$(this.facetSettingsSectionIconTemplate());
                var hideItems = Coveo.$(this.facetSettingsItemsTemplate());
                var hideItem = Coveo.$(this.facetSettingsItemTemplate({ label: Ui.l("Collapse"), title: Ui.l("HideFacet") })).fastClick(function (e) {
                    _this.facet.collapseFacet();
                    _this.settingsPopup.detach();
                }).appendTo(hideItems);
                hideSection.append(icon, hideItems);
                return hideSection;
            };
            FacetSettings.prototype.buildShowSection = function () {
                var _this = this;
                var showSection = Coveo.$(this.facetSettingsSectionTemplate({ _class: "coveo-show" }));
                var icon = Coveo.$(this.facetSettingsSectionIconTemplate());
                var showItems = Coveo.$(this.facetSettingsItemsTemplate());
                var showItem = Coveo.$(this.facetSettingsItemTemplate({ label: Ui.l("Expand"), title: Ui.l("Expand") })).click(function (e) {
                    _this.facet.expandFacet();
                    _this.settingsPopup.detach();
                }).appendTo(showItems);
                showSection.append(icon, showItems);
                return showSection;
            };
            FacetSettings.prototype.handleClickSettingsButtons = function (event, sortSection) {
                var _this = this;
                if (this.settingsPopup.is(':visible')) {
                    this.settingsPopup.detach();
                }
                else {
                    Coveo.JQueryUtils.positionPopup(this.settingsPopup, Coveo.$(event.delegateTarget), Coveo.$(this.facet.root), Coveo.$(this.facet.root), this.getPopupAlignment());
                    this.hideSection.toggle(!Coveo.$(this.facet.element).hasClass("coveo-collapsed"));
                    this.showSection.toggle(Coveo.$(this.facet.element).hasClass("coveo-collapsed"));
                    if (this.facet.options.enableSettingsFacetState) {
                        this.clearStateSection.toggle(!Coveo.Utils.isNullOrUndefined(this.facetStateLocalStorage.load()));
                    }
                    Coveo._.each(this.enabledSorts, function (criteria, i) {
                        if (_this.activeSort.name.toLowerCase() == criteria.name.toLowerCase()) {
                            _this.selectItem(sortSection.sortItems[i]);
                        }
                        else {
                            _this.unselectItem(sortSection.sortItems[i]);
                        }
                    });
                }
            };
            FacetSettings.prototype.handleClickSortButton = function (e, enabledSort) {
                this.activeSort = enabledSort;
                if (enabledSort.directionToggle && Coveo._.contains(this.enabledSorts, FacetSettings.availableSorts[this.activeSort.relatedSort])) {
                    this.activateDirectionSection();
                }
                else {
                    this.disableDirectionSection();
                }
                this.selectItem(Coveo.$(e.target));
                this.closePopupAndUpdateSort();
            };
            FacetSettings.prototype.handleDirectionClick = function (e, direction) {
                if (!Coveo.$(e.target).parent().parent().hasClass("coveo-disabled") && this.activeSort.name.indexOf(direction) == -1) {
                    this.activeSort = FacetSettings.availableSorts[this.activeSort.relatedSort];
                    this.unselectSection(this.directionSection);
                    this.selectItem(Coveo.$(e.target));
                    if (this.activeSort.name == "custom" && this.customSortDirection != direction) {
                        this.customSortDirection = direction;
                        this.customSortDirectionChange = true;
                    }
                    this.closePopupAndUpdateSort();
                }
            };
            FacetSettings.prototype.handleSaveStateClick = function (e) {
                this.facetStateLocalStorage.save({
                    included: this.facet.queryStateModel.get(this.includedStateAttribute),
                    excluded: this.facet.queryStateModel.get(this.excludedStateAttribute),
                    operator: this.facet.queryStateModel.get(this.operatorStateAttribute)
                });
                this.closePopup();
            };
            FacetSettings.prototype.handleClearStateClick = function (e) {
                var _this = this;
                this.facetStateLocalStorage.remove();
                this.facet.reset();
                this.closePopup();
                this.facet.triggerNewQuery(function () { return _this.facet.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.facetClearAll, { facetId: _this.facet.options.uniqueId }); });
            };
            FacetSettings.prototype.handleMouseEventOnButton = function (sortSection) {
                var _this = this;
                var closeTimeout;
                this.settingsButton.click(function (e) { return _this.handleClickSettingsButtons(e, sortSection); });
                Coveo.$([this.settingsIcon[0], this.settingsPopup[0]]).mouseleave(function () { return closeTimeout = setTimeout(function () {
                    _this.settingsPopup.detach();
                }, 300); }).mouseenter(function () { return clearTimeout(closeTimeout); });
            };
            FacetSettings.prototype.activateDirectionSection = function () {
                this.directionSection.removeClass("coveo-disabled");
                this.unselectSection(this.directionSection);
                this.selectItem(this.getItems(this.directionSection).first());
            };
            FacetSettings.prototype.disableDirectionSection = function () {
                this.directionSection.addClass("coveo-disabled");
                this.unselectSection(this.directionSection);
            };
            FacetSettings.prototype.getItems = function (section) {
                return section.find(".coveo-item");
            };
            FacetSettings.prototype.unselectSection = function (section) {
                this.getItems(section).removeClass("coveo-selected");
            };
            FacetSettings.prototype.selectItem = function (item) {
                item.addClass("coveo-selected");
            };
            FacetSettings.prototype.unselectItem = function (item) {
                item.removeClass("coveo-selected");
            };
            FacetSettings.prototype.filterDuplicateForRendering = function () {
                if (this.hasDuplicate("alphaascending", "alphadescending")) {
                    this.enabledSortsIgnoreRenderBecauseOfPairs.push(FacetSettings.availableSorts["alphadescending"]);
                }
                if (this.hasDuplicate("computedfieldascending", "computedfielddescending")) {
                    this.enabledSortsIgnoreRenderBecauseOfPairs.push(FacetSettings.availableSorts["computedfielddescending"]);
                }
            };
            FacetSettings.prototype.getPopupAlignment = function () {
                var alignmentHorizontal = Coveo.DeviceUtils.isMobileDevice() ? 1 /* center */ : 2 /* right */;
                var alignmentVertical = 2 /* bottom */;
                return {
                    horizontal: alignmentHorizontal,
                    vertical: alignmentVertical
                };
            };
            FacetSettings.prototype.hasDuplicate = function (first, second) {
                var duplicate = Coveo._.filter(this.enabledSorts, function (active) {
                    return active.name == first || active.name == second;
                });
                return duplicate != undefined && duplicate.length == 2;
            };
            FacetSettings.availableSorts = {
                score: {
                    label: Ui.l("Score"),
                    directionToggle: false,
                    description: Ui.l("ScoreDescription"),
                    name: "score"
                },
                occurrences: {
                    label: Ui.l("Occurrences"),
                    directionToggle: false,
                    description: Ui.l("OccurrencesDescription"),
                    name: "occurrences"
                },
                alphaascending: {
                    label: Ui.l("Label"),
                    directionToggle: true,
                    description: Ui.l("LabelDescription"),
                    name: "alphaascending",
                    relatedSort: "alphadescending"
                },
                alphadescending: {
                    label: Ui.l("Label"),
                    directionToggle: true,
                    description: Ui.l("LabelDescription"),
                    name: "alphadescending",
                    relatedSort: "alphaascending"
                },
                computedfieldascending: {
                    label: Ui.l("Value"),
                    directionToggle: true,
                    description: Ui.l("ValueDescription"),
                    name: "computedfieldascending",
                    relatedSort: "computedfielddescending"
                },
                computedfielddescending: {
                    label: Ui.l("Value"),
                    directionToggle: true,
                    description: Ui.l("ValueDescription"),
                    name: "computedfielddescending",
                    relatedSort: "computedfieldascending"
                },
                chisquare: {
                    label: Ui.l("RelativeFrequency"),
                    directionToggle: false,
                    description: Ui.l("RelativeFrequencyDescription"),
                    name: "chisquare"
                },
                custom: {
                    label: Ui.l("Custom"),
                    directionToggle: true,
                    description: Ui.l("CustomDescription"),
                    name: "custom",
                    relatedSort: "custom"
                }
            };
            return FacetSettings;
        })();
        Ui.FacetSettings = FacetSettings;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FacetValuesList = (function () {
            function FacetValuesList(facet, facetValueElementKlass) {
                this.facet = facet;
                this.facetValueElementKlass = facetValueElementKlass;
                this.valueList = {};
            }
            FacetValuesList.prototype.build = function () {
                this.valueContainer = Coveo.$('<ul class="coveo-values"/>');
                return this.valueContainer;
            };
            FacetValuesList.prototype.get = function (value) {
                var getter;
                if (value instanceof Ui.FacetValue) {
                    getter = value.value;
                }
                else {
                    value = Coveo.Utils.anyTypeToString(value);
                    getter = value.toLowerCase();
                    ;
                }
                this.ensureFacetValueIsInList(value);
                return this.valueList[getter];
            };
            FacetValuesList.prototype.select = function (value) {
                var valueElement = this.get(value);
                valueElement.select();
                return valueElement;
            };
            FacetValuesList.prototype.unselect = function (value) {
                var valueElement = this.get(value);
                valueElement.unselect();
                return valueElement;
            };
            FacetValuesList.prototype.exclude = function (value) {
                var valueElement = this.get(value);
                valueElement.exclude();
                return valueElement;
            };
            FacetValuesList.prototype.unExclude = function (value) {
                var valueElement = this.get(value);
                valueElement.unexclude();
                return valueElement;
            };
            FacetValuesList.prototype.toggleSelect = function (value) {
                var valueElement = this.get(value);
                if (valueElement.facetValue.selected) {
                    valueElement.unselect();
                }
                else {
                    valueElement.select();
                }
                return valueElement;
            };
            FacetValuesList.prototype.toggleExclude = function (value) {
                var valueElement = this.get(value);
                if (valueElement.facetValue.excluded) {
                    valueElement.unexclude();
                }
                else {
                    valueElement.exclude();
                }
                return valueElement;
            };
            FacetValuesList.prototype.rebuild = function (numberOfValues) {
                var _this = this;
                this.valueContainer.empty();
                var allValues = this._getValuesToBuildWith();
                var toCompare = numberOfValues;
                Coveo._.each(allValues, function (facetValue, index, list) {
                    if (_this.facetValueShouldBeRemoved(facetValue)) {
                        _this.facet.values.remove(facetValue.value);
                        toCompare += 1;
                    }
                    else if (index < toCompare) {
                        var valueElement = new _this.facetValueElementKlass(_this.facet, facetValue, true);
                        _this.valueList[facetValue.value] = valueElement;
                        var valueListElement = valueElement.build().listElement;
                        _this.valueContainer.append(valueListElement);
                    }
                });
                Ui.FacetUtils.addNoStateCssClassToFacetValues(this.facet, this.valueContainer);
                Ui.FacetUtils.clipCaptionsToAvoidOverflowingTheirContainer(this.facet);
            };
            FacetValuesList.prototype._getValuesToBuildWith = function () {
                return this.facet.facetSettings ? this.facet.facetSettings.reorderValues(this.facet.values.getAll()) : this.facet.values.getAll();
            };
            FacetValuesList.prototype.facetValueShouldBeRemoved = function (facetValue) {
                return facetValue.occurrences == 0 && (facetValue.delta == 0 || facetValue.delta == undefined) && !facetValue.selected && !facetValue.excluded && !this.facet.keepDisplayedValuesNextTime;
            };
            /* TODO Remove Comment, will be fix in ts 1.4
             private ensureFacetValueIsInList(value: string);
             private ensureFacetValueIsInList(value: FacetValue);
             */
            FacetValuesList.prototype.ensureFacetValueIsInList = function (value) {
                var facetValue;
                if (value instanceof Ui.FacetValue) {
                    facetValue = this.facet.values.get(value.value);
                    if (facetValue == null) {
                        this.facet.values.add(value);
                        facetValue = value;
                    }
                }
                else {
                    facetValue = this.facet.values.get(value);
                    if (facetValue == null) {
                        facetValue = Ui.FacetValue.createFromValue(value);
                        this.facet.values.add(facetValue);
                    }
                }
                if (this.valueList[facetValue.value] == undefined) {
                    this.valueList[facetValue.value] = new Ui.FacetValueElement(this.facet, facetValue, true);
                    this.valueList[facetValue.value].build();
                }
                else {
                    this.valueList[facetValue.value].facetValue = facetValue;
                }
            };
            FacetValuesList.prototype.addNoStateCssClassToFacetValues = function () {
                if (this.facet.values.getSelected().length != 0) {
                    var noStates = this.valueContainer.find("li").not(".coveo-selected");
                    Coveo._.each(noStates, function (noState) {
                        Coveo.$(noState).addClass('coveo-no-state');
                    });
                }
            };
            return FacetValuesList;
        })();
        Ui.FacetValuesList = FacetValuesList;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ValueElement = (function () {
            function ValueElement(facet, facetValue) {
                this.facet = facet;
                this.facetValue = facetValue;
            }
            ValueElement.prototype.build = function () {
                this.listElement = Coveo.$('<li class="coveo-value coveo-selectable"/>');
                this.listElement.data('value', this.facetValue.value);
                if (!this.facetValue.excluded) {
                    this.excludeIcon = this._buildExcludeIcon().appendTo(this.listElement);
                }
                this.label = Coveo.$('<label/>').appendTo(this.listElement);
                if (Coveo.Utils.exists(this.facetValue.computedField)) {
                    this.computedField = this._buildValueComputedField().appendTo(this.label);
                    this.label.addClass("coveo-with-computed-field");
                }
                var labelDiv = Coveo.$('<div class="coveo-label"/>').appendTo(this.label);
                this.checkbox = this._buildValueCheckbox().appendTo(labelDiv);
                this.stylishCheckbox = this._buildValueStylishCheckbox().appendTo(labelDiv);
                if (this.facet.options.showIcon) {
                    this.icon = this._buildValueIcon().appendTo(labelDiv);
                }
                this.valueCaption = this._buildValueCaption().appendTo(labelDiv);
                this.valueCount = this._buildValueCount().appendTo(labelDiv);
                this._setCssClassOnListValueElement();
                this.bindEvent({ displayNextTime: true, pinFacet: this.facet.options.preservePosition });
                return this;
            };
            ValueElement.prototype.bindEvent = function (eventBindings) {
                if (!Coveo.Utils.isNullOrUndefined(eventBindings.omniboxObject)) {
                    this.isOmnibox = true;
                }
                else {
                    this.isOmnibox = false;
                }
                this._handleEventForCheckboxChange(eventBindings);
                if (this.facetValue.excluded) {
                    this._handleEventForExcludedValueElement(eventBindings);
                }
                else {
                    this._handleEventForValueElement(eventBindings);
                }
            };
            ValueElement.prototype.select = function () {
                this.facetValue.selected = true;
                this.facetValue.excluded = false;
                this._setCssClassOnListValueElement();
            };
            ValueElement.prototype.unselect = function () {
                this.facetValue.selected = false;
                this.facetValue.excluded = false;
                this._setCssClassOnListValueElement();
            };
            ValueElement.prototype.exclude = function () {
                this.facetValue.selected = false;
                this.facetValue.excluded = true;
                this._setCssClassOnListValueElement();
            };
            ValueElement.prototype.unexclude = function () {
                this.facetValue.selected = false;
                this.facetValue.excluded = false;
                this._setCssClassOnListValueElement();
            };
            ValueElement.prototype._buildExcludeIcon = function () {
                return Coveo.$('<div />').attr('title', Ui.l("Exclude", this.facet.getValueCaption(this.facetValue))).addClass('coveo-exclude');
            };
            ValueElement.prototype._buildValueComputedField = function () {
                var computedField = this.facetValue.getFormattedComputedField(this.facet.options.computedFieldFormat);
                if (Coveo.Utils.isNonEmptyString(computedField)) {
                    return Coveo.$('<span/>').addClass('coveo-computed-field').text(computedField);
                }
                else {
                    return Coveo.$([]);
                }
            };
            ValueElement.prototype._buildValueCheckbox = function () {
                var checkbox = Coveo.$('<input type="checkbox"/>');
                checkbox.prop('checked', this.facetValue.selected);
                checkbox.prop('disabled', this.facetValue.excluded);
                Ui.Component.pointElementsToDummyForm(checkbox);
                return checkbox;
            };
            ValueElement.prototype._buildValueStylishCheckbox = function () {
                var checkbox = Coveo.$('<div/>').addClass('coveo-checkbox');
                Coveo.$('<span/>').appendTo(checkbox);
                return checkbox;
            };
            ValueElement.prototype._buildValueIcon = function () {
                var icon = this._getValueIcon();
                if (Coveo.Utils.exists(icon)) {
                    return Coveo.$('<img class="coveo-icon"/>').prop('src', this._getValueIcon());
                }
                else {
                    return this._buildValueIconFromSprite();
                }
            };
            ValueElement.prototype._getValueIcon = function () {
                if (Coveo.Utils.exists(this.facet.options.valueIcon)) {
                    return this.facet.options.valueIcon(this.facetValue);
                }
                else {
                    return undefined;
                }
            };
            ValueElement.prototype._buildValueIconFromSprite = function () {
                return Coveo.$('<div />').addClass('coveo-icon').addClass(this.facet.options.field.substr(1)).addClass(this.facetValue.value);
            };
            ValueElement.prototype._buildValueCaption = function () {
                return Coveo.$('<span class="coveo-caption"/>').text(this.facet.getValueCaption(this.facetValue));
            };
            ValueElement.prototype._buildValueCount = function () {
                var count = this.facetValue.getFormattedCount();
                if (Coveo.Utils.isNonEmptyString(count)) {
                    var countElement = Coveo.$('<span/>').addClass('coveo-count').text(count);
                    return countElement;
                }
                else {
                    return Coveo.$([]);
                }
            };
            ValueElement.prototype._handleSelectValue = function (eventBindings) {
                var _this = this;
                this.facet.keepDisplayedValuesNextTime = eventBindings.displayNextTime && !this.facet.options.useAnd;
                var actionCause;
                if (this.facetValue.excluded) {
                    actionCause = Ui.AnalyticsActionCauseList.facetUnexclude;
                    this.facet.unexcludeValue(this.facetValue);
                }
                else {
                    if (this.facetValue.selected) {
                        actionCause = Ui.AnalyticsActionCauseList.facetDeselect;
                    }
                    else {
                        actionCause = Ui.AnalyticsActionCauseList.facetSelect;
                    }
                    this.facet.toggleSelectValue(this.facetValue);
                }
                if (this.isOmnibox) {
                    actionCause = Ui.AnalyticsActionCauseList.omniboxFacet;
                }
                this.facet.triggerNewQuery(function () { return _this.facet.usageAnalytics.logSearchEvent(actionCause, _this.getAnalyticsFacetMeta()); });
            };
            ValueElement.prototype._handleExcludeClick = function (eventBindings) {
                var _this = this;
                this.facet.keepDisplayedValuesNextTime = eventBindings.displayNextTime && !this.facet.options.useAnd;
                this.facet.toggleExcludeValue(this.facetValue);
                var actionCause = this.isOmnibox ? Ui.AnalyticsActionCauseList.omniboxFacet : Ui.AnalyticsActionCauseList.facetExclude;
                this.facet.triggerNewQuery(function () { return _this.facet.usageAnalytics.logSearchEvent(actionCause, _this.getAnalyticsFacetMeta()); });
            };
            ValueElement.prototype._handleEventForExcludedValueElement = function (eventBindings) {
                var _this = this;
                this.label.fastClick(function (event) {
                    if (eventBindings.pinFacet) {
                        _this.facet.pinFacetPosition();
                    }
                    if (eventBindings.omniboxObject) {
                        _this._omniBoxCloseEvent(eventBindings.omniboxObject);
                    }
                    _this._handleSelectValue(eventBindings);
                    event.stopPropagation();
                });
            };
            ValueElement.prototype._handleEventForValueElement = function (eventBindings) {
                var _this = this;
                this.excludeIcon.fastClick(function (event) {
                    if (eventBindings.omniboxObject) {
                        _this._omniBoxCloseEvent(eventBindings.omniboxObject);
                    }
                    _this._handleExcludeClick(eventBindings);
                    event.stopPropagation();
                });
                this.label.fastClick(function (event) {
                    if (eventBindings.pinFacet) {
                        _this.facet.pinFacetPosition();
                    }
                    event.preventDefault();
                    _this.checkbox.change();
                });
            };
            ValueElement.prototype._handleEventForCheckboxChange = function (eventBindings) {
                var _this = this;
                this.checkbox.change(function (event) {
                    if (eventBindings.omniboxObject) {
                        _this._omniBoxCloseEvent(eventBindings.omniboxObject);
                    }
                    _this._handleSelectValue(eventBindings);
                    if (Coveo.DeviceUtils.isMobileDevice()) {
                        Coveo.Defer.defer(function () {
                            Coveo.ModalBox.close(true);
                            _this.facet.facetSearch.completelyDismissSearch();
                        });
                    }
                });
            };
            ValueElement.prototype._omniBoxCloseEvent = function (eventArg) {
                eventArg.closeOmniBox();
                eventArg.clear();
            };
            ValueElement.prototype._setCssClassOnListValueElement = function () {
                this.listElement.toggleClass('coveo-selected', this.facetValue.selected);
                this.listElement.toggleClass('coveo-excluded', this.facetValue.excluded);
            };
            ValueElement.prototype.getAnalyticsFacetMeta = function () {
                return {
                    facetId: this.facet.options.uniqueId,
                    facetValue: this.facetValue.value
                };
            };
            return ValueElement;
        })();
        Ui.ValueElement = ValueElement;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FacetValueElement = (function (_super) {
            __extends(FacetValueElement, _super);
            function FacetValueElement(facet, facetValue, keepDisplayedValueNextTime) {
                var _this = this;
                _super.call(this, facet, facetValue);
                this.facet = facet;
                this.facetValue = facetValue;
                this.keepDisplayedValueNextTime = keepDisplayedValueNextTime;
                this.firstQuery = true;
                //The analytics code expect a first query to be made to link the user action with a query UID
                Coveo.$(facet.root).one(Coveo.Events.QueryEvents.querySuccess, function () {
                    _this.firstQuery = false;
                });
            }
            FacetValueElement.prototype.bindEvent = function () {
                _super.prototype.bindEvent.call(this, { displayNextTime: this.keepDisplayedValueNextTime, pinFacet: this.facet.options.preservePosition });
            };
            return FacetValueElement;
        })(Ui.ValueElement);
        Ui.FacetValueElement = FacetValueElement;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var OmniBoxValueElement = (function (_super) {
            __extends(OmniBoxValueElement, _super);
            function OmniBoxValueElement(facet, facetValue, eventArg) {
                _super.call(this, facet, facetValue);
                this.facet = facet;
                this.facetValue = facetValue;
                this.eventArg = eventArg;
            }
            OmniBoxValueElement.prototype.bindEvent = function () {
                _super.prototype.bindEvent.call(this, { displayNextTime: false, pinFacet: false, omniboxObject: this.eventArg });
            };
            return OmniBoxValueElement;
        })(Ui.ValueElement);
        Ui.OmniBoxValueElement = OmniBoxValueElement;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FacetSearchValuesList = (function () {
            function FacetSearchValuesList(facet, facetValueElementKlass) {
                this.facet = facet;
                this.facetValueElementKlass = facetValueElementKlass;
            }
            FacetSearchValuesList.prototype.build = function (facetValues) {
                var _this = this;
                var valuesToBuildWith = Coveo._.map(facetValues, function (facetValue) {
                    return Coveo._.find(_this.facet.values.getAll(), function (valueAlreadyInFacet) {
                        return valueAlreadyInFacet.value == facetValue.value;
                    }) || facetValue;
                });
                return Coveo._.reduce(Coveo._.map(valuesToBuildWith, function (facetValue) {
                    return new _this.facetValueElementKlass(_this.facet, facetValue, _this.facet.keepDisplayedValuesNextTime).build().listElement;
                }), function (memo, element) {
                    return memo.add(element);
                });
            };
            return FacetSearchValuesList;
        })();
        Ui.FacetSearchValuesList = FacetSearchValuesList;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var BreadcrumbValueElement = (function () {
            function BreadcrumbValueElement(facet, facetValue) {
                this.facet = facet;
                this.facetValue = facetValue;
            }
            BreadcrumbValueElement.prototype.build = function (tooltip) {
                var _this = this;
                if (tooltip === void 0) { tooltip = true; }
                Coveo.Assert.exists(this.facetValue);
                var elem = Coveo.DeviceUtils.isMobileDevice() ? Coveo.$("<div/>") : Coveo.$("<span/>");
                elem.addClass('coveo-value');
                elem.toggleClass('coveo-selected', this.facetValue.selected);
                elem.toggleClass('coveo-excluded', this.facetValue.excluded);
                elem.attr('title', this.getBreadcrumbTooltip());
                Coveo.$('<span/>').addClass('coveo-caption').text(this.facet.getValueCaption(this.facetValue)).appendTo(elem);
                Coveo.$('<span/>').addClass('coveo-clear').appendTo(elem);
                var clicked = false;
                elem.fastClick(function () {
                    if (!clicked) {
                        clicked = true;
                        if (_this.facetValue.excluded) {
                            _this.facet.unexcludeValue(_this.facetValue.value);
                        }
                        else {
                            _this.facet.deselectValue(_this.facetValue.value);
                        }
                        _this.facet.triggerNewQuery(function () { return _this.facet.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.breadcrumbFacet, { facetId: _this.facet.options.uniqueId, facetValue: _this.facetValue.value }); });
                    }
                });
                return elem;
            };
            BreadcrumbValueElement.prototype.getBreadcrumbTooltip = function () {
                var tooltipParts = [this.facet.getValueCaption(this.facetValue), this.facetValue.getFormattedCount(), this.facetValue.getFormattedComputedField(this.facet.options.computedFieldFormat)];
                return Coveo._.compact(tooltipParts).join(' ');
            };
            return BreadcrumbValueElement;
        })();
        Ui.BreadcrumbValueElement = BreadcrumbValueElement;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var BreadcrumbValueList = (function () {
            function BreadcrumbValueList(facet, facetValues, breadcrumbValueElementKlass) {
                this.facet = facet;
                this.facetValues = facetValues;
                this.breadcrumbValueElementKlass = breadcrumbValueElementKlass;
                this.setExpandedAndCollapsed();
                this.elem = Coveo.$('<div/>').addClass('coveo-facet-breadcrumb');
                var title = Coveo.DeviceUtils.isMobileDevice() ? Coveo.$("<div/>") : Coveo.$("<span/>");
                title.addClass('coveo-title').text(this.facet.options.title + (Coveo.DeviceUtils.isMobileDevice() ? '' : ':')).appendTo(this.elem);
                this.valueContainer = Coveo.$('<span/>').addClass('coveo-values').appendTo(this.elem);
            }
            BreadcrumbValueList.prototype.build = function () {
                this.buildExpanded();
                if (this.collapsed.length != 0) {
                    this.buildCollapsed();
                }
                return this.elem;
            };
            BreadcrumbValueList.prototype.buildExpanded = function () {
                var _this = this;
                Coveo._.each(this.expanded, function (value, index, list) {
                    if (index != 0 && !Coveo.DeviceUtils.isMobileDevice()) {
                        Coveo.$('<span/>').addClass('coveo-separator').text(', ').appendTo(_this.valueContainer);
                    }
                    new _this.breadcrumbValueElementKlass(_this.facet, value).build().appendTo(_this.valueContainer);
                });
            };
            BreadcrumbValueList.prototype.buildCollapsed = function () {
                var _this = this;
                var numberOfSelected = Coveo._.filter(this.collapsed, function (value) { return value.selected; }).length;
                var numberOfExcluded = Coveo._.filter(this.collapsed, function (value) { return value.excluded; }).length;
                Coveo.Assert.check(numberOfSelected + numberOfExcluded == this.collapsed.length);
                var elem = Coveo.$('<div/>').addClass('coveo-value');
                if (!Coveo.DeviceUtils.isMobileDevice()) {
                    Coveo.$('<span/>').addClass('coveo-separator').text(', ').appendTo(elem);
                }
                if (numberOfSelected > 0) {
                    Coveo.$('<span/>').addClass('coveo-multi-count').text(Globalize.format(numberOfSelected, 'n0')).appendTo(elem);
                    Coveo.$('<div/>').addClass('coveo-selected').addClass('coveo-multi-icon').appendTo(elem);
                }
                if (numberOfExcluded > 0) {
                    Coveo.$('<span/>').addClass('coveo-multi-count').text(Globalize.format(numberOfExcluded, 'n0')).appendTo(elem);
                    Coveo.$('<div />').addClass('coveo-excluded').addClass('coveo-multi-icon').appendTo(elem);
                }
                var valueElements = Coveo._.map(this.collapsed, function (facetValue) {
                    return new _this.breadcrumbValueElementKlass(_this.facet, facetValue);
                });
                var toolTips = Coveo._.map(valueElements, function (valueElement) {
                    return valueElement.getBreadcrumbTooltip();
                });
                elem.attr('title', toolTips.join('\n'));
                elem.fastClick(function () {
                    var elements = [];
                    Coveo._.forEach(valueElements, function (valueElement) {
                        if (!Coveo.DeviceUtils.isMobileDevice()) {
                            elements.push(Coveo.$('<span/>').addClass('coveo-separator').text(', ')[0]);
                        }
                        elements.push(valueElement.build(false).get(0));
                    });
                    Coveo.$(elements).insertBefore(elem);
                    elem.detach();
                });
                this.valueContainer.append(elem);
            };
            BreadcrumbValueList.prototype.setExpandedAndCollapsed = function () {
                if (this.facetValues.length > this.facet.options.numberOfValuesInBreadcrumb) {
                    this.collapsed = Coveo._.rest(this.facetValues, this.facet.options.numberOfValuesInBreadcrumb - 1);
                    this.expanded = Coveo._.first(this.facetValues, this.facet.options.numberOfValuesInBreadcrumb - 1);
                }
                else {
                    this.collapsed = [];
                    this.expanded = this.facetValues;
                }
            };
            return BreadcrumbValueList;
        })();
        Ui.BreadcrumbValueList = BreadcrumbValueList;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var OmniboxValuesList = (function () {
            function OmniboxValuesList(facet, facetValues, omniboxObject, omniBoxValueElementKlass) {
                this.facet = facet;
                this.facetValues = facetValues;
                this.omniboxObject = omniboxObject;
                this.omniBoxValueElementKlass = omniBoxValueElementKlass;
            }
            OmniboxValuesList.prototype.build = function () {
                var _this = this;
                var rows = [];
                Coveo._.each(this.facetValues, function (facetValue) {
                    rows.push(_this.buildOmniBoxForOneRow(facetValue, _this.omniboxObject));
                });
                return this.buildFinalOmniBoxElement(rows);
            };
            OmniboxValuesList.prototype.buildOmniBoxForOneRow = function (facetValue, omniboxObject) {
                var omniboxValueElement = new this.omniBoxValueElementKlass(this.facet, facetValue, omniboxObject);
                var omniBoxRowContent = omniboxValueElement.build().listElement;
                var regex = omniboxObject.completeQueryExpression.regex;
                var valueToSearch = omniboxObject.completeQueryExpression.word;
                omniBoxRowContent.find(".coveo-caption").html(this.highlightOmniBoxMatch(this.facet.getValueCaption(facetValue), regex, valueToSearch));
                var omniBoxRow = Coveo.$("<div class='coveo-omnibox-selectable coveo-omnibox-facet-value'></div>").append(omniBoxRowContent);
                omniBoxRow.on("keyboardSelect", function () {
                    omniBoxRowContent.find('input[type=checkbox]').change();
                });
                return omniBoxRow;
            };
            OmniboxValuesList.prototype.buildFinalOmniBoxElement = function (rows) {
                var header = this.buildOmniBoxHeader();
                if (Coveo.Utils.isEmptyArray(rows)) {
                    return undefined;
                }
                else {
                    var ret = Coveo.$("<div></div>").append(header, rows);
                    Ui.FacetUtils.addNoStateCssClassToFacetValues(this.facet, ret);
                    return ret;
                }
            };
            OmniboxValuesList.prototype.buildOmniBoxHeader = function () {
                var icon = Coveo.$("<span class='coveo-icon " + this.facet.options.field.substr(1) + "'></span>");
                var title = this.facet.options.title;
                return Coveo.$("<div class='coveo-omnibox-facet-header'></div>").append(icon, title);
            };
            OmniboxValuesList.prototype.highlightOmniBoxMatch = function (orignalStr, regex, valueToSearch) {
                var firstChar = orignalStr.search(regex);
                var lastChar = firstChar + valueToSearch.length;
                return orignalStr.slice(0, firstChar) + "<span class='coveo-highlights'>" + orignalStr.slice(firstChar, lastChar) + "</span>" + orignalStr.slice(lastChar);
            };
            OmniboxValuesList.prototype.omniBoxCloseEvent = function (eventArg) {
                eventArg.closeOmniBox();
                eventArg.clear();
            };
            return OmniboxValuesList;
        })();
        Ui.OmniboxValuesList = OmniboxValuesList;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Events;
    (function (Events) {
        var OmniBoxEvents = (function () {
            function OmniBoxEvents() {
            }
            OmniBoxEvents.populateOmniBox = "populateOmniBox";
            OmniBoxEvents.openOmniBox = "openOmniBox";
            OmniBoxEvents.closeOmniBox = "closeOmniBox";
            return OmniBoxEvents;
        })();
        Events.OmniBoxEvents = OmniBoxEvents;
    })(Events = Coveo.Events || (Coveo.Events = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        ;
        var Facet = (function (_super) {
            __extends(Facet, _super);
            function Facet(element, options, bindings, facetClassId) {
                var _this = this;
                if (facetClassId === void 0) { facetClassId = Facet.ID; }
                _super.call(this, element, facetClassId, bindings);
                this.element = element;
                this.options = options;
                this.keepDisplayedValuesNextTime = false;
                this.values = new Ui.FacetValues();
                this.firstQuery = true;
                this.canFetchMore = true;
                this.showingWaitAnimation = false;
                this.listenToQueryStateChange = true;
                this.options = Ui.ComponentOptions.initComponentOptions(element, Facet, options);
                if (this.options.valueCaption != null) {
                    this.options.availableSorts = Coveo._.filter(this.options.availableSorts, function (sort) { return !/^alpha.*$/.test(sort); });
                }
                // Serves as a way to render facet in the omnibox in the order in which they are instantiated
                this._omniboxZIndex = Facet.omniboxIndex;
                Facet.omniboxIndex--;
                this._checkForComputedFieldAndSort();
                this._checkForValueCaptionType();
                this._checkForAllowedValuesOption();
                this._checkForCustomSort();
                this._initFacetQueryController();
                this._initQueryEvents();
                this._initQueryStateEvents();
                this._initComponentStateEvents();
                this._initOmniBoxEvents();
                this._initBreadCrumbEvents();
                this.numberOfValues = this.options.numberOfValues;
                Coveo.$(window).resize(function () {
                    if (!_this.disabled) {
                        Ui.FacetUtils.clipCaptionsToAvoidOverflowingTheirContainer(_this);
                    }
                });
                this._updateAppearanceDependingOnState();
                Coveo.$(this.root).one(Coveo.Events.QueryEvents.querySuccess, function () {
                    _this.firstQuery = false;
                });
            }
            Facet.prototype.createDom = function () {
                this._initBottomAndTopSpacer();
                this._buildFacetContent();
                this._updateAppearanceDependingOnState();
                //After the facet has been created (and before the first query is applied)
                //Try to load a state from the setting, if it's available
                //Execute only _.once (only the first query, or the first time the user switch to a tab that contains a newly set of active facet)
                if (this.facetSettings && this.options.enableSettingsFacetState) {
                    var loadOnce = Coveo._.once(Coveo.$.proxy(this.facetSettings.loadSavedState, this.facetSettings));
                    this.bind.onRoot(Coveo.Events.QueryEvents.newQuery, loadOnce);
                }
            };
            Facet.prototype.selectValue = function (value) {
                Coveo.Assert.exists(value);
                this.ensureDom();
                this.logger.info('Selecting facet value', this.facetValuesList.select(value));
                this._facetValueHasChanged();
            };
            Facet.prototype.selectMultipleValues = function (values) {
                var _this = this;
                Coveo.Assert.exists(values);
                this.ensureDom();
                Coveo._.each(values, function (value) {
                    _this.logger.info('Selecting facet value', _this.facetValuesList.select(value));
                });
                this._facetValueHasChanged();
            };
            Facet.prototype.deselectValue = function (value) {
                Coveo.Assert.exists(value);
                this.ensureDom();
                this.logger.info('Deselecting facet value', this.facetValuesList.unselect(value));
                this._facetValueHasChanged();
            };
            Facet.prototype.deselectMultipleValues = function (values) {
                var _this = this;
                Coveo.Assert.exists(values);
                this.ensureDom();
                Coveo._.each(values, function (value) {
                    _this.logger.info('Deselecting facet value', _this.facetValuesList.unselect(value));
                });
                this._facetValueHasChanged();
            };
            Facet.prototype.excludeValue = function (value) {
                Coveo.Assert.exists(value);
                this.ensureDom();
                this.logger.info('Excluding facet value', this.facetValuesList.exclude(value));
                this._facetValueHasChanged();
            };
            Facet.prototype.excludeMultipleValues = function (values) {
                var _this = this;
                Coveo.Assert.exists(values);
                this.ensureDom();
                Coveo._.each(values, function (value) {
                    _this.logger.info('Excluding facet value', _this.facetValuesList.exclude(value));
                });
                this._facetValueHasChanged();
            };
            Facet.prototype.unexcludeValue = function (value) {
                Coveo.Assert.exists(value);
                this.ensureDom();
                this.logger.info('Unexcluding facet value', this.facetValuesList.unExclude(value));
                this._facetValueHasChanged();
            };
            Facet.prototype.unexcludeMultipleValues = function (values) {
                var _this = this;
                Coveo.Assert.exists(values);
                this.ensureDom();
                Coveo._.each(values, function (value) {
                    _this.logger.info('Unexcluding facet value', _this.facetValuesList.unExclude(value));
                });
                this._facetValueHasChanged();
            };
            Facet.prototype.toggleSelectValue = function (value) {
                Coveo.Assert.exists(value);
                this.ensureDom();
                this.logger.info('Toggle select facet value', this.facetValuesList.toggleSelect(value));
                this._facetValueHasChanged();
            };
            Facet.prototype.toggleExcludeValue = function (value) {
                Coveo.Assert.exists(value);
                this.ensureDom();
                this.logger.info('Toggle exclude facet value', this.facetValuesList.toggleExclude(value));
                this._facetValueHasChanged();
            };
            Facet.prototype.getDisplayedValues = function () {
                this.ensureDom();
                return Coveo._.first(Coveo._.pluck(this.values.getAll(), "value"), this.numberOfValues);
            };
            Facet.prototype.getSelectedValues = function () {
                this.ensureDom();
                return Coveo._.map(this.values.getSelected(), function (value) { return value.value; });
            };
            Facet.prototype.getExcludedValues = function () {
                this.ensureDom();
                return Coveo._.map(this.values.getExcluded(), function (value) { return value.value; });
            };
            Facet.prototype.reset = function () {
                this.ensureDom();
                this.values.reset();
                this._rebuildValueElements();
                this._updateAppearanceDependingOnState();
                this._updateQueryStateModel();
            };
            Facet.prototype.switchToAnd = function () {
                this.ensureDom();
                this.logger.info('Switching to AND');
                this.options.useAnd = true;
                this._rebuildOperatorToggle();
                this._updateOperatorQueryStateModel();
            };
            Facet.prototype.getEndpoint = function () {
                return this.queryController.getEndpoint();
            };
            Facet.prototype.switchToOr = function () {
                this.ensureDom();
                this.logger.info('Switching to OR');
                this.options.useAnd = false;
                this._rebuildOperatorToggle();
                this._updateOperatorQueryStateModel();
            };
            Facet.prototype.updateSort = function (criteria) {
                var _this = this;
                if (this.options.sortCriteria != criteria) {
                    this.options.sortCriteria = criteria;
                    this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.facetSortValues, {
                        facetId: _this.options.uniqueId,
                        facetSortBy: criteria
                    }); });
                }
            };
            Facet.prototype.collapseFacet = function () {
                this.collapseElement.hide();
                this.excludeElement.show();
                Coveo.$(this.element).addClass('coveo-collapsed');
            };
            Facet.prototype.expandFacet = function () {
                this.excludeElement.hide();
                this.collapseElement.show();
                Coveo.$(this.element).removeClass('coveo-collapsed');
                Ui.FacetUtils.clipCaptionsToAvoidOverflowingTheirContainer(this);
            };
            Facet.prototype.unfadeInactiveValuesInMainList = function () {
                Coveo.$(this.element).removeClass('coveo-fade');
            };
            Facet.prototype.fadeInactiveValuesInMainList = function (delay) {
                Coveo.$(this.element).addClass('coveo-fade');
            };
            Facet.prototype.showWaitingAnimation = function () {
                var _this = this;
                Coveo.Defer.defer(function () {
                    if (!_this.showingWaitAnimation) {
                        _this.headerElement.find('.coveo-icon').first().css('display', 'none');
                        _this.headerElement.find('.coveo-wait-animation').css('display', '');
                        _this.showingWaitAnimation = true;
                    }
                });
            };
            Facet.prototype.hideWaitingAnimation = function () {
                var _this = this;
                Coveo.Defer.defer(function () {
                    if (_this.showingWaitAnimation) {
                        _this.headerElement.find('.coveo-icon').css('display', '');
                        _this.headerElement.find('.coveo-wait-animation').css('display', 'none');
                        _this.showingWaitAnimation = false;
                    }
                });
            };
            Facet.prototype.processFacetSearchAllResultsSelected = function (facetValues) {
                var _this = this;
                var valuesForAnalytics = [];
                Coveo._.each(facetValues, function (facetValue) {
                    _this._ensureFacetValueIsInList(facetValue);
                    valuesForAnalytics.push(facetValue.value);
                });
                this._updateQueryStateModel();
                this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.facetSelectAll, { facetId: _this.options.uniqueId }); });
            };
            Facet.prototype.pinFacetPosition = function () {
                this.pinnedViewportPosition = this.element.getBoundingClientRect().top;
            };
            Facet.prototype.getValueCaption = function (facetValue) {
                Coveo.Assert.exists(facetValue);
                var lookupValue = facetValue.lookupValue || facetValue.value;
                var ret = lookupValue;
                ret = Ui.FacetUtils.tryToGetTranslatedCaption(lookupValue);
                if (Coveo.Utils.exists(this.options.valueCaption)) {
                    if (typeof this.options.valueCaption == "object") {
                        ret = this.options.valueCaption[lookupValue] || ret;
                    }
                    if (typeof this.options.valueCaption == "function") {
                        this.values.get(lookupValue);
                        ret = this.options.valueCaption.call(this, this.facetValuesList.get(lookupValue).facetValue);
                    }
                }
                return ret;
            };
            Facet.prototype.enable = function () {
                _super.prototype.enable.call(this);
            };
            Facet.prototype.disable = function () {
                _super.prototype.disable.call(this);
            };
            Facet.prototype.triggerNewQuery = function (beforeExecuteQuery) {
                var _this = this;
                this.queryController.deferExecuteQuery({ beforeExecuteQuery: beforeExecuteQuery });
                Coveo.Defer.defer(function () { return _this.showWaitingAnimation(); });
            };
            Facet.prototype._checkForComputedFieldAndSort = function () {
                if (this.options.sortCriteria.toLowerCase().indexOf("computedfield") != -1 && Coveo.Utils.isNullOrUndefined(this.options.computedField)) {
                    this.logger.warn("Sort criteria is specified as ComputedField, but the facet uses no computed field. Facet will always be empty !", this);
                }
            };
            Facet.prototype._checkForValueCaptionType = function () {
                if (this.options.valueCaption && typeof this.options.valueCaption == "function") {
                    this.options.enableFacetSearch = false;
                    this.options.includeInOmniBox = false;
                    this.logger.warn("Using a function as valueCaption is now deprecated. Use a json key value pair instead. Facet search and omnibox has been disabled for this facet", this);
                }
            };
            Facet.prototype._checkForAllowedValuesOption = function () {
                if (this.options.allowedValues != undefined) {
                    this.logger.info("Allowed values option set on facet : Disabling more/less", this);
                    this.options.enableMoreLess = false;
                    this.logger.info("Allowed values options set on facet : Number of values set to lenght of allowed values : " + this.options.allowedValues.length, this);
                    this.options.numberOfValues = this.options.allowedValues.length;
                    this.logger.info("Allowed values options set in facet : Disabling facet search", this);
                    this.options.enableFacetSearch = false;
                }
            };
            Facet.prototype._checkForCustomSort = function () {
                if (this.options.customSort != undefined && !Coveo._.contains(this.options.availableSorts, "custom")) {
                    this.options.availableSorts.unshift("custom");
                }
                if (this.options.availableSorts[0] == "custom") {
                    this.options.sortCriteria = "nosort";
                }
            };
            Facet.prototype._initQueryEvents = function () {
                this.bind.onRoot(Coveo.Events.QueryEvents.duringQuery, this._handleDuringQuery);
                this.bind.onRoot(Coveo.Events.QueryEvents.buildingQuery, this._handleBuildingQuery);
                this.bind.onRoot(Coveo.Events.QueryEvents.doneBuildingQuery, this._handleDoneBuildingQuery);
                this.bind.onRoot(Coveo.Events.QueryEvents.deferredQuerySuccess, this._handleDeferredQuerySuccess);
            };
            Facet.prototype._initQueryStateEvents = function () {
                this.includedAttributeId = Coveo.Models.QueryStateModel.getFacetId(this.options.uniqueId);
                this.excludedAttributeId = Coveo.Models.QueryStateModel.getFacetId(this.options.uniqueId, false);
                this.operatorAttributeId = Coveo.Models.QueryStateModel.getFacetOperator(this.options.uniqueId);
                this.lookupValueAttributeId = Coveo.Models.QueryStateModel.getFacetLookupValue(this.options.uniqueId);
                this.queryStateModel.registerNewAttribute(this.includedAttributeId, []);
                this.queryStateModel.registerNewAttribute(this.excludedAttributeId, []);
                this.queryStateModel.registerNewAttribute(this.operatorAttributeId, "");
                this.queryStateModel.registerNewAttribute(this.lookupValueAttributeId, {});
                var changedEventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.change);
                this.bind.onRoot(changedEventName, this._handleQueryStateChanged);
            };
            Facet.prototype._initComponentStateEvents = function () {
                this.componentStateId = Coveo.Models.QueryStateModel.getFacetId(this.options.uniqueId);
                this.componentStateModel.registerComponent(this.componentStateId, this);
            };
            Facet.prototype._initOmniBoxEvents = function () {
                if (this.options.includeInOmniBox) {
                    this.bind.onRoot(Coveo.Events.OmniBoxEvents.populateOmniBox, this._handlePopulateOmnibox);
                }
            };
            Facet.prototype._initBreadCrumbEvents = function () {
                if (this.options.includeInBreadcrumb) {
                    this.bind.onRoot(Coveo.Events.BreadcrumbEvents.populateBreadcrumb, this._handlePopulateBreadcrumb);
                    this.bind.onRoot(Coveo.Events.BreadcrumbEvents.clearBreadcrumb, this._handleClearBreadcrumb);
                }
            };
            Facet.prototype._initBottomAndTopSpacer = function () {
                var _this = this;
                var bottomSpace = Coveo.$(this.options.paddingContainer).children('.coveo-bottomSpace');
                var topSpace = Coveo.$(this.options.paddingContainer).children('.coveo-topSpace');
                if (this.options.preservePosition) {
                    Coveo.$(this.options.paddingContainer).mouseleave(function () { return _this._unpinFacetPosition(); });
                    this.pinnedTopSpace = topSpace;
                    this.pinnedBottomSpace = bottomSpace;
                    if (this.pinnedTopSpace.length == 0) {
                        this.pinnedTopSpace = Coveo.$('<div />').addClass('coveo-topSpace').prependTo(this.options.paddingContainer);
                    }
                    if (this.pinnedBottomSpace.length == 0) {
                        this.pinnedBottomSpace = Coveo.$('<div />').addClass('coveo-bottomSpace').appendTo(this.options.paddingContainer);
                    }
                }
            };
            Facet.prototype._initFacetQueryController = function () {
                this.facetQueryController = new Coveo.Controllers.FacetQueryController(this);
            };
            Facet.prototype._initFacetValuesList = function () {
                this.facetValuesList = new Ui.FacetValuesList(this, Ui.FacetValueElement);
                Coveo.$(this.element).append(this.facetValuesList.build());
            };
            Facet.prototype._initFacetSearch = function () {
                this.facetSearch = new Ui.FacetSearch(this, Ui.FacetSearchValuesList);
                Coveo.$(this.element).append(this.facetSearch.build());
            };
            Facet.prototype._updateIncludedQueryStateModel = function () {
                var selectedValues = {
                    included: this.getSelectedValues(),
                    title: this.includedAttributeId
                };
                this.queryStateModel.set(this.includedAttributeId, selectedValues.included);
            };
            Facet.prototype._facetValueHasChanged = function () {
                var _this = this;
                this._updateQueryStateModel();
                this._rebuildValueElements();
                Coveo.Defer.defer(function () {
                    _this._updateAppearanceDependingOnState();
                });
            };
            Facet.prototype._updateExcludedQueryStateModel = function () {
                var excludedValues = {
                    title: this.excludedAttributeId,
                    excluded: this.getExcludedValues()
                };
                this.queryStateModel.set(this.excludedAttributeId, excludedValues.excluded);
            };
            Facet.prototype._updateOperatorQueryStateModel = function () {
                if (this.options.allowTogglingOperator) {
                    var valueToSet = "";
                    if (this.getSelectedValues().length != 0 || this.getExcludedValues().length != 0) {
                        valueToSet = this.options.useAnd ? "and" : "or";
                    }
                    this.queryStateModel.set(this.operatorAttributeId, valueToSet);
                }
            };
            Facet.prototype._updateLookupValueQueryStateModel = function () {
                if (this.options.lookupField) {
                    var valueToSet = {};
                    Coveo._.each(this.values.getSelected().concat(this.values.getExcluded()), function (value) {
                        valueToSet[value.value] = value.lookupValue;
                    });
                    this.queryStateModel.set(this.lookupValueAttributeId, valueToSet);
                }
            };
            Facet.prototype._handleQueryStateChangedOperator = function (operator) {
                if (operator == "and") {
                    this.switchToAnd();
                }
                else if (operator == "or") {
                    this.switchToOr();
                }
            };
            Facet.prototype._handleQueryStateChangedIncluded = function (includedChanged) {
                var toUnSelect = Coveo._.difference(this.getSelectedValues(), includedChanged);
                if (Coveo.Utils.isNonEmptyArray(toUnSelect)) {
                    this.deselectMultipleValues(toUnSelect);
                }
                if (!Coveo.Utils.arrayEqual(this.getSelectedValues(), includedChanged, false)) {
                    this.selectMultipleValues(includedChanged);
                }
            };
            Facet.prototype._handleQueryStateChangedExcluded = function (excludedChanged) {
                var toUnExclude = Coveo._.difference(this.getExcludedValues(), excludedChanged);
                if (Coveo.Utils.isNonEmptyArray(toUnExclude)) {
                    this.unexcludeMultipleValues(toUnExclude);
                }
                if (!Coveo.Utils.arrayEqual(this.getExcludedValues(), excludedChanged, false)) {
                    this.excludeMultipleValues(excludedChanged);
                }
            };
            Facet.prototype._handleLookupvalueChanged = function (lookupFieldChanged) {
                var _this = this;
                Coveo._.each(lookupFieldChanged, function (lookupvalue, value) {
                    _this.facetValuesList.get(decodeURIComponent(value)).facetValue.lookupValue = decodeURIComponent(lookupvalue);
                });
            };
            Facet.prototype._handleQueryStateChanged = function (e, data) {
                Coveo.Assert.exists(data);
                this.ensureDom();
                var queryStateAttributes = data.attributes;
                var includedChanged = queryStateAttributes[this.includedAttributeId];
                var excludedChanged = queryStateAttributes[this.excludedAttributeId];
                var operator = queryStateAttributes[this.operatorAttributeId];
                var lookupValueChanged = queryStateAttributes[this.lookupValueAttributeId];
                if (this.listenToQueryStateChange) {
                    if (!Coveo.Utils.isNullOrEmptyString(operator)) {
                        this._handleQueryStateChangedOperator(operator);
                    }
                    if (!Coveo.Utils.isNullOrUndefined(includedChanged)) {
                        this._handleQueryStateChangedIncluded(includedChanged);
                    }
                    if (!Coveo.Utils.isNullOrUndefined(excludedChanged)) {
                        this._handleQueryStateChangedExcluded(excludedChanged);
                    }
                    if (!Coveo.Utils.isNullOrUndefined(lookupValueChanged)) {
                        this._handleLookupvalueChanged(lookupValueChanged);
                    }
                }
            };
            Facet.prototype._handlePopulateOmnibox = function (e, data) {
                Coveo.Assert.exists(data);
                Coveo.Assert.exists(data.completeQueryExpression);
                if (this.canFetchMore) {
                    this._handleOmniBoxWithSearchInFacet(data);
                }
                else {
                    this._handleOmniBoxWithStaticValue(data);
                }
            };
            Facet.prototype._handleOmniBoxWithStaticValue = function (eventArg) {
                var _this = this;
                var regex = eventArg.completeQueryExpression.regex;
                var valueToSearch = eventArg.completeQueryExpression.word;
                var match = Coveo._.first(Coveo._.filter(this.getDisplayedValues(), function (displayedValue) {
                    return regex.test(_this.getValueCaption(_this.facetValuesList.get(displayedValue).facetValue));
                }), this.options.numberOfValuesInOmniBox);
                var facetValues = Coveo._.map(match, function (gotAMatch) {
                    return _this.facetValuesList.get(gotAMatch).facetValue;
                });
                var element = new Ui.OmniboxValuesList(this, facetValues, eventArg, Ui.OmniBoxValueElement).build();
                eventArg.rows.push({
                    element: (element ? element.get(0) : undefined),
                    zIndex: this._omniboxZIndex
                });
            };
            Facet.prototype._handleOmniBoxWithSearchInFacet = function (eventArg) {
                var _this = this;
                var regex = eventArg.completeQueryExpression.regex;
                var deferred = Coveo.$.Deferred();
                eventArg.rows.push({ deferred: deferred });
                var deferredRequestForOmnibox = this.facetQueryController.recursiveFacetSearch(eventArg.completeQueryExpression.word, this.options.numberOfValuesInOmniBox);
                deferredRequestForOmnibox.done(function (fieldValues) {
                    var facetValues = Coveo._.map(fieldValues, function (fieldValue) {
                        return _this.values.get(fieldValue.lookupValue) || Ui.FacetValue.create(fieldValue);
                    });
                    var element = new Ui.OmniboxValuesList(_this, facetValues, eventArg, Ui.OmniBoxValueElement).build();
                    deferred.resolve({
                        element: (element ? element.get(0) : undefined),
                        zIndex: _this._omniboxZIndex
                    });
                });
                deferredRequestForOmnibox.fail(function () {
                    deferred.resolve({ element: undefined });
                });
            };
            Facet.prototype._handleDuringQuery = function () {
                this.ensureDom();
                if (!this.keepDisplayedValuesNextTime) {
                    this.fadeInactiveValuesInMainList(this.options.facetSearchDelay);
                }
            };
            Facet.prototype._handleBuildingQuery = function (e, data) {
                Coveo.Assert.exists(data);
                Coveo.Assert.exists(data.queryBuilder);
                this.facetQueryController.prepareForNewQuery();
                if (this.values.hasSelectedOrExcludedValues()) {
                    var expression = this.facetQueryController.computeOurFilterExpression();
                    this.logger.trace('Putting filter in query', expression);
                    data.queryBuilder.advancedExpression.add(expression);
                }
            };
            Facet.prototype._handleDoneBuildingQuery = function (e, data) {
                Coveo.Assert.exists(data);
                Coveo.Assert.exists(data.queryBuilder);
                var queryBuilder = data.queryBuilder;
                this.facetQueryController.putGroupByIntoQueryBuilder(queryBuilder);
            };
            Facet.prototype._handleDeferredQuerySuccess = function (e, data) {
                Coveo.Assert.exists(data);
                this.unfadeInactiveValuesInMainList();
                this.hideWaitingAnimation();
                var groupByResult = data.results.groupByResults[this.facetQueryController.lastGroupByRequestIndex];
                if (!groupByResult) {
                    this.keepDisplayedValuesNextTime = false;
                }
                this._processNewGroupByResults(groupByResult);
            };
            Facet.prototype._handlePopulateBreadcrumb = function (e, args) {
                Coveo.Assert.exists(args);
                if (this.values.hasSelectedOrExcludedValues()) {
                    var element = new Ui.BreadcrumbValueList(this, this.values.getSelected().concat(this.values.getExcluded()), Ui.BreadcrumbValueElement).build();
                    args.breadcrumbs.push({
                        element: element.get(0)
                    });
                }
            };
            Facet.prototype._handleClearBreadcrumb = function (e, args) {
                Coveo.Assert.exists(args);
                this.reset();
            };
            Facet.prototype._processNewGroupByResults = function (groupByResult) {
                this.logger.trace('Displaying group by results', groupByResult);
                if (groupByResult != undefined && groupByResult.values != undefined) {
                    this.nbAvailableValues = groupByResult.values.length;
                    this.canFetchMore = this.numberOfValues < this.nbAvailableValues;
                }
                var newFacetValues = new Ui.FacetValues(groupByResult);
                this._updateValues(newFacetValues);
                if (this.numberOfValues > this.nbAvailableValues) {
                    this.numberOfValues = this.nbAvailableValues;
                }
                if (this.values.hasSelectedOrExcludedValues() && !this.options.useAnd && this.options.isMultiValueField) {
                    this._triggerUpdateDeltaQuery(Coveo._.filter(this.values.getAll(), function (facetValue) {
                        return !facetValue.selected && !facetValue.excluded;
                    }));
                }
                else if (this.values.getSelected().length > 0 && !this.options.useAnd) {
                    this.values.updateDeltaWithFilteredFacetValues(new Ui.FacetValues());
                }
                if (!this.values.hasSelectedOrExcludedValues() || this.options.useAnd || !this.options.isMultiValueField) {
                    this._rebuildValueElements();
                    this._updateAppearanceDependingOnState();
                    this._ensurePinnedFacetHasntMoved();
                }
                this.keepDisplayedValuesNextTime = false;
            };
            Facet.prototype._updateValues = function (facetValues) {
                Coveo.Assert.exists(facetValues);
                if (this.keepDisplayedValuesNextTime) {
                    this.values.updateCountsFromNewValues(facetValues);
                }
                else {
                    facetValues.importActiveValuesFromOtherList(this.values);
                    facetValues.sortValuesDependingOnStatus(this.numberOfValues);
                    this.values = facetValues;
                }
            };
            Facet.prototype._ensureFacetValueIsInList = function (facetValue) {
                Coveo.Assert.exists(facetValue);
                if (!this.values.contains(facetValue.value)) {
                    this.values.add(facetValue);
                }
            };
            Facet.prototype._isAnyValueCurrentlyDisplayed = function () {
                return !this.values.isEmpty();
            };
            Facet.prototype._handleOperatorClick = function () {
                var _this = this;
                if (this.options.useAnd) {
                    this.switchToOr();
                }
                else {
                    this.switchToAnd();
                }
                if (this.getSelectedValues().length != 0) {
                    var operatorNow = this.options.useAnd ? "AND" : "OR";
                    var operatorBefore = this.options.useAnd ? "OR" : "AND";
                    this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.facetToggle, {
                        facetId: _this.options.uniqueId,
                        facetOperatorBefore: operatorBefore,
                        facetOperatorAfter: operatorNow
                    }); });
                }
            };
            Facet.prototype._handleEraserClick = function () {
                var _this = this;
                this.reset();
                this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.facetClearAll, { facetId: _this.options.uniqueId }); });
            };
            Facet.prototype._updateQueryStateModel = function () {
                this.listenToQueryStateChange = false;
                this._updateExcludedQueryStateModel();
                this._updateIncludedQueryStateModel();
                this._updateOperatorQueryStateModel();
                this._updateLookupValueQueryStateModel();
                this.listenToQueryStateChange = true;
            };
            Facet.prototype._buildFacetContent = function () {
                this.headerElement = this._buildHeader().appendTo(this.element);
                this._initFacetValuesList();
                if (this.options.enableFacetSearch) {
                    this._initFacetSearch();
                }
                if (this.options.enableMoreLess) {
                    this.footerElement = this._buildFooter().appendTo(this.element);
                    this._moreElement = this._buildMore().appendTo(this.footerElement);
                    this._lessElement = this._buildLess().appendTo(this.footerElement);
                }
            };
            Facet.prototype._buildHeader = function () {
                var header = Coveo.$('<div class="coveo-header"/>');
                this._buildIcon().appendTo(header);
                this._buildWaitAnimation().appendTo(header);
                if (this.options.enableSettings) {
                    this._buildSettingsButtons().appendTo(header);
                }
                if (this.options.enableCollapse) {
                    this.collapseElement = this._buildCollapse().appendTo(header);
                    this.excludeElement = this._buildExpand().appendTo(header);
                }
                this.operatorElement = this._buildOperatorToggle().appendTo(header);
                this.operatorElement.fastToggle(this.options.allowTogglingOperator);
                this._eraserElement = this._buildEraser().appendTo(header);
                this._buildTitle().appendTo(header);
                return header;
            };
            Facet.prototype._buildIcon = function () {
                var cssClassForIcon;
                if (this.options.headerIcon) {
                    cssClassForIcon = 'coveo-icon-custom ' + this.options.headerIcon;
                }
                else {
                    cssClassForIcon = 'coveo-icon ' + this.options.field.substr(1);
                }
                return Coveo.$('<div></div>').addClass(cssClassForIcon);
            };
            Facet.prototype._buildWaitAnimation = function () {
                return Coveo.$("<div />").addClass('coveo-wait-animation').css('display', 'none');
            };
            Facet.prototype._buildCollapse = function () {
                var _this = this;
                var icon = Coveo.$("<span></span>").addClass('coveo-icon');
                return Coveo.$('<div />').attr('title', Ui.l("Collapse")).addClass('coveo-collapse').append(icon).fastClick(function () {
                    _this.collapseFacet();
                });
            };
            Facet.prototype._buildExpand = function () {
                var _this = this;
                var icon = Coveo.$("<span></span>").addClass('coveo-icon');
                return Coveo.$('<div />').attr('title', Ui.l("Expand")).hide().addClass('coveo-expand').append(icon).fastClick(function () {
                    _this.expandFacet();
                });
            };
            Facet.prototype._buildTitle = function () {
                return Coveo.$('<div class="coveo-title"/>').text(this.options.title);
            };
            Facet.prototype._buildOperatorToggle = function () {
                var _this = this;
                var icon = Coveo.$("<span></span>").addClass('coveo-icon');
                icon.addClass('coveo-' + (this.options.useAnd ? 'and' : 'or'));
                return Coveo.$('<div />').attr('title', Ui.l("SwitchTo", this.options.useAnd ? Ui.l("Or") : Ui.l("And"))).addClass('coveo-operator').append(icon).fastClick(function () {
                    _this._handleOperatorClick();
                });
            };
            Facet.prototype._buildSettingsButtons = function () {
                this.facetSettings = new Ui.FacetSettings(this.options.availableSorts, this);
                return this.facetSettings.build();
            };
            Facet.prototype._rebuildOperatorToggle = function () {
                var newElement = this._buildOperatorToggle();
                if (this.operatorElement) {
                    this.operatorElement.replaceWith(newElement);
                }
                this.operatorElement = newElement;
            };
            Facet.prototype._buildEraser = function () {
                var _this = this;
                var icon = Coveo.$("<span></span>").addClass('coveo-icon');
                return Coveo.$('<div />').attr('title', Ui.l("Clear", this.options.title)).append(icon).addClass('coveo-eraser').fastClick(function () {
                    _this._handleEraserClick();
                });
            };
            Facet.prototype._updateNumberOfValues = function () {
                this.numberOfValues = Math.max(this.numberOfValues, this.values.getExcluded().length + this.values.getSelected().length);
                this.numberOfValues = Math.min(this.numberOfValues, this.values.size());
                this.numberOfValues = Math.max(this.numberOfValues, this.options.numberOfValues);
            };
            Facet.prototype._rebuildValueElements = function () {
                this._updateNumberOfValues();
                this.facetValuesList.rebuild(this.numberOfValues);
                if (this.options.enableMoreLess) {
                    this._updateMoreLess();
                }
            };
            Facet.prototype._updateMoreLess = function () {
                var lessElementIsShown = false;
                if (this.values.getExcluded().length + this.values.getSelected().length < this.numberOfValues && this.options.numberOfValues < this.numberOfValues) {
                    this._lessElement.show();
                    lessElementIsShown = true;
                }
                else {
                    this._lessElement.hide();
                }
                var moreValuesAvailable = this.nbAvailableValues > this.numberOfValues;
                this._moreElement.toggleClass('coveo-active', moreValuesAvailable);
                if (lessElementIsShown || moreValuesAvailable) {
                    this.footerElement.removeClass('coveo-empty');
                }
                else {
                    this.footerElement.addClass('coveo-empty');
                }
            };
            Facet.prototype._buildFooter = function () {
                return Coveo.$('<div class="coveo-footer"/>');
            };
            Facet.prototype._buildMore = function () {
                return Coveo.$('<a class="coveo-more">' + Ui.l("More") + '</a>').fastClick(Coveo.$.proxy(this._handleClickMore, this));
            };
            Facet.prototype._handleClickMore = function () {
                var additionnalValue = this.numberOfValues - this.options.numberOfValues;
                var nbMorePage = Math.floor(additionnalValue / this.options.pageSize) + 1;
                this.numberOfValues = this.options.numberOfValues + nbMorePage * this.options.pageSize;
                if (this.values.size() >= this.numberOfValues || !this.canFetchMore) {
                    this._rebuildValueElements();
                }
                else {
                    this._triggerMoreQuery();
                }
            };
            Facet.prototype._triggerMoreQuery = function () {
                var _this = this;
                this.logger.info('Triggering new facet more query');
                this.showWaitingAnimation();
                this.facetQueryController.fetchMore().done(function (queryResults) {
                    var facetValues = new Ui.FacetValues(queryResults.groupByResults[0]);
                    if (queryResults.groupByResults.length > 1) {
                        Coveo._.each(queryResults.groupByResults, function (groupByResult, index) {
                            if (index > 0) {
                                Coveo._.each(groupByResult.values, function (groupByValue) {
                                    if (!facetValues.contains(groupByValue.value)) {
                                        facetValues.add(Ui.FacetValue.createFromGroupByValue(groupByValue));
                                    }
                                });
                            }
                        });
                    }
                    facetValues.importActiveValuesFromOtherList(_this.values);
                    facetValues.sortValuesDependingOnStatus(_this.numberOfValues);
                    _this.values = facetValues;
                    _this.nbAvailableValues = _this.values.size();
                    _this.canFetchMore = _this.numberOfValues < _this.nbAvailableValues;
                    if (_this.values.hasSelectedOrExcludedValues() && !_this.options.useAnd && _this.options.isMultiValueField) {
                        _this._triggerUpdateDeltaQuery(Coveo._.filter(_this.values.getAll(), function (facetValue) { return !facetValue.selected && !facetValue.excluded; }));
                    }
                    else {
                        if (_this.values.hasSelectedOrExcludedValues() && !_this.options.useAnd) {
                            _this.values.updateDeltaWithFilteredFacetValues(new Ui.FacetValues());
                            _this.hideWaitingAnimation();
                        }
                        else {
                            _this.hideWaitingAnimation();
                        }
                        _this._rebuildValueElements();
                    }
                }).fail(function () { return _this.hideWaitingAnimation(); });
            };
            Facet.prototype._triggerUpdateDeltaQuery = function (facetValues) {
                var _this = this;
                this.showWaitingAnimation();
                this.facetQueryController.searchInFacetToUpdateDelta(facetValues).done(function (queryResults) {
                    var values = new Ui.FacetValues();
                    Coveo._.each(queryResults.groupByResults, function (groupByResult) {
                        Coveo._.each(groupByResult.values, function (groupByValue) {
                            if (!values.contains(groupByValue.value)) {
                                values.add(Ui.FacetValue.createFromGroupByValue(groupByValue));
                            }
                        });
                    });
                    _this.values.updateDeltaWithFilteredFacetValues(values);
                    _this._rebuildValueElements();
                    _this.hideWaitingAnimation();
                });
            };
            Facet.prototype._buildLess = function () {
                return Coveo.$('<a class="coveo-less">' + Ui.l("Less") + '</a>').hide().fastClick(Coveo.$.proxy(this._handleClickLess, this));
            };
            Facet.prototype._handleClickLess = function () {
                this._lessElement.hide();
                this.numberOfValues = Math.max(this.options.numberOfValues, this.values.getExcluded().length + this.values.getSelected().length);
                this._moreElement.addClass('coveo-active');
                this.values.sortValuesDependingOnStatus(this.numberOfValues);
                this._rebuildValueElements();
            };
            Facet.prototype._unpinFacetPosition = function () {
                var _this = this;
                if (this._isFacetPinned()) {
                    this.pinnedTopSpace.animate({ height: 0 }, 'fast', function () {
                        if (_this.facetSearch != undefined) {
                            _this.facetSearch.positionSearchResults();
                        }
                    });
                    this.pinnedBottomSpace.animate({ height: 0 }, 'fast', function () {
                        if (_this.facetSearch != undefined) {
                            _this.facetSearch.positionSearchResults();
                        }
                    });
                    this.pinnedViewportPosition = undefined;
                }
            };
            Facet.prototype._isFacetPinned = function () {
                return Coveo.Utils.exists(this.pinnedViewportPosition);
            };
            Facet.prototype._ensurePinnedFacetHasntMoved = function () {
                var _this = this;
                if (this._isFacetPinned()) {
                    Coveo.Assert.exists(this.pinnedViewportPosition);
                    this.pinnedTopSpace.height(0);
                    this.pinnedBottomSpace.height(0);
                    // Under firefox scrolling the body doesn't work, but window does
                    // on all browser, so we substitute those here when needed.
                    var elementToScroll = this.options.scrollContainer == document.body ? window : this.options.scrollContainer;
                    // First try to adjust position by scrolling the page
                    var currentViewportPosition = this.element.getBoundingClientRect().top;
                    var offset = currentViewportPosition - this.pinnedViewportPosition;
                    Coveo.$(elementToScroll).scrollTop(Coveo.$(elementToScroll).scrollTop() + offset);
                    // Then, if not enough, use padding on the scroll container
                    currentViewportPosition = this.element.getBoundingClientRect().top;
                    offset = currentViewportPosition - this.pinnedViewportPosition;
                    if (offset < 0) {
                        this.pinnedTopSpace.height(offset * -1);
                    }
                    else {
                        setTimeout(function () {
                            var currentViewportPosition = _this.element.getBoundingClientRect().top;
                            var offset = currentViewportPosition - _this.pinnedViewportPosition;
                            Coveo.$(elementToScroll).scrollTop(Coveo.$(elementToScroll).scrollTop() + offset);
                            // OK, this is somewhat lazy, but computing right away the amount of
                            // additional padding to add requires many information, and who knows
                            // if it's going to work in all layouts. So just keep on adding spacing
                            // until we realize it's enough (or it's not working).
                            var heightBottom = 0;
                            var attempts = 0;
                            while (offset > 0 && attempts++ < 100) {
                                heightBottom += 100;
                                _this.pinnedBottomSpace.height(heightBottom);
                                currentViewportPosition = _this.element.getBoundingClientRect().top;
                                offset = currentViewportPosition - _this.pinnedViewportPosition;
                                Coveo.$(elementToScroll).scrollTop(Coveo.$(elementToScroll).scrollTop() + offset);
                            }
                        }, 0);
                    }
                }
            };
            Facet.prototype._updateAppearanceDependingOnState = function () {
                Coveo.$(this.element).toggleClass('coveo-active', this.values.hasSelectedOrExcludedValues());
                Coveo.$(this.element).toggleClass('coveo-empty', !this._isAnyValueCurrentlyDisplayed());
                Coveo.$(this._eraserElement).fastToggle(this.values.hasSelectedOrExcludedValues());
            };
            Facet.ID = 'Facet';
            Facet.omniboxIndex = 50;
            Facet.options = {
                title: Ui.ComponentOptions.buildLocalizedStringOption({ defaultValue: 'No Title' }),
                field: Ui.ComponentOptions.buildFieldOption({ required: true, groupByField: true }),
                headerIcon: Ui.ComponentOptions.buildIconOption(),
                uniqueId: Ui.ComponentOptions.buildStringOption({
                    attrName: 'data-id',
                    postProcessing: function (value, options) { return value || options.field; }
                }),
                isMultiValueField: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                lookupField: Ui.ComponentOptions.buildFieldOption(),
                enableSettings: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                enableSettingsFacetState: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                availableSorts: Ui.ComponentOptions.buildListOption({
                    defaultValue: ['occurrences', 'score', 'alphaAscending', 'alphaDescending'],
                    values: ['Occurrences', 'Score', 'AlphaAscending', 'AlphaDescending', 'ComputedFieldAscending', 'ComputedFieldDescending', 'ChiSquare', 'NoSort']
                }),
                sortCriteria: Ui.ComponentOptions.buildStringOption({ postProcessing: function (value, options) { return value || (options.availableSorts.length > 0 ? options.availableSorts[0] : 'occurrences'); } }),
                customSort: Ui.ComponentOptions.buildListOption(),
                numberOfValues: Ui.ComponentOptions.buildNumberOption({ defaultValue: 5 }),
                injectionDepth: Ui.ComponentOptions.buildNumberOption({ defaultValue: 1000 }),
                showIcon: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                useAnd: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                allowTogglingOperator: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                enableFacetSearch: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                facetSearchDelay: Ui.ComponentOptions.buildNumberOption({ defaultValue: 100 }),
                facetSearchIgnoreAccents: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                numberOfValuesInFacetSearch: Ui.ComponentOptions.buildNumberOption({ defaultValue: 15 }),
                includeInBreadcrumb: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                numberOfValuesInBreadcrumb: Ui.ComponentOptions.buildNumberOption({ defaultFunction: function () { return Coveo.DeviceUtils.isMobileDevice() ? 3 : 5; } }),
                includeInOmniBox: Ui.ComponentOptions.buildBooleanOption({
                    defaultValue: false,
                    attrName: 'data-include-in-omnibox'
                }),
                numberOfValuesInOmniBox: Ui.ComponentOptions.buildNumberOption({
                    defaultFunction: function () { return Coveo.DeviceUtils.isMobileDevice() ? 3 : 5; },
                    attrName: 'data-number-of-values-in-omnibox'
                }),
                computedField: Ui.ComponentOptions.buildFieldOption(),
                computedFieldOperation: Ui.ComponentOptions.buildStringOption({ defaultValue: 'sum' }),
                computedFieldFormat: Ui.ComponentOptions.buildStringOption({ defaultValue: 'c0' }),
                computedFieldCaption: Ui.ComponentOptions.buildLocalizedStringOption({ defaultValue: Ui.l("ComputedField") }),
                preservePosition: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                paddingContainer: Ui.ComponentOptions.buildSelectorOption({ defaultFunction: function (element) { return element.parentElement; } }),
                scrollContainer: Ui.ComponentOptions.buildSelectorOption({ defaultFunction: function (element) { return document.body; } }),
                enableMoreLess: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                pageSize: Ui.ComponentOptions.buildNumberOption({ defaultValue: 10 }),
                enableCollapse: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                allowedValues: Ui.ComponentOptions.buildListOption(),
                additionalFilter: Ui.ComponentOptions.buildStringOption()
            };
            return Facet;
        })(Coveo.Ui.Component);
        Ui.Facet = Facet;
        Ui.CoveoJQuery.registerAutoCreateComponent(Facet);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Slider = (function () {
            function Slider(element, options) {
                this.element = element;
                this.options = options;
                this.steps = [];
                if (this.options.dateField) {
                    this.options.start = new Date(this.options.start).getTime();
                    this.options.end = new Date(this.options.end).getTime();
                }
                if (this.options.rounded == undefined) {
                    this.options.rounded = 0;
                }
                if (this.options.steps || this.options.getSteps) {
                    this.buildSteps();
                }
                if (this.options.graph) {
                    this.sliderGraph = new SliderGraph(this);
                }
                this.sliderLine = new SliderLine(this);
                this.sliderLine.build().appendTo(this.element);
                if (this.options.rangeSlider) {
                    this.sliderRange = new SliderRange(this);
                    this.sliderRange.build().appendTo(this.element);
                }
                else {
                    this.sliderButton = new SliderButton(this, 1);
                    this.sliderButton.build().addClass("coveo-no-range-button").appendTo(this.element);
                    this.sliderLine.setActiveWidth(this.sliderButton);
                }
                this.sliderCaption = new SliderCaption(this);
                this.sliderCaption.build().appendTo(this.element);
            }
            Slider.prototype.onMoving = function () {
                if (this.options.rangeSlider) {
                    this.sliderRange.setBoundary();
                    this.sliderLine.setActiveWidth(this.sliderRange.firstButton, this.sliderRange.secondButton);
                }
                else {
                    this.sliderLine.setActiveWidth(this.sliderButton);
                }
                if (this.options.graph) {
                    this.sliderGraph.draw();
                }
                this.displayCaption();
            };
            Slider.prototype.initializeState = function (values) {
                if (values === void 0) { values = [this.options.start, this.options.end]; }
                this.currentValues = values;
                if (this.options.rangeSlider) {
                    this.sliderRange.initializeSliderRangeState(values);
                    this.sliderLine.setActiveWidth(this.sliderRange.firstButton, this.sliderRange.secondButton);
                }
                else {
                    if (values == undefined) {
                        this.sliderButton.toEnd();
                    }
                    else {
                        this.sliderButton.setValue(values[1]);
                    }
                    this.sliderButton.leftBoundary = 0;
                    this.sliderButton.rightBoundary = this.element.width();
                    this.sliderLine.setActiveWidth(this.sliderButton);
                }
                this.displayCaption();
            };
            Slider.prototype.getPosition = function () {
                if (this.options.rangeSlider) {
                    return this.sliderRange.getPosition();
                }
                else {
                    return [0, this.sliderButton.getPosition()];
                }
            };
            Slider.prototype.getPercentPosition = function () {
                if (this.options.rangeSlider) {
                    return this.sliderRange.getPercentPosition();
                }
                else {
                    return [0, this.sliderButton.getPercent()];
                }
            };
            Slider.prototype.getValues = function () {
                if (this.currentValues != undefined) {
                    return this.currentValues;
                }
                else {
                    if (this.options.rangeSlider) {
                        return this.sliderRange.getValue();
                    }
                    else {
                        return [this.options.start, this.sliderButton.getValue()];
                    }
                }
            };
            Slider.prototype.getCaptionFromValue = function (values) {
                return this.sliderCaption.getCaptionFromValues(values);
            };
            Slider.prototype.getCaption = function () {
                return this.sliderCaption.getCaption();
            };
            Slider.prototype.setValues = function (values) {
                if (values != undefined) {
                    values[0] = Math.max(values[0], this.options.start);
                    values[1] = Math.min(values[1], this.options.end);
                }
                this.currentValues = values;
                if (this.options.rangeSlider) {
                    this.sliderRange.setValue(values);
                    this.sliderLine.setActiveWidth(this.sliderRange.firstButton, this.sliderRange.secondButton);
                }
                else {
                    this.sliderButton.setValue(values[1]);
                    this.sliderLine.setActiveWidth(this.sliderButton);
                }
                this.displayCaption();
            };
            Slider.prototype.drawGraph = function (data) {
                this.sliderGraph.draw(data);
            };
            Slider.prototype.displayCaption = function () {
                if (this.options.valueCaption != undefined) {
                    this.sliderCaption.setFromString(this.options.valueCaption(this.getValues()));
                }
                else if (this.options.percentCaption != undefined) {
                    this.sliderCaption.setFromString(this.options.percentCaption(this.getPercentPosition()));
                }
                else if (this.options.displayAsPercent != undefined && this.options.displayAsPercent.separator != undefined) {
                    this.sliderCaption.setAsPercent();
                }
                else {
                    this.sliderCaption.setAsValue();
                }
            };
            Slider.prototype.buildSteps = function () {
                if (this.options.getSteps) {
                    this.steps = this.options.getSteps(this.options.start, this.options.end);
                }
                else {
                    var oneStep = (this.options.end - this.options.start) / this.options.steps;
                    var currentStep = this.options.start;
                    while (currentStep <= this.options.end) {
                        this.steps.push(currentStep);
                        currentStep += oneStep;
                    }
                }
            };
            return Slider;
        })();
        Ui.Slider = Slider;
        var SliderLine = (function () {
            function SliderLine(slider) {
                this.slider = slider;
            }
            SliderLine.prototype.build = function () {
                this.backGround = Coveo.$("<div class='coveo-slider-line coveo-background'></div>");
                this.activePart = Coveo.$("<div class='coveo-slider-line coveo-active'></div>");
                return this.backGround.add(this.activePart);
            };
            SliderLine.prototype.setActiveWidth = function (buttonOne, buttonTwo) {
                if (this.slider.options.rangeSlider) {
                    var width = (buttonTwo.getPercent() - buttonOne.getPercent()) * 100;
                    this.activePart.css({
                        "width": width + "%",
                        "left": buttonOne.getPercent() * 100 + "%",
                        "right": buttonTwo.getPercent() * 100 + "%"
                    });
                }
                else {
                    var width = buttonOne.getPercent() * 100;
                    this.activePart.css({
                        "width": width + "%"
                    });
                }
            };
            return SliderLine;
        })();
        var SliderButton = (function () {
            function SliderButton(slider, which) {
                this.slider = slider;
                this.which = which;
                this.eventMouseDown = Coveo.DeviceUtils.isMobileDevice() ? "touchstart" : "mousedown";
                this.eventMouseMove = Coveo.DeviceUtils.isMobileDevice() ? "touchmove" : "mousemove";
                this.eventMouseUp = Coveo.DeviceUtils.isMobileDevice() ? "touchend" : "mouseup";
            }
            SliderButton.prototype.build = function () {
                this.element = Coveo.$("<div class='coveo-slider-button'></div>");
                this.bindEvents();
                this.element.get(0)["CoveoSliderButton"] = this;
                return this.element;
            };
            SliderButton.prototype.toBeginning = function () {
                this.element.css({
                    left: "0%"
                });
            };
            SliderButton.prototype.toEnd = function () {
                var width = this.slider.element.width();
                this.element.css({
                    left: "100%"
                });
            };
            SliderButton.prototype.setValue = function (value) {
                var percent = this.fromValueToPercent(value);
                this.element.css("left", Math.round(percent * 100) + "%");
            };
            SliderButton.prototype.getPosition = function () {
                var left = this.element.css("left");
                if (left.indexOf("%") != -1) {
                    return (parseFloat(left) / 100) * this.slider.element.width();
                }
                else {
                    return parseFloat(left);
                }
            };
            SliderButton.prototype.getPercent = function (position) {
                if (position === void 0) { position = this.getPosition(); }
                if (this.slider.element.width() == 0) {
                    return 0;
                }
                return +(position / this.slider.element.width()).toFixed(2);
            };
            SliderButton.prototype.getValue = function () {
                var value = this.getPercent() * (this.slider.options.end - this.slider.options.start) + this.slider.options.start;
                return value;
            };
            SliderButton.prototype.fromValueToPercent = function (value) {
                return 1 - ((this.slider.options.end - value) / (this.slider.options.end - this.slider.options.start));
            };
            SliderButton.prototype.fromPositionToValue = function (position) {
                var percent = this.getPercent(position);
                return this.slider.options.start + (percent * (this.slider.options.end - this.slider.options.start));
            };
            SliderButton.prototype.fromValueToPosition = function (value) {
                var percent = this.fromValueToPercent(value);
                return this.slider.element.width() * percent;
            };
            SliderButton.prototype.bindEvents = function () {
                var _this = this;
                Coveo.$(this.element).on(this.eventMouseDown, function (e) {
                    _this.handleStartSlide(e);
                });
                var doc = this.slider.options.document || document;
                Coveo.$(doc).on(this.eventMouseMove, function (e) {
                    if (_this.eventMouseMove == "touchmove" && _this.isMouseDown) {
                        e.preventDefault();
                    }
                    _this.handleMoving(e);
                });
                Coveo.$(doc).on(this.eventMouseUp, function (e) {
                    _this.handleEndSlide(e);
                });
            };
            SliderButton.prototype.handleStartSlide = function (e) {
                var position = this.getMousePosition(e);
                this.isMouseDown = true;
                this.startPositionX = position.x;
                this.lastElementLeft = this.element.css("left");
                this.origUserSelect = Coveo.$("body").css("user-select");
                this.origCursor = Coveo.$("body").css("cursor");
                Coveo.$("body").css("user-select", "none");
                Coveo.$("body").css("cursor", "pointer");
                Coveo.$(this.element).addClass("coveo-active");
                Coveo.$(this.element).trigger(Coveo.Events.SliderEvents.startSlide, {
                    button: this,
                    slider: this.slider
                });
            };
            SliderButton.prototype.handleMoving = function (e) {
                if (this.isMouseDown) {
                    this.updatePosition(e);
                    this.slider.onMoving();
                    this.handleButtonNearEnd();
                    this.element.trigger(Coveo.Events.SliderEvents.duringSlide, {
                        button: this,
                        slider: this.slider
                    });
                }
            };
            SliderButton.prototype.handleEndSlide = function (e) {
                if (this.isMouseDown) {
                    Coveo.$("body").css("user-select", this.origUserSelect);
                    Coveo.$("body").css("cursor", this.origCursor);
                    Coveo.$(this.element).removeClass("coveo-active");
                    this.element.trigger(Coveo.Events.SliderEvents.endSlide, {
                        button: this,
                        slider: this.slider
                    });
                }
                this.isMouseDown = false;
            };
            SliderButton.prototype.handleButtonNearEnd = function () {
                if (this.which == 0) {
                    if (this.origZIndex == undefined) {
                        this.origZIndex = this.element.css("z-index");
                    }
                    if (this.currentPos > 90) {
                        this.element.css("z-index", this.origZIndex + 1);
                    }
                    else {
                        this.element.css("z-index", this.origZIndex);
                    }
                }
            };
            SliderButton.prototype.getMousePosition = function (e) {
                var posx = 0;
                var posy = 0;
                if (this.eventMouseMove == "touchmove") {
                    posx = e["originalEvent"]["touches"][0].pageX;
                    posy = e["originalEvent"]["touches"][0].pageY;
                }
                else if (e.pageX || e.pageY) {
                    posx = e.pageX;
                    posy = e.pageY;
                }
                else if (e.clientX || e.clientY) {
                    posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
                    posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
                }
                return { x: posx, y: posy };
            };
            SliderButton.prototype.updatePosition = function (e) {
                var pos = this.getMousePosition(e);
                var spanX = pos.x - this.startPositionX;
                this.currentPos = parseInt(this.lastElementLeft, 10) + spanX;
                if (this.slider.options.steps || this.slider.options.getSteps) {
                    var snapResult = this.snapToStep(spanX);
                    this.currentPos = snapResult.position;
                    var currentValue = snapResult.value;
                }
                this.currentPos = Math.max(this.leftBoundary, this.currentPos);
                this.currentPos = Math.min(this.rightBoundary, this.currentPos);
                this.currentPos = this.getPercent(this.currentPos) * 100;
                this.currentPos = Math.min(this.currentPos, 100);
                this.currentPos = Math.max(this.currentPos, 0);
                this.element.css("left", Math.round(this.currentPos) + "%");
                if (this.slider.options.steps || this.slider.options.getSteps) {
                    this.slider.currentValues[this.which] = currentValue;
                }
                else {
                    this.slider.currentValues[this.which] = this.getValue();
                }
            };
            SliderButton.prototype.snapToStep = function (spanX) {
                var _this = this;
                var diffs = Coveo._.map(this.slider.steps, function (step, i) {
                    return Math.abs(_this.currentPos - _this.fromValueToPosition(_this.slider.steps[i]));
                });
                var diffsNext = Coveo._.map(this.slider.steps, function (step, i) {
                    return Math.abs(_this.rightBoundary - _this.fromValueToPosition(_this.slider.steps[i]));
                });
                var diffsPrev = Coveo._.map(this.slider.steps, function (step, i) {
                    return Math.abs(_this.leftBoundary - _this.fromValueToPosition(_this.slider.steps[i]));
                });
                var nearest = Coveo._.min(diffs);
                var nearestNext = Coveo._.min(diffsNext);
                var nearestPrevious = Coveo._.min(diffsPrev);
                var currentStep = this.slider.steps[Coveo._.indexOf(diffs, nearest)];
                var nextStep = this.slider.steps[Coveo._.indexOf(diffsNext, nearestNext)];
                var previousStep = this.slider.steps[Coveo._.indexOf(diffsPrev, nearestPrevious)];
                currentStep = Math.min(currentStep, nextStep);
                currentStep = Math.max(currentStep, previousStep);
                return { position: this.fromValueToPosition(currentStep), value: currentStep };
            };
            return SliderButton;
        })();
        Ui.SliderButton = SliderButton;
        var SliderRange = (function () {
            function SliderRange(slider) {
                this.slider = slider;
                this.firstButton = new SliderButton(slider, 0);
                this.secondButton = new SliderButton(slider, 1);
            }
            SliderRange.prototype.build = function () {
                var firstElem = this.firstButton.build();
                var secondElem = this.secondButton.build().addClass("coveo-range-button");
                return firstElem.add(secondElem);
            };
            SliderRange.prototype.initializeSliderRangeState = function (values) {
                if (values == undefined) {
                    this.firstButton.toBeginning();
                    this.secondButton.toEnd();
                }
                else {
                    this.firstButton.setValue(values[0]);
                    this.secondButton.setValue(values[1]);
                }
                this.setBoundary();
            };
            SliderRange.prototype.setValue = function (values) {
                this.firstButton.setValue(values[0]);
                this.secondButton.setValue(values[1]);
            };
            SliderRange.prototype.setBoundary = function () {
                this.firstButton.leftBoundary = 0;
                this.firstButton.rightBoundary = this.secondButton.getPosition();
                this.secondButton.leftBoundary = this.firstButton.getPosition();
                this.secondButton.rightBoundary = this.slider.element.width();
            };
            SliderRange.prototype.getPosition = function () {
                return [this.firstButton.getPosition(), this.secondButton.getPosition()];
            };
            SliderRange.prototype.getPercentPosition = function () {
                return [this.firstButton.getPercent(), this.secondButton.getPercent()];
            };
            SliderRange.prototype.getValue = function () {
                return [this.firstButton.getValue(), this.secondButton.getValue()];
            };
            return SliderRange;
        })();
        var SliderCaption = (function () {
            function SliderCaption(slider) {
                this.slider = slider;
                this.separator = "-";
                this.unitSign = "";
                if (this.slider.options.displayAsPercent) {
                    this.separator = this.slider.options.displayAsPercent.separator != undefined ? this.slider.options.displayAsPercent.separator : this.separator;
                }
                else if (this.slider.options.displayAsValue) {
                    this.separator = this.slider.options.displayAsValue.separator != undefined ? this.slider.options.displayAsValue.separator : this.separator;
                    this.unitSign = this.slider.options.displayAsValue.unitSign != undefined ? this.slider.options.displayAsValue.unitSign : this.unitSign;
                }
            }
            SliderCaption.prototype.build = function () {
                this.caption = Coveo.$("<div class='coveo-slider-caption'></div>");
                return this.caption;
            };
            SliderCaption.prototype.getCaption = function () {
                return this.caption.text();
            };
            SliderCaption.prototype.getCaptionFromValues = function (values) {
                return this.getValueCaption(values);
            };
            SliderCaption.prototype.getCaptionFromValuesAsPercent = function (values) {
                return this.getValueCaption(values);
            };
            SliderCaption.prototype.setAsValue = function () {
                this.caption.text(this.getValueCaption());
            };
            SliderCaption.prototype.setAsPercent = function () {
                var values = this.slider.getPercentPosition();
                this.caption.text([(values[0] * 100).toFixed(this.slider.options.rounded), "%", this.separator, (values[1] * 100).toFixed(this.slider.options.rounded), "%"].join(" "));
            };
            SliderCaption.prototype.setFromString = function (str) {
                this.caption.text(str);
            };
            SliderCaption.prototype.getValueCaption = function (values) {
                if (values === void 0) { values = this.slider.getValues(); }
                var first = values[0];
                var second = values[1];
                if (this.slider.options.dateField) {
                    var firstAsDate = new Date(first);
                    var secondAsDate = new Date(second);
                    firstAsDate.setHours(0, 0, 0, 0);
                    secondAsDate.setHours(0, 0, 0, 0);
                    first = Globalize.format(firstAsDate, this.slider.options.dateFormat || "MMM dd, yyyy");
                    second = Globalize.format(secondAsDate, this.slider.options.dateFormat || "MMM dd, yyyy");
                    this.unitSign = "";
                }
                else {
                    first = first.toFixed(this.slider.options.rounded);
                    second = second.toFixed(this.slider.options.rounded);
                }
                return [first, this.unitSign, this.separator, second, this.unitSign].join(" ");
            };
            return SliderCaption;
        })();
        var SliderGraph = (function () {
            function SliderGraph(slider) {
                var _this = this;
                this.slider = slider;
                this.svg = d3.select(slider.element.get(0)).append("svg").append("g");
                this.x = d3.scale.ordinal();
                this.y = d3.scale.linear();
                this.slider.options.graph.margin = Coveo.Utils.extendDeep({
                    top: 20,
                    right: 0,
                    left: 0,
                    bottom: 20
                }, this.slider.options.graph.margin || {});
                this.slider.options.graph.animationDuration = this.slider.options.graph.animationDuration || 500;
                Coveo.$(window).resize(function () {
                    _this.draw();
                });
                this.tooltip = Coveo.$("<div></div>").css({
                    "display": "none"
                }).addClass("coveo-slider-tooltip");
                this.slider.element.append(this.tooltip);
                this.slider.options.graph.steps = this.slider.options.graph.steps || 10;
            }
            SliderGraph.prototype.draw = function (data) {
                if (data === void 0) { data = this.oldData; }
                if (data) {
                    var sliderOuterWidth = this.slider.element.outerWidth();
                    var sliderOuterHeight = this.slider.element.outerHeight();
                    var width = sliderOuterWidth - this.slider.options.graph.margin.left - this.slider.options.graph.margin.right;
                    var height = sliderOuterHeight - this.slider.options.graph.margin.top - this.slider.options.graph.margin.bottom;
                    this.applyTransformOnSvg(width, height);
                    this.setXAndYRange(width, height);
                    this.setXAndYDomain(data);
                    var bars = this.svg.selectAll(".coveo-bar").data(data);
                    var currentSliderValues = this.slider.getValues();
                    this.renderGraphBars(bars, width, height, currentSliderValues);
                    this.setGraphBarsTransition(bars, height, currentSliderValues);
                    this.oldData = data;
                }
            };
            SliderGraph.prototype.setXAndYRange = function (width, height) {
                this.x.rangeBands([0, width], 0.2, 0);
                this.y.range([height - this.slider.options.graph.margin.top, 0]);
            };
            SliderGraph.prototype.setXAndYDomain = function (data) {
                this.padGraphWithEmptyData(data);
                this.x.domain(Coveo._.map(data, function (d) {
                    return d.start;
                }));
                this.y.domain([0, d3.max(data, function (d) {
                    return d.y;
                })]);
            };
            SliderGraph.prototype.padGraphWithEmptyData = function (data) {
                var oneStepOfGraph = data[0].end - data[0].start;
                if (oneStepOfGraph != 0) {
                    this.padBeginningOfGraphWithEmptyData(data, oneStepOfGraph);
                    this.padEndOfGraphWithEmptyData(data, oneStepOfGraph);
                }
            };
            SliderGraph.prototype.padBeginningOfGraphWithEmptyData = function (data, oneStepOfGraph) {
                if (data[0].start > this.slider.options.start) {
                    var difToFillAtStart = data[0].start - this.slider.options.start;
                    var nbOfStepsAtStart = Math.round(difToFillAtStart / oneStepOfGraph);
                    var currentStep = data[0].start;
                    for (var i = nbOfStepsAtStart; i > 0; i--) {
                        data.unshift({ start: currentStep - oneStepOfGraph, end: currentStep, y: 0 });
                        currentStep -= oneStepOfGraph;
                    }
                }
            };
            SliderGraph.prototype.padEndOfGraphWithEmptyData = function (data, oneStepOfGraph) {
                var lastDataIndex = data.length - 1;
                if (data[lastDataIndex].end < this.slider.options.end) {
                    var diffToFillAtEnd = this.slider.options.end - data[lastDataIndex].end;
                    var nbOfStepsAtEnd = Math.round(diffToFillAtEnd / oneStepOfGraph);
                    var currentStep = data[lastDataIndex].end;
                    for (var i = 0; i < nbOfStepsAtEnd; i++) {
                        data.push({ start: currentStep, end: currentStep + oneStepOfGraph, y: 0 });
                        currentStep += oneStepOfGraph;
                    }
                }
            };
            SliderGraph.prototype.applyTransformOnSvg = function (width, height) {
                Coveo.$(this.slider.element).find("svg").attr("width", width).attr("height", height);
                this.svg.attr("transform", "translate(" + this.slider.options.graph.margin.left + "," + this.slider.options.graph.margin.top + ")");
            };
            SliderGraph.prototype.renderGraphBars = function (bars, width, height, currentSliderValues) {
                bars.enter().append("rect").attr("class", this.getFunctionForClass(currentSliderValues)).attr("width", this.x.rangeBand()).attr("height", this.getFunctionForHeight(height)).attr("x", this.getFunctionForX()).attr("y", this.getFunctionForY()).on("click", this.getFunctionForClick()).on("mouseover", this.getFunctionForMouseOver(height)).on("mouseout", this.getFunctionForMouseOut());
            };
            SliderGraph.prototype.setGraphBarsTransition = function (bars, height, currentSliderValues) {
                bars.transition().attr("x", this.getFunctionForX()).attr("width", this.x.rangeBand()).attr("class", this.getFunctionForClass(currentSliderValues)).transition().duration(this.slider.options.graph.animationDuration).attr("y", this.getFunctionForY()).attr("height", this.getFunctionForHeight(height));
            };
            SliderGraph.prototype.getBarClass = function (currentSliderValues, d, i) {
                if (d.start >= currentSliderValues[0] && d.end <= currentSliderValues[1]) {
                    return "coveo-active";
                }
                else if (currentSliderValues[0] == this.slider.options.start && i == 0) {
                    return "coveo-active";
                }
                else if (currentSliderValues[1] == this.slider.options.end && i == this.slider.options.graph.steps - 1) {
                    return "coveo-active";
                }
                else {
                    return "";
                }
            };
            SliderGraph.prototype.setTooltip = function (d, height) {
                this.tooltip.html("<span class='coveo-caption'>" + this.slider.getCaptionFromValue([d.start, d.end]) + "</span><span class='coveo-count'>" + d.y + "</span>");
                this.tooltip.css({
                    "display": "block",
                    "left": this.x(d.start) - (0.2 * this.slider.options.graph.steps),
                    "top": this.y(d.y) - height
                });
            };
            SliderGraph.prototype.getFunctionForX = function () {
                var _this = this;
                return function (d) {
                    return _this.x(d.start);
                };
            };
            SliderGraph.prototype.getFunctionForY = function () {
                var _this = this;
                return function (d) {
                    return _this.y(d.y);
                };
            };
            SliderGraph.prototype.getFunctionForHeight = function (height) {
                var _this = this;
                return function (d) {
                    return height - _this.y(d.y);
                };
            };
            SliderGraph.prototype.getFunctionForClass = function (currentSliderValues) {
                var _this = this;
                return function (d, i) {
                    return "coveo-bar " + _this.getBarClass(currentSliderValues, d, i);
                };
            };
            SliderGraph.prototype.getFunctionForClick = function () {
                var _this = this;
                return function (d, i) {
                    _this.slider.element.trigger(Coveo.Events.SliderEvents.graphValueSelected, {
                        start: d.start,
                        end: d.end,
                        value: d.y
                    });
                };
            };
            SliderGraph.prototype.getFunctionForMouseOver = function (height) {
                var _this = this;
                return function (d) {
                    var pageX = d3.event.clientX;
                    var pageY = d3.event.clientY;
                    _this.setTooltip(d, height);
                };
            };
            SliderGraph.prototype.getFunctionForMouseOut = function () {
                var _this = this;
                return function () {
                    _this.tooltip.css("display", "none");
                };
            };
            return SliderGraph;
        })();
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Options = (function () {
        function Options() {
        }
        Options.prototype.merge = function (provided) {
            return Coveo.$.extend({}, this, provided);
        };
        Options.prototype.mergeDeep = function (provided) {
            return Coveo.$.extend(true, {}, Coveo.Utils.extendDeep(this, provided));
        };
        return Options;
    })();
    Coveo.Options = Options;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var DefaultDateToStringOptions = (function (_super) {
        __extends(DefaultDateToStringOptions, _super);
        function DefaultDateToStringOptions() {
            _super.apply(this, arguments);
            this.now = new Date();
            this.useTodayYesterdayAndTomorrow = true;
            this.useWeekdayIfThisWeek = true;
            this.omitYearIfCurrentOne = true;
            this.useLongDateFormat = false;
            this.includeTimeIfToday = true;
            this.includeTimeIfThisWeek = true;
            this.alwaysIncludeTime = false;
            this.predefinedFormat = undefined;
        }
        return DefaultDateToStringOptions;
    })(Coveo.Options);
    var DateUtils = (function () {
        function DateUtils() {
        }
        DateUtils.convertFromJsonDateIfNeeded = function (date) {
            if (Coveo._.isDate(date)) {
                return date;
            }
            else if (Coveo._.isNumber(date)) {
                return new Date(date);
            }
            else if (Coveo._.isString(date)) {
                return new Date(date.replace("@", " "));
            }
            else {
                return undefined;
            }
        };
        DateUtils.keepOnlyDatePart = function (date) {
            return new Date(date.getFullYear(), date.getMonth(), date.getDate());
        };
        DateUtils.offsetDateByDays = function (date, offset) {
            var newDate = new Date(date.valueOf());
            newDate.setDate(newDate.getDate() + offset);
            return newDate;
        };
        DateUtils.dateToString = function (date, options) {
            if (Coveo.Utils.isNullOrUndefined(date)) {
                return '';
            }
            options = new DefaultDateToStringOptions().merge(options);
            if (Coveo.Utils.isNullOrUndefined(date)) {
                return '';
            }
            var date = DateUtils.keepOnlyDatePart(date);
            var today = DateUtils.keepOnlyDatePart(options.now);
            var tomorrow = DateUtils.offsetDateByDays(today, 1);
            var yesterday = DateUtils.offsetDateByDays(today, -1);
            var isThisWeek = Math.abs(Coveo.TimeSpan.fromDates(date, today).getDays()) < 7;
            if (options.predefinedFormat) {
                return Globalize.format(date, options.predefinedFormat);
            }
            else if (options.useTodayYesterdayAndTomorrow && date.valueOf() == today.valueOf()) {
                return Coveo.Ui.l("Today");
            }
            else if (options.useTodayYesterdayAndTomorrow && date.valueOf() == yesterday.valueOf()) {
                return Coveo.Ui.l("Yesterday");
            }
            else if (options.useTodayYesterdayAndTomorrow && date.valueOf() == tomorrow.valueOf()) {
                return Coveo.Ui.l("Tomorrow");
            }
            else if (options.useWeekdayIfThisWeek && isThisWeek) {
                if (date.valueOf() > today.valueOf()) {
                    return Coveo.Ui.l("Next") + ' ' + Globalize.format(date, 'dddd');
                }
                else {
                    return Coveo.Ui.l("Last") + ' ' + Globalize.format(date, 'dddd');
                }
            }
            else if (options.omitYearIfCurrentOne && date.getFullYear() === today.getFullYear()) {
                return Globalize.format(date, 'M');
            }
            else if (options.useLongDateFormat) {
                return Globalize.format(date, 'D');
            }
            else {
                return Globalize.format(date, 'd');
            }
        };
        DateUtils.timeToString = function (date, options) {
            if (Coveo.Utils.isNullOrUndefined(date)) {
                return '';
            }
            return Globalize.format(date, 't');
        };
        DateUtils.dateTimeToString = function (date, options) {
            if (Coveo.Utils.isNullOrUndefined(date)) {
                return '';
            }
            options = new DefaultDateToStringOptions().merge(options);
            var today = Coveo.DateUtils.keepOnlyDatePart(options.now);
            var isThisWeek = Math.abs(Coveo.TimeSpan.fromDates(date, today).getDays()) < 7;
            var datePart = Coveo.DateUtils.dateToString(date, options);
            var dateWithoutTime = Coveo.DateUtils.keepOnlyDatePart(date);
            if (options.alwaysIncludeTime || (options.includeTimeIfThisWeek && isThisWeek) || (options.includeTimeIfToday && dateWithoutTime.valueOf() == today.valueOf())) {
                return datePart + ', ' + Coveo.DateUtils.timeToString(date);
            }
            else {
                return datePart;
            }
        };
        DateUtils.isValid = function (date) {
            if (date instanceof Date) {
                return !isNaN(date.getTime());
            }
            return false;
        };
        return DateUtils;
    })();
    Coveo.DateUtils = DateUtils;
})(Coveo || (Coveo = {}));
//Shim for IE8 Date.toISOString
//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
if (!Date.prototype.toISOString) {
    (function () {
        function pad(number) {
            if (number < 10) {
                return '0' + number;
            }
            return number;
        }
        Date.prototype.toISOString = function () {
            return this.getUTCFullYear() + '-' + pad(this.getUTCMonth() + 1) + '-' + pad(this.getUTCDate()) + 'T' + pad(this.getUTCHours()) + ':' + pad(this.getUTCMinutes()) + ':' + pad(this.getUTCSeconds()) + '.' + (this.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
        };
    }());
}
var Coveo;
(function (Coveo) {
    var Controllers;
    (function (Controllers) {
        var FacetRangeQueryController = (function (_super) {
            __extends(FacetRangeQueryController, _super);
            function FacetRangeQueryController(facet) {
                var _this = this;
                _super.call(this, facet);
                this.facet = facet;
                this.facet.bind.onRoot(Coveo.Events.QueryEvents.querySuccess, function (e, args) { return _this.handleQuerySuccess(e, args); });
            }
            FacetRangeQueryController.prototype.putGroupByIntoQueryBuilder = function (queryBuilder) {
                if (this.facet.options.slider && this.facet.options.slider.graph) {
                    this.putGroupByForGraphIntoQueryBuilder(queryBuilder);
                }
                if (this.facet.options.slider) {
                    this.putGroupByForSliderIntoQueryBuilder(queryBuilder);
                }
                else {
                    _super.prototype.putGroupByIntoQueryBuilder.call(this, queryBuilder);
                }
            };
            FacetRangeQueryController.prototype._createBasicGroupByRequest = function (allowedValues, addComputedField) {
                if (addComputedField === void 0) { addComputedField = true; }
                var groupByQuery = _super.prototype._createBasicGroupByRequest.call(this, null, addComputedField);
                groupByQuery.allowedValues = undefined;
                if (this.facet.options.slider && this.facet.options.slider.graph) {
                    groupByQuery = this.buildGroupByQueryForSlider(groupByQuery);
                }
                else if (this.facet.options.slider) {
                    groupByQuery = this.buildGroupByQueryForAutomaticRanges(groupByQuery);
                }
                else if (Coveo.Utils.isNonEmptyArray(this.facet.options.ranges)) {
                    groupByQuery = this.buildGroupByQueryForPredefinedRanges(groupByQuery);
                }
                else if (this.facet.values.hasSelectedOrExcludedValues()) {
                    groupByQuery = this.buildGroupByQueryForSelectedAndExcludedValues(groupByQuery);
                }
                else {
                    groupByQuery = this.buildGroupByQueryForAutomaticRanges(groupByQuery);
                }
                return groupByQuery;
            };
            FacetRangeQueryController.prototype._createGroupByAllowedValues = function () {
                return undefined;
            };
            FacetRangeQueryController.prototype.computeOurFilterExpression = function (boundary) {
                if (boundary === void 0) { boundary = [this.facet.startOfSlider, this.facet.endOfSlider]; }
                if (this.facet.options.slider) {
                    var builder = new Coveo.Ui.ExpressionBuilder();
                    if (boundary[0] != undefined && boundary[1] != undefined) {
                        if (this.facet.options.slider.excludeOuterBounds) {
                            this.addFilterExpressionWithOuterBoundsExcluded(boundary[0], boundary[1], builder);
                        }
                        else {
                            this.addFilterExpressionWithOuterBoundsIncluded(boundary[0], boundary[1], builder);
                        }
                    }
                    return builder.build();
                }
                else {
                    return _super.prototype.computeOurFilterExpression.call(this);
                }
            };
            FacetRangeQueryController.prototype.handleQuerySuccess = function (e, args) {
                var _this = this;
                if (this.facet.options.slider && this.facet.options.slider.graph && this.rangeValuesForGraphToUse == undefined) {
                    this.rangeValuesForGraphToUse = [];
                    var rawValues = args.results.groupByResults[this.graphGroupByQueriesIndex].values;
                    Coveo._.each(rawValues, function (rawValue) {
                        var rawSplit = rawValue.value.split("..");
                        _this.rangeValuesForGraphToUse.push({
                            start: _this.facet.options.dateField ? _this.getISOFormat(rawSplit[0].replace("@", " ")) : parseInt(rawSplit[0], 10),
                            end: _this.facet.options.dateField ? _this.getISOFormat(rawSplit[1].replace("@", " ")) : parseInt(rawSplit[1], 10)
                        });
                    });
                }
            };
            FacetRangeQueryController.prototype.addFilterExpressionWithOuterBoundsIncluded = function (start, end, builder) {
                if (start != this.facet.options.slider.start || end != this.facet.options.slider.end) {
                    if (this.facet.options.dateField) {
                        start = this.getFilterDateFormat(start);
                        end = this.getFilterDateFormat(end);
                    }
                    builder.addFieldExpression(this.facet.options.field, '==', [start + ".." + end]);
                }
            };
            FacetRangeQueryController.prototype.addFilterExpressionWithOuterBoundsExcluded = function (start, end, builder) {
                var startCompare = this.facet.options.slider.start;
                var endCompare = this.facet.options.slider.end;
                var startCompared = start;
                var endCompared = end;
                if (this.facet.options.dateField) {
                    startCompared = this.getFilterDateFormat(start);
                    endCompared = this.getFilterDateFormat(end);
                    startCompare = this.getFilterDateFormat(startCompare);
                    endCompare = this.getFilterDateFormat(endCompare);
                }
                else {
                    startCompared += '';
                    endCompared += '';
                    startCompare += '';
                    endCompare += '';
                }
                if (startCompared != startCompare && endCompared == endCompare) {
                    builder.addFieldExpression(this.facet.options.field, '>=', [startCompared]);
                }
                else if (startCompared == startCompare && endCompared != endCompare) {
                    builder.addFieldExpression(this.facet.options.field, '<=', [endCompared]);
                }
                else {
                    this.addFilterExpressionWithOuterBoundsIncluded(start, end, builder);
                }
            };
            FacetRangeQueryController.prototype.buildGroupByQueryForSlider = function (groupByQuery) {
                if (this.facet.options.slider.start != undefined && this.facet.options.slider.end != undefined) {
                    var start = this.facet.options.slider.start;
                    var end = this.facet.options.slider.end;
                    if (this.facet.options.dateField || this.facet.options.dateField) {
                        start = this.getISOFormat(start);
                        end = this.getISOFormat(end);
                    }
                    groupByQuery.rangeValues = [{
                        start: start,
                        end: end,
                        endInclusive: true,
                        label: "Slider"
                    }];
                    return groupByQuery;
                }
                else {
                    return this.buildGroupByQueryForAutomaticRanges(groupByQuery);
                }
            };
            FacetRangeQueryController.prototype.buildGroupByQueryForAutomaticRanges = function (groupByQuery) {
                groupByQuery.generateAutomaticRanges = true;
                return groupByQuery;
            };
            FacetRangeQueryController.prototype.buildGroupByQueryForPredefinedRanges = function (groupByQuery) {
                groupByQuery.rangeValues = this.facet.options.ranges;
                groupByQuery.maximumNumberOfValues = this.facet.options.ranges.length;
                return groupByQuery;
            };
            FacetRangeQueryController.prototype.putGroupByForGraphIntoQueryBuilder = function (queryBuilder) {
                this.graphGroupByQueriesIndex = queryBuilder.groupByRequests.length;
                var basicGroupByRequestForGraph = this._createBasicGroupByRequest();
                if (basicGroupByRequestForGraph.rangeValues) {
                    var basicRangeRequest = basicGroupByRequestForGraph.rangeValues[0];
                    basicGroupByRequestForGraph.rangeValues = this.createRangeValuesForGraph(basicRangeRequest);
                }
                var filter = this.computeOurFilterExpression(this.facet.getSliderBoundaryForQuery());
                if (filter != undefined) {
                    var queryOverrideObject = queryBuilder.computeCompleteExpressionPartsExcept(filter);
                    basicGroupByRequestForGraph.queryOverride = queryOverrideObject.withoutConstant;
                    basicGroupByRequestForGraph.constantQueryOverride = queryOverrideObject.constant;
                    if (basicGroupByRequestForGraph.queryOverride == undefined) {
                        basicGroupByRequestForGraph.queryOverride = this.facet.options.slider.queryOverride || '@sysuri';
                    }
                    else {
                        basicGroupByRequestForGraph.queryOverride += ' ' + this.facet.options.slider.queryOverride;
                    }
                }
                else if (this.facet.options.slider.queryOverride != null) {
                    var completeExpression = queryBuilder.computeCompleteExpression();
                    basicGroupByRequestForGraph.queryOverride = (completeExpression != null ? completeExpression + ' ' : '') + this.facet.options.slider.queryOverride;
                }
                basicGroupByRequestForGraph.sortCriteria = "nosort";
                basicGroupByRequestForGraph.maximumNumberOfValues = this.facet.options.slider.graph.steps;
                queryBuilder.groupByRequests.push(basicGroupByRequestForGraph);
            };
            FacetRangeQueryController.prototype.putGroupByForSliderIntoQueryBuilder = function (queryBuilder) {
                this.lastGroupByRequestIndex = queryBuilder.groupByRequests.length;
                var basicGroupByRequestForSlider = this._createBasicGroupByRequest();
                basicGroupByRequestForSlider.maximumNumberOfValues = this.facet.options.slider.graph != null ? this.facet.options.slider.graph.steps || 1 : 1;
                basicGroupByRequestForSlider.queryOverride = this.facet.options.slider.queryOverride || '@sysuri';
                basicGroupByRequestForSlider.sortCriteria = 'nosort';
                basicGroupByRequestForSlider.generateAutomaticRanges = true;
                basicGroupByRequestForSlider.rangeValues = undefined;
                queryBuilder.groupByRequests.push(basicGroupByRequestForSlider);
            };
            FacetRangeQueryController.prototype.createRangeValuesForGraph = function (basicRangeRequest) {
                if (this.facet.options.slider.graph.steps == undefined) {
                    this.facet.options.slider.graph.steps = 10;
                }
                if (this.facet.options.dateField && isNaN(this.facet.options.slider.start)) {
                    this.facet.options.slider.start = new Date(this.facet.options.slider.start).getTime();
                }
                if (this.facet.options.dateField && isNaN(this.facet.options.slider.end)) {
                    this.facet.options.slider.end = new Date(this.facet.options.slider.end).getTime();
                }
                if (this.rangeValuesForGraphToUse != undefined) {
                    return this.usePrebuiltRange(basicRangeRequest);
                }
                else {
                    return this.buildRange(basicRangeRequest);
                }
            };
            FacetRangeQueryController.prototype.usePrebuiltRange = function (basicRangeRequest) {
                return Coveo._.map(this.rangeValuesForGraphToUse, function (value) {
                    return {
                        start: value.start,
                        end: value.end,
                        endInclusive: basicRangeRequest.endInclusive,
                        label: basicRangeRequest.label
                    };
                });
            };
            FacetRangeQueryController.prototype.buildRange = function (basicRangeRequest) {
                var _this = this;
                var start = this.facet.options.slider.start;
                var end = this.facet.options.slider.end;
                var oneStep = (this.facet.options.slider.end - this.facet.options.slider.start) / this.facet.options.slider.graph.steps;
                return Coveo._.map(Coveo._.range(0, this.facet.options.slider.graph.steps, 1), function (step) {
                    var newStart = start + (step * oneStep);
                    var newEnd = start + ((step + 1) * oneStep);
                    if (_this.facet.options.dateField) {
                        newStart = _this.getISOFormat(newStart);
                        newEnd = _this.getISOFormat(newEnd);
                    }
                    return {
                        endInclusive: basicRangeRequest.endInclusive,
                        label: basicRangeRequest.label,
                        start: newStart,
                        end: newEnd
                    };
                });
            };
            FacetRangeQueryController.prototype.buildGroupByQueryForSelectedAndExcludedValues = function (groupByQuery) {
                var _this = this;
                groupByQuery.rangeValues = Coveo._.map(this.facet.values.getAll(), function (value) {
                    var startEnd = value.value.split('..');
                    var start = startEnd[0];
                    var end = startEnd[1];
                    if (_this.facet.options.dateField) {
                        start = _this.getISOFormat(start);
                        end = _this.getISOFormat(end);
                    }
                    return {
                        start: start,
                        end: end,
                        endInclusive: true,
                        label: value.lookupValue
                    };
                });
                return groupByQuery;
            };
            FacetRangeQueryController.prototype.getISOFormat = function (value) {
                if (value) {
                    var date = new Date(value);
                    if (!Coveo.DateUtils.isValid(date)) {
                        date = new Date(this.getBrowserCompatibleFormat(value));
                        if (!Coveo.DateUtils.isValid(date)) {
                            //If we get here, we'll probably get an error further down the line when querying the index anyway ...
                            this.facet.logger.error("Cannot parse this date format.", value, new Date(value));
                            return undefined;
                        }
                    }
                    return date.toISOString();
                }
                else {
                    return undefined;
                }
            };
            FacetRangeQueryController.prototype.getFilterDateFormat = function (rawValue) {
                if (rawValue) {
                    return this.getISOFormat(rawValue).replace("T", "@").replace(".000Z", "").replace(/-/g, "/");
                }
                else {
                    return undefined;
                }
            };
            FacetRangeQueryController.prototype.getBrowserCompatibleFormat = function (value) {
                return value.replace("@", "T").replace(/\//g, "-");
            };
            return FacetRangeQueryController;
        })(Controllers.FacetQueryController);
        Controllers.FacetRangeQueryController = FacetRangeQueryController;
    })(Controllers = Coveo.Controllers || (Coveo.Controllers = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Events;
    (function (Events) {
        var SliderEvents = (function () {
            function SliderEvents() {
            }
            SliderEvents.startSlide = "startSlide";
            SliderEvents.duringSlide = "duringSlide";
            SliderEvents.endSlide = "endSlide";
            SliderEvents.graphValueSelected = "graphValueSelected";
            return SliderEvents;
        })();
        Events.SliderEvents = SliderEvents;
    })(Events = Coveo.Events || (Coveo.Events = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var FeatureDetectionUtils;
    (function (FeatureDetectionUtils) {
        function supportSVG() {
            return document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure", "1.1");
        }
        FeatureDetectionUtils.supportSVG = supportSVG;
    })(FeatureDetectionUtils = Coveo.FeatureDetectionUtils || (Coveo.FeatureDetectionUtils = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FacetRange = (function (_super) {
            __extends(FacetRange, _super);
            function FacetRange(element, options, bindings) {
                _super.call(this, element, Ui.ComponentOptions.initComponentOptions(element, FacetRange, options), bindings, FacetRange.ID);
                this.element = element;
                this.isEmpty = false;
                this.options.enableFacetSearch = false;
                this.options.enableSettings = false;
                this.options.includeInOmniBox = false;
                if (this.hasASlider()) {
                    if (this.options.slider.excludeOuterBounds == null) {
                        this.options.slider.excludeOuterBounds = false;
                    }
                    this.options.dateField = this.options.slider.dateField = this.options.slider.dateField || this.options.dateField || false;
                    if (this.options.slider.start) {
                        this.options.slider.start = this.options.slider.dateField ? new Date(this.options.slider.start).getTime() : parseFloat(this.options.slider.start);
                    }
                    if (this.options.slider.end) {
                        this.options.slider.end = this.options.slider.dateField ? new Date(this.options.slider.end).getTime() : parseFloat(this.options.slider.end);
                    }
                    if (this.hasAGraph()) {
                        if (!Coveo.FeatureDetectionUtils.supportSVG()) {
                            this.options.slider.graph = undefined;
                            this.logger.info("Your browser does not support SVG. Cannot add graphic to your facet range", this);
                        }
                        if (typeof d3 == "undefined") {
                            this.options.slider.graph = undefined;
                            this.logger.info("Cannot find the required dependencies d3.js. Cannot add graphic to your facet range", this);
                        }
                    }
                    this.handleNoresults();
                }
            }
            FacetRange.prototype.reset = function () {
                if (this.hasASlider()) {
                    this.slider.initializeState();
                    this.updateQueryState();
                    this.updateFacetStyle();
                }
                else {
                    _super.prototype.reset.call(this);
                }
            };
            FacetRange.prototype.getSelectedValues = function () {
                if (this.hasASlider()) {
                    if (this.startOfSlider != undefined && this.endOfSlider != undefined) {
                        return [this.startOfSlider.toString(), this.endOfSlider.toString()];
                    }
                    else {
                        return ["undefined", "undefined"];
                    }
                }
                else {
                    return _super.prototype.getSelectedValues.call(this);
                }
            };
            FacetRange.prototype.getValueCaption = function (facetValue) {
                var ret = _super.prototype.getValueCaption.call(this, facetValue);
                if (Coveo.Utils.exists(this.options.valueCaption) && typeof this.options.valueCaption == "string") {
                    var startEnd = /^(.*)\.\.(.*)$/.exec(facetValue.value);
                    if (startEnd != null) {
                        var helper = Ui.TemplateHelpers.getHelper(this.options.valueCaption);
                        if (helper != null) {
                            ret = helper.call(this, startEnd[1]) + ' - ' + helper.call(this, startEnd[2]);
                        }
                        else {
                            var start = startEnd[1].match(/^[\+\-]?[0-9]+(\.[0-9]+)?$/) ? Number(startEnd[1]) : Coveo.DateUtils.convertFromJsonDateIfNeeded(startEnd[1]);
                            var end = startEnd[2].match(/^[\+\-]?[0-9]+(\.[0-9]+)?$/) ? Number(startEnd[2]) : Coveo.DateUtils.convertFromJsonDateIfNeeded(startEnd[2]);
                            var ret = Globalize.format(start, this.options.valueCaption) + ' - ' + Globalize.format(end, this.options.valueCaption);
                        }
                    }
                }
                return ret;
            };
            FacetRange.prototype._initFacetValuesList = function () {
                if (!this.hasASlider()) {
                    _super.prototype._initFacetValuesList.call(this);
                }
            };
            FacetRange.prototype._handlePopulateBreadcrumb = function (e, args) {
                var _this = this;
                if (!this.hasASlider()) {
                    _super.prototype._handlePopulateBreadcrumb.call(this, e, args);
                }
                else {
                    var populateBreadcrumb = function () {
                        if (_this.sliderIsActive()) {
                            args.breadcrumbs.push({
                                element: _this.buildBreadcrumbFacetSlider().get(0),
                                clearAll: function () { return _this.reset(); }
                            });
                        }
                    };
                    if (this.slider) {
                        populateBreadcrumb();
                    }
                    else {
                        Coveo.$(this.root).one(Coveo.Events.QueryEvents.deferredQuerySuccess, function () {
                            populateBreadcrumb();
                            Coveo.$(_this.root).trigger(Coveo.Events.BreadcrumbEvents.redrawBreadcrumb);
                        });
                    }
                }
            };
            FacetRange.prototype.getSliderBoundaryForQuery = function () {
                var needToReturnABoundary = false;
                if (this.hasASlider() && !this.slider) {
                    needToReturnABoundary = true;
                }
                else if (this.hasASlider() && this.slider && this.sliderIsActive()) {
                    needToReturnABoundary = true;
                }
                if (needToReturnABoundary) {
                    return this.generateBoundary();
                }
                else {
                    return undefined;
                }
            };
            FacetRange.prototype.handleNoresults = function () {
                var _this = this;
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.noResults, function () {
                    _this.isEmpty = true;
                    _this._updateAppearanceDependingOnState();
                });
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.newQuery, function () {
                    _this.isEmpty = false;
                });
            };
            FacetRange.prototype.sliderIsActive = function () {
                return !isNaN(this.startOfSlider) && !isNaN(this.endOfSlider) && !isNaN(this.initialStartOfSlider) && !isNaN(this.initialEndOfSlider) && (this.startOfSlider != this.initialStartOfSlider || this.endOfSlider != this.initialEndOfSlider);
            };
            FacetRange.prototype.buildBreadcrumbFacetSlider = function () {
                var _this = this;
                var elem = Coveo.$('<div/>').addClass('coveo-facet-breadcrumb');
                Coveo.$('<span/>').addClass('coveo-title').text(this.options.title + ':').appendTo(elem);
                var values = Coveo.$('<span/>').addClass('coveo-values').appendTo(elem);
                var value = Coveo.$("<span class='coveo-value'>" + this.slider.getCaption() + "</span>").appendTo(values);
                var clear = Coveo.$("<span class='coveo-clear'></span>").appendTo(value);
                value.fastClick(function () {
                    _this.reset();
                    _this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.facetClearAll, { facetId: _this.options.uniqueId }); });
                });
                return elem;
            };
            FacetRange.prototype.initSlider = function () {
                this.buildSlider();
                this.slider.initializeState([this.startOfSlider, this.endOfSlider]);
                this.updateFacetStyle();
            };
            FacetRange.prototype._initQueryStateEvents = function () {
                var _this = this;
                if (this.options.slider) {
                    this.rangeQueryStateAttribute = Coveo.Models.QueryStateModel.getFacetId(this.options.uniqueId) + ":range";
                    this.queryStateModel.registerNewAttribute(this.rangeQueryStateAttribute, [undefined, undefined]);
                    var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + this.rangeQueryStateAttribute);
                    this.bind.onRoot(eventName, function (e, args) {
                        _this.slider ? _this.handleRangeQueryStateChanged(e, args) : _this.setRangeStateSliderStillNotCreated(e, args);
                        /*$(this.root).one(Events.QueryEvents.deferredQuerySuccess, () => this.handleRangeQueryStateChanged(e, args));*/
                    });
                }
                else {
                    _super.prototype._initQueryStateEvents.call(this);
                }
            };
            FacetRange.prototype.handleRangeQueryStateChanged = function (e, args) {
                this.setupSliderIfNeeded(args);
                this.startOfSlider = args.value[0] == undefined ? this.startOfSlider : args.value[0];
                this.endOfSlider = args.value[1] == undefined ? this.endOfSlider : args.value[1];
                this.slider.setValues([this.startOfSlider, this.endOfSlider]);
                this.updateFacetStyle();
            };
            FacetRange.prototype.setRangeStateSliderStillNotCreated = function (e, args) {
                this.rangeFromUrlState = this.copyValues(args.value);
            };
            FacetRange.prototype.buildSlider = function () {
                var _this = this;
                var sliderContainer = Coveo.$("<div class='coveo-values coveo-slider-container'></div>");
                if (this.hasAGraph()) {
                    sliderContainer.addClass("coveo-with-graph");
                }
                var sliderDiv = Coveo.$("<div></div>");
                this.slider = new Ui.Slider(sliderDiv, Coveo.$.extend({}, this.options.slider, { dateField: this.options.dateField }));
                sliderDiv.on(Coveo.Events.SliderEvents.endSlide, function (e, args) {
                    _this.handleEndSlide(e, args);
                });
                sliderDiv.on(Coveo.Events.SliderEvents.duringSlide, function (e, args) {
                    _this.handleDuringSlide(e, args);
                });
                if (this.hasAGraph()) {
                    sliderDiv.on(Coveo.Events.SliderEvents.graphValueSelected, function (e, args) {
                        _this.handleGraphValueSelected(e, args);
                    });
                }
                sliderContainer.append(sliderDiv);
                Coveo.$(this.element).append(sliderContainer);
                this.updateFacetStyle();
            };
            FacetRange.prototype._initFacetQueryController = function () {
                this.facetQueryController = new Coveo.Controllers.FacetRangeQueryController(this);
            };
            FacetRange.prototype._handleBuildingQuery = function (e, data) {
                Coveo.Assert.exists(data);
                Coveo.Assert.exists(data.queryBuilder);
                var boundary = this.getSliderBoundaryForQuery();
                if (boundary != undefined) {
                    this.facetQueryController.prepareForNewQuery();
                    var expression = this.facetQueryController.computeOurFilterExpression(boundary);
                    if (Coveo.Utils.isNonEmptyString(expression)) {
                        this.logger.trace('Putting filter in query', expression);
                        data.queryBuilder.advancedExpression.add(expression);
                    }
                }
                else {
                    _super.prototype._handleBuildingQuery.call(this, e, data);
                }
            };
            FacetRange.prototype._processNewGroupByResults = function (groupByResult) {
                var _this = this;
                if (!this.hasASlider()) {
                    if (groupByResult != null) {
                        if (this.options.ranges == null && (!this.keepDisplayedValuesNextTime || this.values.hasSelectedOrExcludedValues())) {
                            this.keepDisplayedValuesNextTime = false;
                            groupByResult.values.sort(function (valueA, valueB) {
                                var startEndA = valueA.value.split('..');
                                var startEndB = valueB.value.split('..');
                                if (_this.options.dateField) {
                                    return Date.parse(startEndA[0]) - Date.parse(startEndB[0]);
                                }
                                return Number(startEndA[0]) - Number(startEndB[0]);
                            });
                        }
                    }
                    _super.prototype._processNewGroupByResults.call(this, groupByResult);
                }
            };
            FacetRange.prototype._handleDeferredQuerySuccess = function (e, data) {
                this.ensureDom();
                _super.prototype._handleDeferredQuerySuccess.call(this, e, data);
                this.setupSliderIfNeeded(data);
                var groupByResults = data.results.groupByResults[this.facetQueryController.lastGroupByRequestIndex];
                if (groupByResults == undefined || groupByResults.values[0] == undefined) {
                    this.isEmpty = true;
                    this._updateAppearanceDependingOnState();
                }
                if (this.hasAGraph()) {
                    this._updateAppearanceDependingOnState();
                    this.renderToSliderGraph(data);
                }
                this._updateAppearanceDependingOnState();
            };
            FacetRange.prototype._facetValueShouldBeRemoved = function (facetValue) {
                return false;
            };
            FacetRange.prototype._rebuildValueElements = function () {
                if (!this.hasASlider()) {
                    _super.prototype._rebuildValueElements.call(this);
                }
            };
            FacetRange.prototype.handleEndSlide = function (e, args) {
                var _this = this;
                var values = args.slider.getValues();
                this.startOfSlider = values[0];
                this.endOfSlider = values[1];
                if (this.updateQueryState(values)) {
                    this.updateFacetStyle();
                    _super.prototype.triggerNewQuery.call(this, function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.facetRangeSlider, {
                        facetId: _this.options.uniqueId,
                        facetRangeStart: _this.startOfSlider.toString(),
                        facetRangeEnd: _this.endOfSlider.toString()
                    }); });
                }
            };
            FacetRange.prototype.handleDuringSlide = function (e, args) {
                var values = args.slider.getValues();
                this.startOfSlider = values[0];
                this.endOfSlider = values[1];
                this.slider.setValues([this.startOfSlider, this.endOfSlider]);
                this.updateFacetStyle();
            };
            FacetRange.prototype.handleGraphValueSelected = function (e, args) {
                var _this = this;
                if ((this.options.slider.rangeSlider && this.startOfSlider != args.start) || this.endOfSlider != args.end) {
                    if (this.options.slider.rangeSlider) {
                        this.startOfSlider = args.start;
                    }
                    this.endOfSlider = args.end;
                    this.slider.setValues([this.startOfSlider, this.endOfSlider]);
                    this.updateQueryState();
                    _super.prototype.triggerNewQuery.call(this, function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.facetRangeGraph, {
                        facetId: _this.options.uniqueId,
                        facetRangeStart: _this.startOfSlider.toString(),
                        facetRangeEnd: _this.endOfSlider.toString()
                    }); });
                }
            };
            FacetRange.prototype.updateQueryState = function (values, silent) {
                if (values === void 0) { values = this.slider.getValues(); }
                if (silent === void 0) { silent = false; }
                var copyOfValues = this.copyValues(values);
                var start = values[0] + 0.0;
                var end = values[1] + 0.0;
                var model = this.queryStateModel.get(this.rangeQueryStateAttribute);
                if (model == null || copyOfValues[0] != model[0] || copyOfValues[1] != model[1]) {
                    copyOfValues[0] = start;
                    copyOfValues[1] = end;
                    this.queryStateModel.set(this.rangeQueryStateAttribute, copyOfValues, { silent: silent });
                    return true;
                }
                return false;
            };
            FacetRange.prototype.copyValues = function (values) {
                //Creating a copy of the values prevents an unwanted automatic update of the state while sliding
                //That's the cleanest way I found to copy that array correctly
                var copyOfValues = [];
                copyOfValues[0] = values[0] + 0.0;
                copyOfValues[1] = values[1] + 0.0;
                return copyOfValues;
            };
            FacetRange.prototype.updateFacetStyle = function () {
                if (!this.sliderIsActive()) {
                    Coveo.$(this.element).addClass('coveo-disabled');
                }
                else {
                    Coveo.$(this.element).removeClass('coveo-disabled');
                }
            };
            FacetRange.prototype.renderToSliderGraph = function (data) {
                var _this = this;
                var rawGroupByResults = data.results.groupByResults[this.facetQueryController.graphGroupByQueriesIndex];
                var graphData;
                var totalGraphResults = 0;
                if (rawGroupByResults) {
                    graphData = Coveo._.map(rawGroupByResults.values, function (value) {
                        totalGraphResults += value.numberOfResults;
                        var start = value.value.split("..")[0];
                        var end = value.value.split("..")[1];
                        if (!_this.options.dateField) {
                            start = parseFloat(start);
                            end = parseFloat(end);
                        }
                        else {
                            start = new Date(start.split("@")[0]).getTime();
                            end = new Date(end.split("@")[0]).getTime();
                        }
                        var y = value.numberOfResults;
                        return {
                            start: start,
                            y: y,
                            end: end,
                            isDate: _this.options.dateField
                        };
                    });
                }
                if (totalGraphResults == 0) {
                    this.isEmpty = true;
                    this._updateAppearanceDependingOnState();
                }
                else if (graphData != undefined) {
                    this.slider.drawGraph(graphData);
                }
            };
            FacetRange.prototype._updateAppearanceDependingOnState = function () {
                if (!this.options.slider) {
                    _super.prototype._updateAppearanceDependingOnState.call(this);
                }
                else {
                    if (this.isEmpty && !this.sliderIsActive()) {
                        Coveo.$(this.element).addClass('coveo-disabled-empty');
                    }
                    else {
                        Coveo.$(this.element).removeClass('coveo-disabled-empty');
                        Coveo.$(this._eraserElement).fastToggle(this.sliderIsActive());
                    }
                    this.updateFacetStyle();
                }
            };
            FacetRange.prototype.generateBoundary = function () {
                var start, end;
                if (!this.slider) {
                    //If the slider is not initialized, the only boundary we can get is from the state.
                    return this.generateBoundaryFromState();
                }
                else {
                    //Else, try to get one from the slider itself. If we cant, try to return one from the state.
                    var boundary = this.generateBoundaryFromSlider();
                    if (boundary[0] == undefined && boundary[1] == undefined) {
                        return this.generateBoundaryFromState();
                    }
                    else {
                        return boundary;
                    }
                }
            };
            FacetRange.prototype.generateBoundaryFromSlider = function () {
                var start, end;
                if (this.startOfSlider != undefined) {
                    start = this.startOfSlider;
                }
                if (this.endOfSlider != undefined) {
                    end = this.endOfSlider;
                }
                return [start, end];
            };
            FacetRange.prototype.generateBoundaryFromState = function () {
                var start, end;
                var startFromState = this.queryStateModel.get(this.rangeQueryStateAttribute)[0];
                if (startFromState != undefined) {
                    start = startFromState;
                }
                var endFromState = this.queryStateModel.get(this.rangeQueryStateAttribute)[1];
                if (endFromState != undefined) {
                    end = endFromState;
                }
                if (start != this.queryStateModel.getDefault(this.rangeQueryStateAttribute)[0] || end != this.queryStateModel.getDefault(this.rangeQueryStateAttribute)[1]) {
                    return [start, end];
                }
                else {
                    return [undefined, undefined];
                }
            };
            /* TODO Remove Comment, will be fix in ts 1.4
             private setupSliderIfNeeded(data:Models.AttributeChangedEventArg);
        
             private setupSliderIfNeeded(data:Events.QuerySuccessEventArgs);
             */
            FacetRange.prototype.setupSliderIfNeeded = function (data) {
                this.ensureDom();
                if (!Coveo.Utils.isNullOrUndefined(this.options.slider) && Coveo.Utils.isNullOrUndefined(this.slider)) {
                    if (!this.alreadySetBoundary()) {
                        this.trySetSliderBoundaryFromOptions();
                    }
                    if (!this.alreadySetBoundary() && data != undefined) {
                        this.trySetSliderBoundaryFromQueryResult(data);
                    }
                    this.trySetSliderBoundaryFromState();
                    this.setupSliderStateVariables();
                    var isInError = this.verifySetup();
                    if (isInError) {
                        this.logger.warn('Unable to initialize slider with current values', this);
                    }
                    else {
                        this.initSlider();
                        this.updateQueryState();
                    }
                }
            };
            FacetRange.prototype.verifySetup = function () {
                var isInError = 0;
                isInError += this.initialStartOfSlider == undefined ? 1 : 0;
                isInError += isNaN(this.initialStartOfSlider) ? 1 : 0;
                isInError += this.initialEndOfSlider == undefined ? 1 : 0;
                isInError += isNaN(this.initialEndOfSlider) ? 1 : 0;
                return isInError;
            };
            FacetRange.prototype.setupSliderStateVariables = function () {
                if (isNaN(this.initialStartOfSlider) || isNaN(this.initialEndOfSlider)) {
                    this.logger.warn('Cannnot initialize slider with those values : start: ' + this.initialStartOfSlider + ' end: ' + this.initialEndOfSlider);
                }
                else {
                    this.initialStartOfSlider = parseFloat(this.initialStartOfSlider.toString());
                    this.initialEndOfSlider = parseFloat(this.initialEndOfSlider.toString());
                    this.startOfSlider = this.startOfSlider != undefined ? parseFloat(this.startOfSlider.toString()) : this.initialStartOfSlider;
                    this.endOfSlider = this.endOfSlider != undefined ? parseFloat(this.endOfSlider.toString()) : this.initialEndOfSlider;
                    /*if (this.startOfSlider == this.endOfSlider) {
                      this.endOfSlider += 1;
                    }
                    if (this.initialStartOfSlider == this.initialEndOfSlider) {
                      this.initialEndOfSlider += 1;
                    }*/
                    this.options.slider.start = this.initialStartOfSlider;
                    this.options.slider.end = this.initialEndOfSlider;
                    this.queryStateModel.setNewDefault(this.rangeQueryStateAttribute, [this.initialStartOfSlider, this.initialEndOfSlider]);
                }
            };
            FacetRange.prototype.alreadySetBoundary = function () {
                return this.startOfSlider != undefined && this.endOfSlider != undefined;
            };
            FacetRange.prototype.trySetSliderBoundaryFromOptions = function () {
                if (!Coveo.Utils.isNullOrUndefined(this.options.slider.start)) {
                    this.setupInitialSliderStateStart(this.options.slider.start);
                }
                if (!Coveo.Utils.isNullOrUndefined(this.options.slider.end)) {
                    this.setupInitialSliderStateEnd(this.options.slider.end);
                }
            };
            FacetRange.prototype.trySetSliderBoundaryFromState = function () {
                var stateValues = this.rangeFromUrlState || this.queryStateModel.get(this.rangeQueryStateAttribute);
                if (stateValues && stateValues[0] != undefined && stateValues[1] != undefined) {
                    this.setupInitialSliderStateStart(stateValues[0]);
                    this.setupInitialSliderStateEnd(stateValues[1]);
                    this.startOfSlider = stateValues[0];
                    this.endOfSlider = stateValues[1];
                }
            };
            FacetRange.prototype.trySetSliderBoundaryFromQueryResult = function (data) {
                var groupByResults = data.results.groupByResults[this.facetQueryController.lastGroupByRequestIndex];
                if (groupByResults && groupByResults.values.length > 0) {
                    this.setupInitialSliderStateStart(groupByResults.values[0].value.split("..")[0]);
                    this.setupInitialSliderStateEnd(groupByResults.values[groupByResults.values.length - 1].value.split("..")[1]);
                }
            };
            FacetRange.prototype.setupInitialSliderStateStart = function (value) {
                if (this.initialStartOfSlider == undefined) {
                    this.initialStartOfSlider = value;
                    if (this.options.dateField && isNaN(value)) {
                        this.initialStartOfSlider = new Date(value.replace("@", " ")).getTime();
                    }
                }
            };
            FacetRange.prototype.setupInitialSliderStateEnd = function (value) {
                if (this.initialEndOfSlider == undefined) {
                    this.initialEndOfSlider = value;
                    if (this.options.dateField && isNaN((value))) {
                        this.initialEndOfSlider = new Date(value.replace("@", " ")).getTime();
                    }
                }
            };
            FacetRange.prototype.hasASlider = function () {
                return this.options.slider != undefined;
            };
            FacetRange.prototype.hasAGraph = function () {
                return this.hasASlider() && this.options.slider.graph != undefined;
            };
            FacetRange.ID = 'FacetRange';
            FacetRange.parent = Ui.Facet;
            FacetRange.options = {
                dateField: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                slider: Ui.ComponentOptions.buildObjectOption({
                    subOptions: {
                        start: Ui.ComponentOptions.buildStringOption(),
                        end: Ui.ComponentOptions.buildStringOption(),
                        queryOverride: Ui.ComponentOptions.buildStringOption(),
                        excludeOuterBounds: Ui.ComponentOptions.buildBooleanOption(),
                        rounded: Ui.ComponentOptions.buildNumberOption(),
                        steps: Ui.ComponentOptions.buildNumberOption(),
                        rangeSlider: Ui.ComponentOptions.buildBooleanOption({ attrName: "data-range-slider" }),
                        displayAsValue: Ui.ComponentOptions.buildObjectOption({
                            subOptions: {
                                unitSign: Ui.ComponentOptions.buildStringOption(),
                                separator: Ui.ComponentOptions.buildStringOption()
                            }
                        }),
                        displayAsPercent: Ui.ComponentOptions.buildObjectOption({
                            subOptions: {
                                separator: Ui.ComponentOptions.buildStringOption()
                            }
                        }),
                        dateField: Ui.ComponentOptions.buildBooleanOption(),
                        graph: Ui.ComponentOptions.buildObjectOption({
                            subOptions: {
                                steps: Ui.ComponentOptions.buildNumberOption(),
                                animationDuration: Ui.ComponentOptions.buildNumberOption(),
                                margin: Ui.ComponentOptions.buildObjectOption({
                                    subOptions: {
                                        top: Ui.ComponentOptions.buildNumberOption(),
                                        bottom: Ui.ComponentOptions.buildNumberOption(),
                                        left: Ui.ComponentOptions.buildNumberOption(),
                                        right: Ui.ComponentOptions.buildNumberOption()
                                    }
                                })
                            }
                        })
                    }
                })
            };
            return FacetRange;
        })(Ui.Facet);
        Ui.FacetRange = FacetRange;
        Ui.CoveoJQuery.registerAutoCreateComponent(FacetRange);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FieldValue = (function (_super) {
            __extends(FieldValue, _super);
            function FieldValue(element, options, bindings, result) {
                var _this = this;
                _super.call(this, element, FieldValue.ID, bindings);
                this.element = element;
                this.options = options;
                this.result = result;
                this.options = Ui.ComponentOptions.initComponentOptions(element, FieldValue, options);
                this.result = this.result || this.resolveResult();
                Coveo.Assert.exists(this.result);
                this.options.field = this.options.field.toLowerCase();
                var fieldKey = Coveo.Utils.getCoveoFieldKey(this.options.field);
                var value = this.result.raw[fieldKey];
                if (value == null)
                    value = this.result[fieldKey];
                if (Coveo._.isObject(value)) {
                    value = null;
                }
                var values;
                if (this.options.splitValues && value) {
                    values = value.split(";");
                    values = Coveo._.map(values, function (value) {
                        return Coveo.$.trim(value);
                    });
                }
                else {
                    values = [value];
                }
                Coveo._.each(values, function (value) {
                    if (value != undefined) {
                        _this.renderOneValue(value);
                    }
                });
            }
            FieldValue.prototype.getHelperOptions = function () {
                if (!this.evaluatedHelperOptions && Coveo.Utils.isNonEmptyString(this.options.helperOptions)) {
                    this.evaluatedHelperOptions = eval("(" + this.options.helperOptions + ")");
                }
                return this.evaluatedHelperOptions;
            };
            FieldValue.prototype.renderOneValue = function (value) {
                var element = Coveo.$("<span></span>");
                var toRender = value;
                if (this.options.helper) {
                    toRender = Ui.TemplateHelpers.getHelper(this.options.helper).call(this, value, this.getHelperOptions());
                }
                if (this.options.htmlValue) {
                    element.html(toRender);
                }
                else {
                    element.text(toRender);
                }
                Coveo.$(this.element).append(element);
                this.bindEventOnValue(element, value);
            };
            FieldValue.prototype.bindEventOnValue = function (element, value) {
                var _this = this;
                var facetAttributeName = Coveo.Models.QueryStateModel.getFacetId(this.options.facet);
                var facetModel = this.queryStateModel.get(facetAttributeName);
                var facets = this.componentStateModel.get(facetAttributeName);
                var atLeastOneFacetIsEnabled = Coveo._.filter(facets, function (facet) { return !facet.disabled; }).length > 0;
                if (facetModel != null && atLeastOneFacetIsEnabled) {
                    Coveo.$(element).on("click", function () {
                        if (Coveo._.contains(facetModel, value.toLowerCase())) {
                            _this.queryStateModel.set(facetAttributeName, Coveo._.without(facetModel, value.toLowerCase()));
                        }
                        else {
                            _this.queryStateModel.set(facetAttributeName, Coveo._.union(facetModel, [value.toLowerCase()]));
                        }
                        _this.queryController.deferExecuteQuery({
                            beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.documentField, { facetId: _this.options.facet, facetValue: value.toLowerCase() }); }
                        });
                    });
                    if (Coveo._.contains(facetModel, value.toLowerCase())) {
                        Coveo.$(element).addClass('coveo-selected');
                    }
                    Coveo.$(element).addClass('coveo-clickable');
                }
            };
            FieldValue.ID = 'FieldValue';
            FieldValue.options = {
                field: Ui.ComponentOptions.buildFieldOption(),
                facet: Ui.ComponentOptions.buildStringOption({ postProcessing: function (value, options) { return value || options.field; } }),
                htmlValue: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                helper: Ui.ComponentOptions.buildStringOption(),
                helperOptions: Ui.ComponentOptions.buildStringOption(),
                splitValues: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false })
            };
            return FieldValue;
        })(Ui.Component);
        Ui.FieldValue = FieldValue;
        Ui.CoveoJQuery.registerAutoCreateComponent(FieldValue);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var FieldTable = (function (_super) {
            __extends(FieldTable, _super);
            function FieldTable(element, options, bindings, result) {
                _super.call(this, element, ValueRow.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, FieldTable, options);
                var rows = Coveo.$(this.element).find('tr[data-field]');
                rows.each(function (i, e) {
                    new ValueRow(e, {}, bindings, result);
                });
                if (Coveo.$(element).find('tr').length == 0) {
                    Coveo.$(element).detach();
                }
            }
            FieldTable.ID = 'FieldTable';
            FieldTable.options = {};
            return FieldTable;
        })(Ui.Component);
        Ui.CoveoJQuery.registerAutoCreateComponent(FieldTable);
        var ValueRow = (function (_super) {
            __extends(ValueRow, _super);
            function ValueRow(element, options, bindings, result) {
                _super.call(this, element, ValueRow.ID, bindings);
                this.element = element;
                this.options = options;
                this.result = result;
                this.options = Ui.ComponentOptions.initComponentOptions(element, ValueRow, options);
                this.result = result || this.resolveResult();
                var fieldKey = Coveo.Utils.getCoveoFieldKey(this.options.field);
                if (this.result.raw[fieldKey] != null || this.result[fieldKey] != null) {
                    Coveo.$(element).append('<th class ="CoveoCaption">' + this.options.caption.toLocaleString() + '</th>');
                    var valueElement = Coveo.$('<td />').appendTo(element);
                    new Ui.FieldValue(valueElement[0], this.options, bindings, result);
                }
                else {
                    Coveo.$(element).detach();
                }
            }
            ValueRow.ID = 'ValueRow';
            ValueRow.options = Coveo._.extend({
                caption: Ui.ComponentOptions.buildStringOption({ postProcessing: function (value, options) { return value || options.field.substr(1); } })
            }, Ui.FieldValue.options);
            return ValueRow;
        })(Ui.Component);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Folding = (function (_super) {
            __extends(Folding, _super);
            function Folding(element, options, bindings) {
                _super.call(this, element, Folding.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, Folding, options);
                Coveo.Assert.check(Coveo.Utils.isCoveoField(this.options.field), this.options.field + ' is not a valid field');
                Coveo.Assert.exists(this.options.maximumExpandedResults);
                this.bind.onRoot(Coveo.Events.QueryEvents.buildingQuery, this.handleBuildingQuery);
                this.bind.onRoot(Coveo.Events.QueryEvents.preprocessResults, this.handlepreprocessResults);
            }
            /**
             * Convert ResultNode to QueryResult
             */
            Folding.resultNodeToQueryResult = function (resultNode) {
                var result = resultNode.result;
                result.attachments = Coveo._.map(Coveo._.sortBy(resultNode.children, 'score'), Folding.resultNodeToQueryResult);
                result.parentResult = resultNode.parent != null ? resultNode.parent.result : null;
                return result;
            };
            /**
             * Find the node in trees
             */
            Folding.findUniqueId = function (resultNodes, uniqueId) {
                for (var i = 0; i < resultNodes.length; i++) {
                    if (resultNodes[i].result.uniqueId == uniqueId) {
                        return resultNodes[i];
                    }
                    var resultNode = Folding.findUniqueId(resultNodes[i].children, uniqueId);
                    if (resultNode != null) {
                        return resultNode;
                    }
                }
                return null;
            };
            /**
             * From a list of results, return a list of results and their attachments
             * We use parentResult to build a tree of result
             */
            Folding.foldWithParent = function (queryResults) {
                var rootNode = {
                    score: Number.NEGATIVE_INFINITY,
                    children: [],
                    result: {}
                };
                Coveo._.each(queryResults, function (queryResult, i) {
                    var resultNode = Folding.findUniqueId(rootNode.children, queryResult.uniqueId);
                    // If he have no parent or is parent is him self, add it to the root
                    if (queryResult.parentResult == null || queryResult.parentResult.uniqueId == queryResult.uniqueId) {
                        // Add it only if he do not exist
                        if (resultNode == null) {
                            resultNode = {
                                result: queryResult,
                                score: i,
                                children: []
                            };
                            rootNode.children.push(resultNode);
                            resultNode.parent = rootNode;
                        }
                    }
                    else {
                        // If the resultNode already exist
                        if (resultNode != null) {
                            resultNode.score = Math.min(i, resultNode.score);
                            // Remove himself from his parent because it will be added in his parent. This allowed to remove duplicate.
                            resultNode.parent.children = Coveo._.without(resultNode.parent.children, resultNode);
                        }
                        else {
                            resultNode = {
                                result: queryResult,
                                score: i,
                                children: []
                            };
                        }
                        var parentResult = Folding.findUniqueId(rootNode.children, queryResult.parentResult.uniqueId);
                        // If the parent does not already exist, create it and add it the root
                        if (parentResult == null) {
                            parentResult = {
                                result: queryResult.parentResult,
                                score: Number.POSITIVE_INFINITY,
                                children: []
                            };
                            rootNode.children.push(parentResult);
                            parentResult.parent = rootNode;
                        }
                        // Add the resultNode to parent
                        parentResult.children.push(resultNode);
                        resultNode.parent = parentResult;
                        var parent = parentResult;
                        while (parent != null && resultNode.score < parent.score) {
                            parent.score = resultNode.score;
                            parent = parent.parent;
                        }
                    }
                });
                var rootResult = Folding.resultNodeToQueryResult(rootNode);
                return rootResult.attachments;
            };
            /**
             * 99.9% of the folding case will be alright with those default functions.
             * Otherwise use the options getResult and getMoreResults
             */
            Folding.defaultGetResult = function (result) {
                var results = result.childResults || [];
                // Add the top result at the top of the list
                results.unshift(result);
                // Empty childResults just to make it more clean
                result.childResults = [];
                // Fold those results
                results = Folding.foldWithParent(results);
                // The first result is the top one
                var topResult = results.shift();
                // All other the results are childResults
                topResult.childResults = results;
                return topResult;
            };
            Folding.defaultGetMoreResults = function (results) {
                // The result are flat, just do the fold
                return Folding.foldWithParent(results);
            };
            Folding.prototype.handleBuildingQuery = function (e, data) {
                Coveo.Assert.exists(data);
                if (!this.disabled) {
                    data.queryBuilder.childField = this.options.childField;
                    data.queryBuilder.parentField = this.options.parentField;
                    data.queryBuilder.filterField = this.options.field;
                    data.queryBuilder.filterFieldRange = this.options.range;
                }
            };
            Folding.prototype.handlepreprocessResults = function (e, data) {
                Coveo.Assert.exists(data);
                Coveo.Assert.check(!data.results._folded, "Two folding component are active at the same time for the same tab. Can't process result !");
                data.results._folded = true;
                var queryResults = data.results;
                var getResult = this.options.getResult || Folding.defaultGetResult;
                queryResults.results = Coveo._.map(queryResults.results, getResult);
                this.addLoadMoreHandler(queryResults.results, data.query);
            };
            Folding.prototype.addLoadMoreHandler = function (results, originalQuery) {
                var _this = this;
                return Coveo._.map(results, function (result) {
                    if (_this.options.enableExpand && !Coveo.Utils.isNullOrUndefined(result.raw[_this.options.field.substr(1)])) {
                        result.moreResults = function () {
                            return _this.moreResults(result, originalQuery);
                        };
                    }
                    return result;
                });
            };
            Folding.prototype.moreResults = function (result, originalQuery) {
                var _this = this;
                var deferred = Coveo.$.Deferred();
                var query = new Ui.QueryBuilder();
                query.numberOfResults = this.options.maximumExpandedResults;
                var fieldValue = result.raw[this.options.field.substr(1)];
                if (Coveo.Utils.isNonEmptyString(fieldValue)) {
                    query.advancedExpression.addFieldExpression(this.options.field, '=', [fieldValue]);
                }
                if (Coveo.Utils.isNonEmptyString(originalQuery.q)) {
                    // We add keywords to get the highlight and we add @sysuri to get all results
                    query.expression.add('(' + originalQuery.q + ') OR @sysuri');
                }
                if (Coveo.Utils.isNonEmptyString(this.options.expandExpression)) {
                    query.constantExpression.add(this.options.expandExpression);
                }
                if (this.options.parentField != null) {
                    query.parentField = this.options.parentField;
                }
                if (this.options.childField != null) {
                    query.childField = this.options.childField;
                }
                if (this.options.rearrange) {
                    this.options.rearrange.putInQueryBuilder(query);
                }
                else {
                    query.sortCriteria = originalQuery.sortCriteria;
                    query.sortField = originalQuery.sortField;
                }
                var builtQuery = query.build();
                this.queryController.getEndpoint().search(builtQuery).done(function (results) {
                    Coveo.QueryUtils.setIndexAndUidOnQueryResults(builtQuery, results, result.queryUid);
                    Coveo.QueryUtils.setStateObjectOnQueryResults(_this.queryStateModel.get(), results);
                    _this.handlePreprocessMoreResults(results);
                    deferred.resolve(results.results);
                });
                return deferred;
            };
            Folding.prototype.handlePreprocessMoreResults = function (queryResults) {
                var getResults = this.options.getMoreResults || Folding.defaultGetMoreResults;
                queryResults.results = getResults(queryResults.results);
            };
            Folding.ID = 'Folding';
            Folding.options = {
                field: Ui.ComponentOptions.buildFieldOption({ required: true }),
                childField: Ui.ComponentOptions.buildFieldOption({ defaultValue: "@systopparentid" }),
                parentField: Ui.ComponentOptions.buildFieldOption({ defaultValue: "@syscontainsattachment" }),
                range: Ui.ComponentOptions.buildNumberOption({ defaultValue: 2 }),
                rearrange: Ui.ComponentOptions.buildCustomOption(function (value) { return Coveo.Utils.isNonEmptyString(value) ? Ui.SortCriteria.parse(value) : null; }),
                directChildField: Ui.ComponentOptions.buildFieldOption({ defaultValue: "@sysisattachment" }),
                directParentField: Ui.ComponentOptions.buildFieldOption({ defaultValue: "@syscontainsattachment" }),
                enableExpand: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                expandExpression: Ui.ComponentOptions.buildStringOption(),
                maximumExpandedResults: Ui.ComponentOptions.buildNumberOption({ defaultValue: 100 })
            };
            return Folding;
        })(Ui.Component);
        Ui.Folding = Folding;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(Folding);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var HiddenQuery = (function (_super) {
            __extends(HiddenQuery, _super);
            function HiddenQuery(element, options, bindings) {
                _super.call(this, element, HiddenQuery.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, HiddenQuery, options);
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.buildingQuery, Coveo.$.proxy(this.handleBuildingQuery, this));
                Coveo.$(this.root).on(this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + Coveo.Models.QueryStateModel.attributesEnum.hq), Coveo.$.proxy(this.handleUpdateUi, this));
            }
            HiddenQuery.prototype.handleBuildingQuery = function (e, data) {
                Coveo.Assert.exists(data);
                var hiddenQuery = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.hq);
                if (Coveo.Utils.isNonEmptyString(hiddenQuery)) {
                    data.queryBuilder.advancedExpression.add(hiddenQuery);
                }
                else {
                    Coveo.$(this.element).hide();
                }
            };
            HiddenQuery.prototype.handleUpdateUi = function (e, data) {
                Coveo.Assert.exists(data);
                var hq = data.value;
                var hd = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.hd);
                if (Coveo.Utils.isNonEmptyString(hq)) {
                    this.updatePanel(hd);
                    Coveo.$(this.element).show();
                }
                else {
                    Coveo.$(this.element).hide();
                }
            };
            HiddenQuery.prototype.updatePanel = function (descriptionHtml) {
                var _this = this;
                Coveo.$(this.element).empty();
                var description = Coveo.$("<span></span>").text(descriptionHtml);
                var removeLink = Coveo.$('<a/>').attr("href", "#").text(Ui.l("Remove")).addClass('coveo-remove').fastClick(function () {
                    _this.usageAnalytics.isContextual = false;
                    _this.clearHiddenQuery();
                });
                this.usageAnalytics.isContextual = true;
                Coveo.$(this.element).append(description, removeLink);
            };
            HiddenQuery.prototype.clearHiddenQuery = function () {
                var _this = this;
                var hiddenDescriptionRemoved = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.hd);
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.hd, "");
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.hq, "");
                this.queryController.deferExecuteQuery({ beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.contextRemove, { contextName: hiddenDescriptionRemoved }); } });
            };
            HiddenQuery.ID = 'HiddenQuery';
            HiddenQuery.options = {};
            return HiddenQuery;
        })(Ui.Component);
        Ui.HiddenQuery = HiddenQuery;
        Ui.CoveoJQuery.registerAutoCreateComponent(HiddenQuery);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Controllers;
    (function (Controllers) {
        var HierarchicalFacetQueryController = (function (_super) {
            __extends(HierarchicalFacetQueryController, _super);
            function HierarchicalFacetQueryController(facet) {
                var _this = this;
                _super.call(this, facet);
                this.facet = facet;
                Coveo.$(this.facet.root).on(Coveo.Events.QueryEvents.querySuccess, function (e, args) {
                    if (_this.lastGroupByIndexForCountOf != undefined && _this.facet.options.useAnd) {
                        _this.lastGroupByForCountOf = args.results.groupByResults[_this.lastGroupByIndexForCountOf];
                    }
                });
                Coveo.$(this.facet.root).on(Coveo.Events.QueryEvents.buildingQuery, function () {
                    _this.lastGroupByIndexForCountOf = undefined;
                });
            }
            HierarchicalFacetQueryController.prototype.putGroupByIntoQueryBuilder = function (queryBuilder) {
                _super.prototype.putGroupByIntoQueryBuilder.call(this, queryBuilder);
                var groupBy = _super.prototype._createBasicGroupByRequest.call(this);
                groupBy.queryOverride = "@sysuri";
                this.lastGroupByIndexForCountOf = queryBuilder.groupByRequests.length;
                queryBuilder.groupByRequests.push(groupBy);
            };
            return HierarchicalFacetQueryController;
        })(Controllers.FacetQueryController);
        Controllers.HierarchicalFacetQueryController = HierarchicalFacetQueryController;
    })(Controllers = Coveo.Controllers || (Coveo.Controllers = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var HierarchicalFacetValueElement = (function (_super) {
            __extends(HierarchicalFacetValueElement, _super);
            function HierarchicalFacetValueElement(facet, facetValue, keepDisplayedValueNextTime) {
                _super.call(this, facet, facetValue, keepDisplayedValueNextTime);
                this.facet = facet;
                this.facetValue = facetValue;
                this.keepDisplayedValueNextTime = keepDisplayedValueNextTime;
            }
            HierarchicalFacetValueElement.prototype.build = function () {
                var build = _super.prototype.build.call(this);
                build.label.append(build.excludeIcon);
                return build;
            };
            HierarchicalFacetValueElement.prototype.buildXOfYCountText = function (currentCount) {
                var _this = this;
                var controller = this.facet.facetQueryController;
                var groupByValueThatMatchThisElement = Coveo._.find(controller.lastGroupByForCountOf.values, function (value) {
                    return value.value == _this.facetValue.value;
                });
                if (groupByValueThatMatchThisElement) {
                    var formattedCount = Globalize.format(groupByValueThatMatchThisElement.numberOfResults, "n0");
                    if (formattedCount != currentCount) {
                        return currentCount + " " + Ui.l("Of") + " " + formattedCount;
                    }
                    else {
                        return currentCount;
                    }
                }
                else {
                    return currentCount;
                }
            };
            return HierarchicalFacetValueElement;
        })(Ui.FacetValueElement);
        Ui.HierarchicalFacetValueElement = HierarchicalFacetValueElement;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var HierarchicalFacetValuesList = (function (_super) {
            __extends(HierarchicalFacetValuesList, _super);
            function HierarchicalFacetValuesList(facet, facetValueElementKlass) {
                _super.call(this, facet, facetValueElementKlass);
                this.facet = facet;
                this.facetValueElementKlass = facetValueElementKlass;
            }
            HierarchicalFacetValuesList.prototype._getValuesToBuildWith = function () {
                return this.hierarchyFacetValues;
            };
            return HierarchicalFacetValuesList;
        })(Ui.FacetValuesList);
        Ui.HierarchicalFacetValuesList = HierarchicalFacetValuesList;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var OmniboxHierarchicalValueElement = (function (_super) {
            __extends(OmniboxHierarchicalValueElement, _super);
            function OmniboxHierarchicalValueElement(facet, facetValue, eventArg) {
                _super.call(this, facet, facetValue, eventArg);
                this.facet = facet;
                this.facetValue = facetValue;
                this.eventArg = eventArg;
            }
            OmniboxHierarchicalValueElement.prototype._handleSelectValue = function (eventBindings) {
                this.facet.open(this.facetValue);
                _super.prototype._handleSelectValue.call(this, eventBindings);
            };
            OmniboxHierarchicalValueElement.prototype._handleExcludeClick = function (eventBindings) {
                this.facet.open(this.facetValue);
                _super.prototype._handleExcludeClick.call(this, eventBindings);
            };
            return OmniboxHierarchicalValueElement;
        })(Ui.OmniBoxValueElement);
        Ui.OmniboxHierarchicalValueElement = OmniboxHierarchicalValueElement;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var OmniboxHierarchicalValuesList = (function (_super) {
            __extends(OmniboxHierarchicalValuesList, _super);
            function OmniboxHierarchicalValuesList(facet, facetValues, omniboxObject) {
                _super.call(this, facet, facetValues, omniboxObject, Ui.OmniboxHierarchicalValueElement);
                this.facet = facet;
                this.facetValues = facetValues;
                this.omniboxObject = omniboxObject;
            }
            return OmniboxHierarchicalValuesList;
        })(Ui.OmniboxValuesList);
        Ui.OmniboxHierarchicalValuesList = OmniboxHierarchicalValuesList;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var HierarchicalBreadcrumbValueElement = (function (_super) {
            __extends(HierarchicalBreadcrumbValueElement, _super);
            function HierarchicalBreadcrumbValueElement(facet, facetValue) {
                _super.call(this, facet, facetValue);
                this.facet = facet;
                this.facetValue = facetValue;
            }
            HierarchicalBreadcrumbValueElement.prototype.build = function () {
                var build = _super.prototype.build.call(this);
                build.addClass('coveo-hierarchical-facet-value');
                build.find('.coveo-caption').html(this.facetValue.value.split(this.facet.options.delimitingCharacter).join("<span class='coveo-hierarchical-breadcrumb-separator'></span>"));
                return build;
            };
            return HierarchicalBreadcrumbValueElement;
        })(Ui.BreadcrumbValueElement);
        Ui.HierarchicalBreadcrumbValueElement = HierarchicalBreadcrumbValueElement;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var HierarchicalBreadcrumbValuesList = (function (_super) {
            __extends(HierarchicalBreadcrumbValuesList, _super);
            function HierarchicalBreadcrumbValuesList(facet, facetValues, valueHierarchy) {
                _super.call(this, facet, facetValues, Ui.HierarchicalBreadcrumbValueElement);
                this.facet = facet;
                this.facetValues = facetValues;
                this.valueHierarchy = valueHierarchy;
            }
            return HierarchicalBreadcrumbValuesList;
        })(Ui.BreadcrumbValueList);
        Ui.HierarchicalBreadcrumbValuesList = HierarchicalBreadcrumbValuesList;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var HierarchicalFacetSearchValueElement = (function (_super) {
            __extends(HierarchicalFacetSearchValueElement, _super);
            function HierarchicalFacetSearchValueElement(facet, facetValue, keepDisplayedValueNextTime) {
                _super.call(this, facet, facetValue, keepDisplayedValueNextTime);
                this.facet = facet;
                this.facetValue = facetValue;
                this.keepDisplayedValueNextTime = keepDisplayedValueNextTime;
            }
            HierarchicalFacetSearchValueElement.prototype._handleSelectValue = function (eventBindings) {
                this.facet.open(this.facetValue);
                _super.prototype._handleSelectValue.call(this, eventBindings);
            };
            HierarchicalFacetSearchValueElement.prototype._handleExcludeClick = function (eventBindings) {
                this.facet.open(this.facetValue);
                _super.prototype._handleExcludeClick.call(this, eventBindings);
            };
            return HierarchicalFacetSearchValueElement;
        })(Ui.FacetValueElement);
        Ui.HierarchicalFacetSearchValueElement = HierarchicalFacetSearchValueElement;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var HierarchicalFacetSearchValuesList = (function (_super) {
            __extends(HierarchicalFacetSearchValuesList, _super);
            function HierarchicalFacetSearchValuesList(facet) {
                _super.call(this, facet, Ui.HierarchicalFacetSearchValueElement);
                this.facet = facet;
            }
            return HierarchicalFacetSearchValuesList;
        })(Ui.FacetSearchValuesList);
        Ui.HierarchicalFacetSearchValuesList = HierarchicalFacetSearchValuesList;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var HierarchicalFacet = (function (_super) {
            __extends(HierarchicalFacet, _super);
            function HierarchicalFacet(element, options, bindings) {
                _super.call(this, element, Coveo.$.extend({}, options, {
                    numberOfValues: 10000,
                    injectionDepth: 10000
                }), bindings, HierarchicalFacet.ID);
                this.element = element;
                this.bindings = bindings;
                this.firstPlacement = true;
                this.options = Ui.ComponentOptions.initComponentOptions(element, HierarchicalFacet, this.options);
                this.numberOfValuesToShow = this.originalNumberOfValuesToShow = (options.numberOfValues || 5);
                this.logger.info("Hierarchy facet : Set number of values very high in order to build hierarchy", this.options.numberOfValues, this);
            }
            HierarchicalFacet.prototype.selectValue = function (value) {
                this.ensureDom();
                this.ensureValueHierarchyExists([value]);
                var valueHierarchy = this.getValueFromHierarchy(value);
                if (!this.options.useAnd) {
                    this.selectChilds(valueHierarchy, valueHierarchy.childs);
                }
                this.flagParentForSelection(valueHierarchy);
                _super.prototype.selectValue.call(this, value);
            };
            HierarchicalFacet.prototype.selectMultipleValues = function (values) {
                var _this = this;
                this.ensureDom();
                this.ensureValueHierarchyExists(values);
                Coveo._.each(values, function (value) {
                    var valueHierarchy = _this.getValueFromHierarchy(value);
                    _this.flagParentForSelection(valueHierarchy);
                    if (!_this.options.useAnd) {
                        Coveo._.each(valueHierarchy.childs, function (child) {
                            _this.logger.info('Selecting facet value', _this.facetValuesList.select(child.facetValue));
                        });
                    }
                });
                _super.prototype.selectMultipleValues.call(this, values);
            };
            HierarchicalFacet.prototype.deselectValue = function (value) {
                var _this = this;
                this.ensureDom();
                this.ensureValueHierarchyExists([value]);
                var valueHierarchy = this.getValueFromHierarchy(value);
                if (!this.options.useAnd) {
                    var hasChilds = valueHierarchy.childs != undefined;
                    if (hasChilds) {
                        var activeChilds = Coveo._.filter(valueHierarchy.childs, function (child) {
                            var valueToCompare = _this.getFacetValueFromHierarchy(child.facetValue);
                            return valueToCompare.selected || valueToCompare.excluded;
                        });
                        if (activeChilds.length == valueHierarchy.childs.length) {
                            this.deselectChilds(valueHierarchy, valueHierarchy.childs);
                        }
                    }
                }
                this.unflagParentForSelection(valueHierarchy);
                _super.prototype.deselectValue.call(this, value);
            };
            HierarchicalFacet.prototype.excludeValue = function (value) {
                this.ensureDom();
                this.ensureValueHierarchyExists([value]);
                var valueHierarchy = this.getValueFromHierarchy(value);
                if (!this.options.useAnd) {
                    this.excludeChilds(valueHierarchy.childs);
                }
                else {
                    this.deselectChilds(valueHierarchy, valueHierarchy.childs);
                    this.close(valueHierarchy);
                }
                this.flagParentForSelection(valueHierarchy);
                _super.prototype.excludeValue.call(this, value);
            };
            HierarchicalFacet.prototype.unexcludeValue = function (value) {
                this.ensureDom();
                this.ensureValueHierarchyExists([value]);
                var valueHierarchy = this.getValueFromHierarchy(value);
                if (!this.options.useAnd) {
                    this.unexcludeChilds(valueHierarchy.childs);
                }
                this.unflagParentForSelection(valueHierarchy);
                _super.prototype.unexcludeValue.call(this, value);
            };
            HierarchicalFacet.prototype.deselectMultipleValues = function (values) {
                var _this = this;
                this.ensureDom();
                this.ensureValueHierarchyExists(values);
                Coveo._.each(values, function (value) {
                    var valueHierarchy = _this.getValueFromHierarchy(value);
                    _this.unflagParentForSelection(valueHierarchy);
                    if (!_this.options.useAnd) {
                        Coveo._.each(valueHierarchy.childs, function (child) {
                            _this.logger.info('Deselecting facet value', _this.facetValuesList.unselect(child.facetValue));
                        });
                    }
                });
                _super.prototype.deselectMultipleValues.call(this, values);
            };
            HierarchicalFacet.prototype.toggleSelectValue = function (value) {
                this.ensureDom();
                this.ensureValueHierarchyExists([value]);
                if (this.getFacetValueFromHierarchy(value).selected == false) {
                    this.selectValue(value);
                }
                else {
                    this.deselectValue(value);
                }
            };
            HierarchicalFacet.prototype.toggleExcludeValue = function (value) {
                this.ensureDom();
                this.ensureValueHierarchyExists([value]);
                if (this.getFacetValueFromHierarchy(value).excluded == false) {
                    this.excludeValue(value);
                }
                else {
                    this.unexcludeValue(value);
                }
            };
            HierarchicalFacet.prototype.getValueCaption = function (facetValue) {
                var stringValue = this.getSelf(facetValue);
                var ret = stringValue;
                if (Coveo.Utils.exists(this.options.valueCaption)) {
                    if (typeof this.options.valueCaption == "object") {
                        ret = this.options.valueCaption[stringValue] || ret;
                    }
                    if (typeof this.options.valueCaption == "function") {
                        ret = this.options.valueCaption.call(this, facetValue);
                    }
                }
                return ret;
            };
            HierarchicalFacet.prototype.getDisplayedValues = function () {
                return Coveo._.first(Coveo._.pluck(this.values.getAll(), "value"), this.numberOfValuesToShow);
            };
            HierarchicalFacet.prototype.updateSort = function (criteria) {
                this.firstPlacement = true;
                _super.prototype.updateSort.call(this, criteria);
            };
            HierarchicalFacet.prototype.open = function (value) {
                var getter = value instanceof Ui.FacetValue ? this.valueHierarchy[value.value] : value;
                this.facetValuesList.get(getter.facetValue).listElement.addClass('coveo-open');
                this.showChilds(getter.childs);
                if (getter.parent != undefined) {
                    this.open(this.valueHierarchy[getter.facetValue.value].parent);
                }
                this.valueHierarchy[getter.facetValue.value].keepOpened = true;
            };
            HierarchicalFacet.prototype.close = function (value) {
                var _this = this;
                var getter = value instanceof Ui.FacetValue ? this.valueHierarchy[value.value] : value;
                this.facetValuesList.get(getter.facetValue).listElement.removeClass('coveo-open');
                this.hideChilds(getter.childs);
                Coveo._.each(getter.childs, function (child) {
                    _this.close(_this.valueHierarchy[child.facetValue.value]);
                });
                this.valueHierarchy[getter.facetValue.value].keepOpened = false;
            };
            HierarchicalFacet.prototype.getLevel = function (value) {
                return value.value.split(this.options.delimitingCharacter).length - 1;
            };
            HierarchicalFacet.prototype.reset = function () {
                Coveo._.each(this.valueHierarchy, function (valueHierarchy) {
                    valueHierarchy.hasChildSelected = false;
                });
                _super.prototype.reset.call(this);
            };
            HierarchicalFacet.prototype._isAnyValueCurrentlyDisplayed = function () {
                return _super.prototype._isAnyValueCurrentlyDisplayed.call(this) && Coveo.$(this.element).find('.coveo-value').length != 0;
            };
            HierarchicalFacet.prototype._initFacetSearch = function () {
                this.facetSearch = new Ui.FacetSearch(this, Ui.HierarchicalFacetSearchValuesList);
                Coveo.$(this.element).append(this.facetSearch.build());
            };
            HierarchicalFacet.prototype._handlePopulateBreadcrumb = function (e, args) {
                Coveo.Assert.exists(args);
                if (this.values.hasSelectedOrExcludedValues()) {
                    var element = new Ui.HierarchicalBreadcrumbValuesList(this, this.values.getSelected().concat(this.values.getExcluded()), this.valueHierarchy).build();
                    args.breadcrumbs.push({
                        element: element.get(0)
                    });
                }
            };
            HierarchicalFacet.prototype._handleOmniBoxWithStaticValue = function (eventArg) {
                var _this = this;
                var regex = eventArg.completeQueryExpression.regex;
                var valueToSearch = eventArg.completeQueryExpression.word;
                var match = Coveo._.first(Coveo._.filter(this.valueHierarchy, function (existingValue) {
                    return regex.test(_this.getValueCaption(existingValue.facetValue));
                }), this.options.numberOfValuesInOmniBox);
                var facetValues = Coveo._.map(match, function (gotAMatch) {
                    return _this.facetValuesList.get(gotAMatch.facetValue).facetValue;
                });
                var element = new Ui.OmniboxHierarchicalValuesList(this, facetValues, eventArg).build();
                eventArg.rows.push({
                    element: (element ? element.get(0) : undefined),
                    zIndex: this._omniboxZIndex
                });
            };
            HierarchicalFacet.prototype._rebuildValueElements = function () {
                this.createValueHierarchy();
                this.setValueListContent();
                _super.prototype._rebuildValueElements.call(this);
                this.buildParentChildRelationship();
                this.crop();
            };
            HierarchicalFacet.prototype._initFacetValuesList = function () {
                this.facetValuesList = new Ui.HierarchicalFacetValuesList(this, Ui.HierarchicalFacetValueElement);
                Coveo.$(this.element).append(this.facetValuesList.build());
            };
            HierarchicalFacet.prototype._updateMoreLess = function () {
                this._moreElement.toggleClass('coveo-active', this.topLevelHierarchy.length > this.numberOfValuesToShow);
                if (this.numberOfValuesToShow > this.originalNumberOfValuesToShow) {
                    this._lessElement.show();
                }
                else {
                    this._lessElement.hide();
                }
            };
            HierarchicalFacet.prototype._handleClickMore = function () {
                this.numberOfValuesToShow += this.originalNumberOfValuesToShow;
                this.numberOfValuesToShow = Math.min(this.numberOfValuesToShow, this.values.size());
                this._rebuildValueElements();
            };
            HierarchicalFacet.prototype._handleClickLess = function () {
                this.numberOfValuesToShow = this.originalNumberOfValuesToShow;
                this._rebuildValueElements();
            };
            HierarchicalFacet.prototype.setValueListContent = function () {
                var _this = this;
                this.facetValuesList.hierarchyFacetValues = Coveo._.map(this.valueHierarchy, function (hierarchy) {
                    if (!_this.values.contains(hierarchy.facetValue.value)) {
                        hierarchy.facetValue.occurrences = 0;
                        _this.values.add(hierarchy.facetValue);
                    }
                    return hierarchy.facetValue;
                });
            };
            /* TODO Remove Comment, will be fix in ts 1.4
             private ensureValueHierarchyExists(facetValues:string[]);
        
             private ensureValueHierarchyExists(facetValues:FacetValue[]);
             */
            HierarchicalFacet.prototype.ensureValueHierarchyExists = function (facetValues) {
                var _this = this;
                if (facetValues[0] && typeof facetValues[0] == "string") {
                    facetValues = Coveo._.map(facetValues, function (value) {
                        return Ui.FacetValue.createFromValue(value);
                    });
                }
                var atLeastOneDoesNotExists = false;
                Coveo._.each(facetValues, function (facetValue) {
                    if (_this.valueHierarchy == undefined || _this.valueHierarchy[facetValue.value] == undefined) {
                        atLeastOneDoesNotExists = true;
                    }
                });
                if (atLeastOneDoesNotExists) {
                    this.createValueHierarchy(facetValues);
                }
            };
            HierarchicalFacet.prototype.crop = function () {
                var _this = this;
                var partition = Coveo._.partition(this.topLevelHierarchy, function (hierarchy) {
                    return hierarchy.facetValue.selected || hierarchy.facetValue.excluded;
                });
                Coveo._.each(Coveo._.last(partition[1], partition[1].length - (this.numberOfValuesToShow - partition[0].length)), function (toHide) {
                    _this.facetValuesList.get(toHide.facetValue).listElement.hide();
                });
            };
            HierarchicalFacet.prototype.placeChildsUnderTheirParent = function (hierarchy, hierarchyElement) {
                var _this = this;
                Coveo._.each(hierarchy.childs.reverse(), function (child) {
                    var childElement = _this.facetValuesList.get(child.facetValue).listElement;
                    if (_this.firstPlacement) {
                        childElement.insertAfter(hierarchyElement);
                    }
                });
                if (hierarchy.keepOpened) {
                    this.open(hierarchy);
                    this.showChilds(hierarchy.childs);
                }
                else {
                    this.hideChilds(hierarchy.childs);
                }
            };
            HierarchicalFacet.prototype.addCssClassToParentAndChilds = function (hierarchy, hierarchyElement) {
                var _this = this;
                hierarchyElement.addClass('coveo-has-childs');
                if (hierarchy.hasChildSelected) {
                    hierarchyElement.addClass("coveo-has-childs-selected");
                }
                var openAndCloseChilds = Coveo.$("<div class='coveo-has-childs-toggle'></div>").fastClick(function () {
                    hierarchyElement.hasClass('coveo-open') ? _this.close(hierarchy) : _this.open(hierarchy);
                });
                hierarchyElement.prepend(openAndCloseChilds);
            };
            HierarchicalFacet.prototype.buildParentChildRelationship = function () {
                var _this = this;
                Coveo._.each(this.valueHierarchy, function (hierarchy) {
                    var hierarchyElement = _this.facetValuesList.get(hierarchy.facetValue).listElement;
                    if (Coveo.Utils.isNonEmptyArray(hierarchy.childs)) {
                        _this.placeChildsUnderTheirParent(hierarchy, hierarchyElement);
                        _this.addCssClassToParentAndChilds(hierarchy, hierarchyElement);
                    }
                    else {
                        hierarchyElement.addClass("coveo-no-childs");
                    }
                    hierarchyElement.css('margin-left', _this.options.marginByLevel * (hierarchy.level - _this.options.levelStart));
                });
                if (this.firstPlacement && !this.firstQuery) {
                    this.firstPlacement = false;
                    this.setOriginalPosition();
                }
                else {
                    Coveo._.each(this.originalPosition, function (hierarchy, position) {
                        var hierarchyElement = _this.facetValuesList.get(hierarchy.facetValue).listElement;
                        hierarchyElement.parent().children().eq(position).after(hierarchyElement);
                    });
                }
            };
            HierarchicalFacet.prototype.setOriginalPosition = function () {
                var _this = this;
                this.originalPosition = [];
                Coveo._.each(this.valueHierarchy, function (hierarchy) {
                    _this.originalPosition[_this.facetValuesList.get(hierarchy.facetValue).listElement.index()] = hierarchy;
                });
            };
            HierarchicalFacet.prototype.createValueHierarchy = function (facetValues) {
                var _this = this;
                if (facetValues === void 0) { facetValues = this.values.getAll(); }
                this.valueHierarchy = this.valueHierarchy ? this.valueHierarchy : {};
                if (!this.flatHierarchy || Coveo._.keys(this.flatHierarchy).length < Coveo._.keys(facetValues).length) {
                    var i = 0;
                    this.flatHierarchy = Coveo._.map(facetValues, function (value) {
                        var parent = _this.getParent(value);
                        var self = value.lookupValue || value.value;
                        return {
                            facetValue: value,
                            level: _this.getLevel(value),
                            parent: parent,
                            self: self
                        };
                    });
                    this.setInHierarchy(this.flatHierarchy);
                    Coveo._.each(this.valueHierarchy, function (valueHierarchy) {
                        if (valueHierarchy.facetValue.selected) {
                            _this.flagParentForSelection(valueHierarchy);
                        }
                    });
                }
                else {
                    Coveo._.each(this.values.getAll(), function (value) {
                        if (_this.valueHierarchy[value.value]) {
                            _this.valueHierarchy[value.value].facetValue = value;
                        }
                    });
                }
            };
            HierarchicalFacet.prototype.setInHierarchy = function (flatHierarchy) {
                var _this = this;
                var correctLevels = Coveo._.filter(flatHierarchy, function (hierarchy) {
                    var isCorrectMinimumLevel = _this.options.levelStart == undefined || hierarchy.level >= _this.options.levelStart;
                    var isCorrectMaximumLevel = _this.options.levelEnd == undefined || hierarchy.level < _this.options.levelEnd;
                    return isCorrectMinimumLevel && isCorrectMaximumLevel;
                });
                Coveo._.each(correctLevels, function (hierarchy) {
                    var childs = Coveo._.map(Coveo._.filter(correctLevels, function (possibleChild) {
                        return possibleChild.parent == hierarchy.self;
                    }), function (child) {
                        return {
                            facetValue: child.facetValue,
                            level: child.level,
                            keepOpened: false,
                            hasChildSelected: false
                        };
                    });
                    var parent = Coveo._.find(correctLevels, function (possibleParent) {
                        return possibleParent.self == hierarchy.parent;
                    });
                    _this.valueHierarchy[hierarchy.facetValue.value] = {
                        childs: childs,
                        parent: parent == undefined ? undefined : {
                            facetValue: parent.facetValue,
                            level: parent.level,
                            keepOpened: false,
                            hasChildSelected: false
                        },
                        facetValue: hierarchy.facetValue,
                        level: hierarchy.level,
                        keepOpened: false,
                        hasChildSelected: false
                    };
                });
                var topLevel = this.options.levelStart || 0;
                this.topLevelHierarchy = Coveo._.filter(this.valueHierarchy, function (hierarchy) {
                    return hierarchy.level == topLevel;
                });
            };
            HierarchicalFacet.prototype.getParent = function (value) {
                var lastIndexOfDelimiting = this.getLookupOrValue(value).lastIndexOf(this.options.delimitingCharacter);
                if (lastIndexOfDelimiting != -1) {
                    return this.getLookupOrValue(value).substring(0, lastIndexOfDelimiting);
                }
                return undefined;
            };
            HierarchicalFacet.prototype.getSelf = function (value) {
                var parent = this.getParent(value);
                if (parent == undefined) {
                    return this.getLookupOrValue(value);
                }
                else {
                    var indexOfParent = this.getLookupOrValue(value).indexOf(parent);
                    return this.getLookupOrValue(value).substring(indexOfParent + parent.length + 1);
                }
            };
            HierarchicalFacet.prototype.showFacetValue = function (value) {
                this.facetValuesList.get(value.facetValue).listElement.removeClass('coveo-inactive');
            };
            HierarchicalFacet.prototype.hideFacetValue = function (value) {
                this.facetValuesList.get(value.facetValue).listElement.addClass('coveo-inactive');
            };
            HierarchicalFacet.prototype.hideChilds = function (children) {
                var _this = this;
                Coveo._.each(children, function (child) {
                    _this.hideFacetValue(child);
                });
            };
            HierarchicalFacet.prototype.showChilds = function (children) {
                var _this = this;
                Coveo._.each(children, function (child) {
                    _this.showFacetValue(child);
                });
            };
            HierarchicalFacet.prototype.hideParent = function (parent) {
                if (parent) {
                    this.hideFacetValue(parent);
                }
            };
            HierarchicalFacet.prototype.showParent = function (parent) {
                if (parent) {
                    this.showFacetValue(parent);
                }
            };
            HierarchicalFacet.prototype.selectChilds = function (parent, children) {
                this.flagParentForSelection(parent);
                this.selectMultipleValues(Coveo._.map(children, function (child) {
                    return child.facetValue;
                }));
            };
            HierarchicalFacet.prototype.deselectChilds = function (parent, children) {
                parent.hasChildSelected = false;
                this.deselectMultipleValues(Coveo._.map(children, function (child) {
                    return child.facetValue;
                }));
            };
            HierarchicalFacet.prototype.excludeChilds = function (children) {
                this.excludeMultipleValues(Coveo._.map(children, function (child) {
                    return child.facetValue;
                }));
            };
            HierarchicalFacet.prototype.unexcludeChilds = function (children) {
                this.unexcludeMultipleValues(Coveo._.map(children, function (child) {
                    return child.facetValue;
                }));
            };
            HierarchicalFacet.prototype.selectParent = function (parent) {
                if (parent != undefined) {
                    this.selectValue(parent.facetValue);
                    if (parent.parent) {
                        this.selectParent(this.valueHierarchy[parent.parent.facetValue.value]);
                    }
                }
            };
            HierarchicalFacet.prototype.deselectParent = function (parent) {
                if (parent != undefined) {
                    this.deselectValue(parent.facetValue);
                }
            };
            HierarchicalFacet.prototype.flagParentForSelection = function (valueHierarchy) {
                var parent = valueHierarchy.parent;
                while (parent) {
                    var parentInHierarchy = this.valueHierarchy[parent.facetValue.value];
                    parentInHierarchy.hasChildSelected = true;
                    parent = parentInHierarchy.parent;
                }
            };
            HierarchicalFacet.prototype.unflagParentForSelection = function (valueHierarchy) {
                var _this = this;
                var parent = valueHierarchy.parent;
                var current = valueHierarchy;
                while (parent) {
                    var parentInHierarchy = this.valueHierarchy[parent.facetValue.value];
                    var otherSelectedChilds = Coveo._.filter(parentInHierarchy.childs, function (child) {
                        var childInHierarchy = _this.valueHierarchy[child.facetValue.value];
                        return childInHierarchy.facetValue.value != valueHierarchy.facetValue.value && (childInHierarchy.facetValue.selected || childInHierarchy.facetValue.excluded || childInHierarchy.hasChildSelected);
                    });
                    if (otherSelectedChilds.length == 0) {
                        parentInHierarchy.hasChildSelected = false;
                    }
                    parent = parentInHierarchy.parent;
                }
            };
            /* TODO Remove Comment, will be fix in ts 1.4
             private getValueFromHierarchy(value:FacetValue):ValueHierarchy;
             private getValueFromHierarchy(value:string):ValueHierarchy;
             */
            HierarchicalFacet.prototype.getValueFromHierarchy = function (value) {
                var getter = value instanceof Ui.FacetValue ? value.value : value;
                return this.valueHierarchy[getter];
            };
            /* TODO Remove Comment, will be fix in ts 1.4
             private getFacetValueFromHierarchy(value:FacetValue):FacetValue;
             private getFacetValueFromHierarchy(value:string):FacetValue;
             */
            HierarchicalFacet.prototype.getFacetValueFromHierarchy = function (value) {
                return this.getValueFromHierarchy(value).facetValue;
            };
            HierarchicalFacet.prototype.getLookupOrValue = function (value) {
                return value.lookupValue || value.value;
            };
            HierarchicalFacet.ID = "HierarchicalFacet";
            HierarchicalFacet.options = {
                delimitingCharacter: Ui.ComponentOptions.buildStringOption({ defaultValue: '|' }),
                levelStart: Ui.ComponentOptions.buildNumberOption({ defaultValue: 0 }),
                levelEnd: Ui.ComponentOptions.buildNumberOption(),
                marginByLevel: Ui.ComponentOptions.buildNumberOption({ defaultValue: 10 })
            };
            return HierarchicalFacet;
        })(Ui.Facet);
        Ui.HierarchicalFacet = HierarchicalFacet;
        Ui.CoveoJQuery.registerAutoCreateComponent(HierarchicalFacet);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var DefaultResultTemplate = (function () {
            function DefaultResultTemplate() {
                this.logger = new Coveo.Logger(this);
            }
            DefaultResultTemplate.prototype.instantiateToString = function (queryResult) {
                Coveo.Assert.exists(queryResult);
                var elem = this.instantiateToElement(queryResult);
                return Coveo.$(elem).html();
            };
            DefaultResultTemplate.prototype.instantiateToElement = function (queryResult) {
                Coveo.Assert.exists(queryResult);
                var result = Coveo.$('<div></div>');
                var header = Coveo.$('<div class="coveo-header"></div>').appendTo(result);
                Coveo.$('<a class="coveo-title"></a>').text(queryResult.title).attr('href', queryResult.clickUri).appendTo(header);
                var element = result.get(0);
                this.logger.trace('Instantiated default result template', element);
                return element;
            };
            return DefaultResultTemplate;
        })();
        Ui.DefaultResultTemplate = DefaultResultTemplate;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var HTMLUtils = (function () {
        function HTMLUtils() {
        }
        HTMLUtils.buildAttributeString = function (options) {
            var ret = [];
            Coveo._.each(options, function (val, key, obj) {
                if (val != undefined) {
                    ret.push(key + "=" + JSON.stringify(val.toString()));
                }
            });
            return ret.join(" ");
        };
        return HTMLUtils;
    })();
    Coveo.HTMLUtils = HTMLUtils;
    var AnchorUtils = (function () {
        function AnchorUtils() {
        }
        AnchorUtils.buildAnchor = function (href, options) {
            var text;
            if (!options || !options.text) {
                text = href;
            }
            else {
                text = options.text;
                options.text = undefined;
            }
            return "<a href='" + href + "'" + HTMLUtils.buildAttributeString(options) + ">" + text + "</a>";
        };
        return AnchorUtils;
    })();
    Coveo.AnchorUtils = AnchorUtils;
    var ImageUtils = (function () {
        function ImageUtils() {
        }
        ImageUtils.buildImage = function (src, options) {
            var ret = "<img ";
            ret += src ? "src='" + src + "' " : "";
            ret += HTMLUtils.buildAttributeString(options) + "/>";
            return ret;
        };
        ImageUtils.selectImageFromResult = function (result) {
            return Coveo.$("img[data-coveo-sys-uri-hash='" + result.raw["sysurihash"] + "']");
        };
        ImageUtils.buildImageWithDirectSrcAttribute = function (endpoint, result) {
            var image = new Image();
            var dataStreamUri = endpoint.getViewAsDatastreamUri(result.uniqueId, '$Thumbnail$', { contentType: "image/png" });
            image.onload = function () {
                ImageUtils.selectImageFromResult(result).attr('src', dataStreamUri);
            };
            image.src = dataStreamUri;
        };
        ImageUtils.buildImageWithBase64SrcAttribute = function (endpoint, result) {
            endpoint.getRawDataStream(result.uniqueId, '$Thumbnail$').done(function (response) {
                var rawBinary = String.fromCharCode.apply(null, new Uint8Array(response));
                ImageUtils.selectImageFromResult(result).attr("src", "data:image/png;base64, " + btoa(rawBinary));
            }).fail(function (response) {
                ImageUtils.selectImageFromResult(result).remove();
            });
        };
        ImageUtils.buildImageFromResult = function (result, endpoint, options) {
            var options = options ? options : {};
            var img = ImageUtils.buildImage(undefined, Coveo.$.extend(options, { "data-coveo-sys-uri-hash": result.raw["sysurihash"] }));
            if (endpoint.isJsonp() || Coveo.DeviceUtils.isIE8or9()) {
                //For jsonp and IE8-9 (XDomain) we can't GET/POST for binary data. We are limited to only setting the src attribute directly on the img.
                ImageUtils.buildImageWithDirectSrcAttribute(endpoint, result);
            }
            else {
                //Base 64 img allows us to GET/POST the image as raw binary, so that we can also pass the credential of the user
                //Useful for phonegap.
                ImageUtils.buildImageWithBase64SrcAttribute(endpoint, result);
            }
            return img;
        };
        return ImageUtils;
    })();
    Coveo.ImageUtils = ImageUtils;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var EmailUtils = (function () {
        function EmailUtils() {
        }
        EmailUtils.splitSemicolonSeparatedListOfEmailAddresses = function (addresses) {
            var addressesAsList = addresses.split(/\s*;\s*/);
            return Coveo._.filter(addressesAsList, function (s) {
                return Coveo.Utils.exists(s) && Coveo.Utils.isNonEmptyString(Coveo.Utils.trim(s));
            });
        };
        EmailUtils.emailAddressesToHyperlinks = function (addresses, companyDomain, me, lengthLimit, truncateName) {
            if (lengthLimit === void 0) { lengthLimit = 2; }
            if (truncateName === void 0) { truncateName = false; }
            addresses = Coveo._.filter(addresses, function (s) {
                return Coveo.Utils.exists(s) && Coveo.Utils.isNonEmptyString(Coveo.Utils.trim(s));
            });
            var hyperlinks = Coveo._.map(addresses, function (item) {
                var emailArray = EmailUtils.parseEmail(item);
                var email = emailArray[1];
                var name = emailArray[0];
                if (Coveo.Utils.exists(me) && email == me) {
                    name = Coveo.Ui.l("Me");
                }
                if (truncateName) {
                    var split = name.split(" ");
                    if (!Coveo.Utils.isNullOrUndefined(split[1])) {
                        name = split[0] + " " + split[1].substring(0, 1) + ".";
                    }
                }
                var domainIndex = email.indexOf('@') >= 0 ? email.indexOf('@') + 1 : 0;
                var domain = email.substr(domainIndex);
                if (Coveo.Utils.exists(companyDomain) && domain != companyDomain) {
                    name += ' (' + domain + ')';
                }
                return '<a title="' + item + '" href="mailto:' + email + '">' + name + '</a>';
            });
            var excess = hyperlinks.length - lengthLimit;
            var andOthers = excess > 0 ? EmailUtils.buildEmailAddressesAndOthers(Coveo._.last(hyperlinks, excess)) : "";
            return Coveo._.first(hyperlinks, lengthLimit).join(", ") + andOthers;
        };
        EmailUtils.buildEmailAddressesAndOthers = function (excessHyperLinks) {
            return "<span class='coveo-emails-excess-collapsed coveo-active' onclick='Coveo.Ui.TemplateHelpers.getHelper(\"excessEmailToggle\")(this);'> " + Coveo.Ui.l("AndOthers", excessHyperLinks.length.toString(), excessHyperLinks.length) + "</span>" + "<span class='coveo-emails-excess-expanded'> , " + excessHyperLinks.join(" , ") + "</span>";
        };
        EmailUtils.parseEmail = function (email) {
            var email, name;
            var match = email.match(/^\s*(.*)\s+<(.*)>$/);
            if (match != null) {
                name = match[1];
                if (/^".*"|'.*'$/.test(name)) {
                    name = name.substr(1, name.length - 2);
                }
                email = match[2];
            }
            else {
                name = email;
                email = email;
            }
            return [name, email];
        };
        return EmailUtils;
    })();
    Coveo.EmailUtils = EmailUtils;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var DefaultCurrencyToStringOptions = (function (_super) {
        __extends(DefaultCurrencyToStringOptions, _super);
        function DefaultCurrencyToStringOptions() {
            _super.apply(this, arguments);
            this.decimals = 0;
        }
        return DefaultCurrencyToStringOptions;
    })(Coveo.Options);
    var CurrencyUtils = (function () {
        function CurrencyUtils() {
        }
        CurrencyUtils.currencyToString = function (value, options) {
            if (Coveo.Utils.isNullOrUndefined(value)) {
                return '';
            }
            Coveo.Assert.isNumber(value);
            options = new DefaultCurrencyToStringOptions().merge(options);
            var currency = Globalize.culture().numberFormat.currency;
            var backup = currency.symbol;
            if (Coveo.Utils.isNonEmptyString(options.symbol)) {
                currency.symbol = options.symbol;
            }
            var str = Globalize.format(value, 'c' + options.decimals.toString());
            currency.symbol = backup;
            return str;
        };
        return CurrencyUtils;
    })();
    Coveo.CurrencyUtils = CurrencyUtils;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Hole = (function () {
        function Hole(begin, size, replacementSize) {
            this.begin = begin;
            this.size = size;
            this.replacementSize = replacementSize;
        }
        return Hole;
    })();
    Coveo.Hole = Hole;
    var StringAndHoles = (function () {
        function StringAndHoles() {
        }
        StringAndHoles.replace = function (str, find, replace) {
            var strAndHoles = new StringAndHoles();
            if (Coveo.Utils.isNullOrEmptyString(str)) {
                return strAndHoles;
            }
            var index = str.lastIndexOf(find);
            if (index == -1) {
                strAndHoles.value = str;
                return strAndHoles;
            }
            var holes = [];
            while (index >= 0) {
                var hole = new Hole(index, find.length, replace.length);
                holes.push(hole);
                str = str.slice(0, index) + replace + str.slice(index + find.length);
                index = str.lastIndexOf(find);
            }
            strAndHoles.holes = holes;
            strAndHoles.value = str;
            return strAndHoles;
        };
        StringAndHoles.shortenPath = function (uriOrig, length) {
            var uri = uriOrig;
            var strAndHoles = new StringAndHoles();
            if (Coveo.Utils.isNullOrEmptyString(uri) || (uri.length <= length)) {
                strAndHoles.value = uri;
                return strAndHoles;
            }
            var holes = [];
            var first = -1;
            if (Coveo.Utils.stringStartsWith(uri, "\\\\")) {
                first = uri.indexOf('\\', first + 2);
            }
            else {
                first = uri.indexOf('\\');
            }
            if (first != -1) {
                var removed = 0;
                var next = uri.indexOf('\\', first + 1);
                while (next != -1 && uri.length - removed + StringAndHoles.SHORTEN_END.length > length) {
                    removed = next - first - 1;
                    next = uri.indexOf('\\', next + 1);
                }
                if (removed > 0) {
                    uri = uri.slice(0, first + 1) + StringAndHoles.SHORTEN_END + uri.slice(removed);
                    var hole = new Hole(first + 1, removed - StringAndHoles.SHORTEN_END.length, StringAndHoles.SHORTEN_END.length);
                    holes.push(hole);
                }
            }
            if (uri.length > length) {
                var over = uri.length - length + StringAndHoles.SHORTEN_END.length;
                var start = uri.length - over;
                uri = uri.slice(0, start) + StringAndHoles.SHORTEN_END;
                var hole = new Hole(start, over, StringAndHoles.SHORTEN_END.length);
                holes.push(hole);
            }
            strAndHoles.holes = holes;
            strAndHoles.value = uri;
            return strAndHoles;
        };
        StringAndHoles.shortenString = function (toShortenOrig, length, toAppend) {
            var toShorten = toShortenOrig;
            toAppend = Coveo.Utils.toNotNullString(toAppend);
            var strAndHoles = new StringAndHoles();
            if (Coveo.Utils.isNullOrEmptyString(toShorten) || length <= toAppend.length) {
                strAndHoles.value = toShorten;
                return strAndHoles;
            }
            if (toShorten.length <= length) {
                strAndHoles.value = toShorten;
                return strAndHoles;
            }
            var str = toShorten;
            length = length - toAppend.length;
            str = str.slice(0, length);
            if (toShorten.charAt(str.length) != ' ') {
                var pos = str.lastIndexOf(' ');
                if (pos != -1 && str.length - pos < StringAndHoles.WORD_SHORTER) {
                    str = str.slice(0, pos);
                }
            }
            var holes = [];
            holes[0] = new Hole(str.length, toShorten.length - str.length, toAppend.length);
            str += toAppend;
            strAndHoles.value = str;
            strAndHoles.holes = holes;
            return strAndHoles;
        };
        StringAndHoles.shortenUri = function (uri, length) {
            var strAndHoles = new StringAndHoles();
            if (Coveo.Utils.isNullOrEmptyString(uri) || (uri.length <= length)) {
                strAndHoles.value = uri;
                return strAndHoles;
            }
            var holes = [];
            var first = uri.indexOf("//");
            if (first != -1) {
                first = uri.indexOf('/', first + 2);
            }
            if (first != -1) {
                var removed = 0;
                var next = uri.indexOf('/', first + 1);
                while (next != -1 && uri.length - removed + StringAndHoles.SHORTEN_END.length > length) {
                    removed = next - first - 1;
                    next = uri.indexOf('/', next + 1);
                }
                if (removed > 0) {
                    uri = uri.slice(0, first + 1) + StringAndHoles.SHORTEN_END + uri.slice(first + 1 + removed);
                    var hole = new Hole(first + 1, removed, StringAndHoles.SHORTEN_END.length);
                    holes.push(hole);
                }
            }
            if (uri.length > length) {
                var over = uri.length - length + StringAndHoles.SHORTEN_END.length;
                var start = uri.length - over;
                uri = uri.slice(0, start) + StringAndHoles.SHORTEN_END;
                var hole = new Hole(start, over, StringAndHoles.SHORTEN_END.length);
                holes.push(hole);
            }
            strAndHoles.holes = holes;
            strAndHoles.value = uri;
            return strAndHoles;
        };
        StringAndHoles.SHORTEN_END = "...";
        StringAndHoles.WORD_SHORTER = 10;
        return StringAndHoles;
    })();
    Coveo.StringAndHoles = StringAndHoles;
    var HighlightUtils = (function () {
        function HighlightUtils() {
        }
        HighlightUtils.highlightString = function (content, highlights, holes, cssClass) {
            return HighlightUtils.buildHighlightedString(content, highlights, holes, cssClass);
        };
        HighlightUtils.buildHighlightedString = function (content, highlights, holes, cssClass) {
            Coveo.Assert.isNotUndefined(highlights);
            Coveo.Assert.isNotNull(highlights);
            Coveo.Assert.isNonEmptyString(cssClass);
            if (Coveo.Utils.isNullOrEmptyString(content)) {
                return content;
            }
            var last = 0;
            var maxIndex = content.length;
            var highlighted = "";
            for (var i = 0; i < highlights.length; i++) {
                var highlight = highlights[i];
                var start = highlight.offset;
                var end = start + highlight.length;
                if (holes != null) {
                    var skip = false;
                    for (var j = 0; j < holes.length; j++) {
                        var hole = holes[j];
                        var holeBegin = hole.begin;
                        var holeEnd = holeBegin + hole.size;
                        if (start < holeBegin && end >= holeBegin && end < holeEnd) {
                            end = holeBegin;
                        }
                        else if (start >= holeBegin && end < holeEnd) {
                            skip = true;
                            break;
                        }
                        else if (start >= holeBegin && start < holeEnd && end >= holeEnd) {
                            start = holeBegin + hole.replacementSize;
                            end -= hole.size - hole.replacementSize;
                        }
                        else if (start < holeBegin && end >= holeEnd) {
                            end -= hole.size - hole.replacementSize;
                        }
                        else if (start >= holeEnd) {
                            var offset = hole.size - hole.replacementSize;
                            start -= offset;
                            end -= offset;
                        }
                    }
                    if (skip || start == end) {
                        continue;
                    }
                }
                if (end > maxIndex) {
                    break;
                }
                highlighted += Coveo._.escape(content.slice(last, start));
                highlighted += "<span class='" + cssClass + "'";
                if (highlight.dataHighlightGroup) {
                    highlighted += " data-highlight-group='" + highlight.dataHighlightGroup.toString() + "'";
                }
                if (highlight.dataHighlightGroupTerm) {
                    highlighted += " data-highlight-group-term='" + highlight.dataHighlightGroupTerm + "'";
                }
                highlighted += " >";
                highlighted += Coveo._.escape(content.slice(start, end));
                highlighted += "</span>";
                last = end;
            }
            if (last != maxIndex) {
                highlighted += Coveo._.escape(content.slice(last));
            }
            return highlighted;
        };
        return HighlightUtils;
    })();
    Coveo.HighlightUtils = HighlightUtils;
    var hightlightTemplate = Coveo._.template('<% var i = 0; var lowercaseValue = value.toLowerCase(); while(i < value.length) { %>' + '<% var index = lowercaseValue.indexOf(search, i); if(index != -1) { %>' + '<% if(i != index){ %> <span><%- value.substr(i, index) %></span><% } %>' + '<span class="coveo-hightlight"><%- value.substr(index, search.length) %></span>' + '<% i = index + search.length %></span>' + '<% } else { %>' + '<span><%- value.substr(i) %></span>' + '<% i = value.length; %>' + '<% } %>' + '<% } %>');
    function highlightString(value, search) {
        if (Coveo._.isEmpty(search))
            return value;
        return hightlightTemplate({ value: value, search: search.toLowerCase() });
    }
    Coveo.highlightString = highlightString;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var DefaultStreamHighlightOptions = (function (_super) {
        __extends(DefaultStreamHighlightOptions, _super);
        function DefaultStreamHighlightOptions(cssClass, shorten, regexFlags) {
            if (cssClass === void 0) { cssClass = "coveo-highlight"; }
            if (shorten === void 0) { shorten = 0; }
            if (regexFlags === void 0) { regexFlags = "gi"; }
            _super.call(this);
            this.cssClass = cssClass;
            this.shorten = shorten;
            this.regexFlags = regexFlags;
        }
        return DefaultStreamHighlightOptions;
    })(Coveo.Options);
    function highlightStreamHTML(stream, termsToHighlight, phrasesToHighlight, options) {
        var opts = new DefaultStreamHighlightOptions().merge(options);
        var container = createStreamHTMLContainer(stream);
        container.find("*").each(function (i, elem) {
            var text = Coveo.$(elem).text();
            var phrasesToHighlightPermutation = permutationOfPhrasesToHighlight(phrasesToHighlight);
            var merged = Coveo._.extend(termsToHighlight || {}, phrasesToHighlightPermutation || {});
            Coveo.$(elem).html(Coveo.HighlightUtils.highlightString(text, getRestHighlightsForAllTerms(text, merged, opts), [], opts.cssClass));
        });
        return container.html();
    }
    Coveo.highlightStreamHTML = highlightStreamHTML;
    function highlightStreamText(stream, termsToHighlight, phrasesToHighlight, options) {
        var opts = new DefaultStreamHighlightOptions().merge(options);
        var phrasesToHighlightPermutation = permutationOfPhrasesToHighlight(phrasesToHighlight);
        var merged = Coveo._.extend(termsToHighlight || {}, phrasesToHighlightPermutation || {});
        return Coveo.HighlightUtils.highlightString(stream, getRestHighlightsForAllTerms(stream, merged, opts), [], opts.cssClass);
    }
    Coveo.highlightStreamText = highlightStreamText;
    function getRestHighlightsForAllTerms(toHighlight, termsToHighlight, opts) {
        var indexes = [];
        var sortedTerms = Coveo._.keys(termsToHighlight).sort(termsSorting);
        Coveo._.each(sortedTerms, function (term) {
            var foundAtLeastOneIndex = false;
            var termsToIterate = Coveo._.compact([term].concat(termsToHighlight[term]).sort(termsSorting));
            Coveo._.each(termsToIterate, function (termToIterate) {
                var indexesFound = Coveo.StringUtils.getHighlights(toHighlight, createRegexWithTerm(termToIterate, opts), term);
                if (indexesFound != undefined && Coveo.Utils.isNonEmptyArray(indexesFound)) {
                    foundAtLeastOneIndex = true;
                    indexes.push(indexesFound);
                }
            });
        });
        return Coveo._.chain(indexes).flatten().compact().uniq(function (highlight) {
            return highlight.offset;
        }).sortBy(function (highlight) {
            return highlight.offset;
        }).map(function (highlight) {
            var keys = Coveo._.keys(termsToHighlight);
            var group = Coveo._.indexOf(keys, highlight.dataHighlightGroupTerm) + 1;
            return Coveo._.extend(highlight, { dataHighlightGroup: group });
        }).value();
    }
    function getPermutationRecursive(combinations, index) {
        var ret = [];
        if (index == combinations.length - 1) {
            Coveo._.each(combinations[index], function (word) {
                ret.push(word);
            });
        }
        else {
            var deeper = getPermutationRecursive(combinations, index + 1);
            Coveo._.each(combinations[index], function (word) {
                Coveo._.each(deeper, function (deeperWord) {
                    ret.push(word + " " + deeperWord);
                });
            });
        }
        return ret;
    }
    function permutationOfPhrasesToHighlight(phrasesToHighlight) {
        return Coveo._.chain(phrasesToHighlight).map(function (phrase) {
            var toMakePermutation = Coveo._.map(phrase, function (expansions, origTerm) {
                return [origTerm].concat(expansions);
            });
            if (Coveo.Utils.isNonEmptyArray(toMakePermutation)) {
                return getPermutationRecursive(toMakePermutation, 0);
            }
            else {
                return [];
            }
        }).flatten().object([]).value();
    }
    function termsSorting(first, second) {
        return first.length - second.length;
    }
    function createStreamHTMLContainer(stream) {
        var container = Coveo.$("<div />");
        container.get(0).innerHTML = stream;
        return container;
    }
    function createRegexWithTerm(term, opts) {
        //This regex might need tweaking : it may be a bit too simplistic and might not cover all corner case
        var termRegex = term.split(" ").join("\\W+");
        return new RegExp("([^a-zA-Z]|^)(" + termRegex + "(?![a-zA-Z]))", opts.regexFlags);
    }
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        Ui.TemplateHelpers.registerTemplateHelper('javascriptEncode', function (value) {
            return Coveo.Utils.exists(value) ? Coveo.StringUtils.javascriptEncode(value) : undefined;
        });
        Ui.TemplateHelpers.registerTemplateHelper('shorten', function (content, length, highlights, cssClass) {
            var strAndHoles = Coveo.StringAndHoles.shortenString(content, length, '...');
            if (Coveo.Utils.exists(highlights)) {
                return Coveo.HighlightUtils.highlightString(strAndHoles.value, highlights, strAndHoles.holes, cssClass || 'highlight');
            }
            else {
                return strAndHoles.value;
            }
        });
        Ui.TemplateHelpers.registerTemplateHelper('shortenPath', function (content, length, highlights, cssClass) {
            var strAndHoles = Coveo.StringAndHoles.shortenPath(content, length);
            if (Coveo.Utils.exists(highlights)) {
                return Coveo.HighlightUtils.highlightString(strAndHoles.value, highlights, strAndHoles.holes, cssClass || 'highlight');
            }
            else {
                return strAndHoles.value;
            }
        });
        Ui.TemplateHelpers.registerTemplateHelper('shortenUri', function (content, length, highlights, cssClass) {
            var strAndHoles = Coveo.StringAndHoles.shortenUri(content, length);
            if (Coveo.Utils.exists(highlights)) {
                return Coveo.HighlightUtils.highlightString(strAndHoles.value, highlights, strAndHoles.holes, cssClass || 'highlight');
            }
            else {
                return strAndHoles.value;
            }
        });
        Ui.TemplateHelpers.registerTemplateHelper('highlight', function (content, highlights, cssClass) {
            if (Coveo.Utils.exists(content)) {
                if (Coveo.Utils.exists(highlights)) {
                    return Coveo.HighlightUtils.highlightString(content, highlights, null, cssClass || 'highlight');
                }
                else {
                    return content;
                }
            }
            else {
                return undefined;
            }
        });
        Ui.TemplateHelpers.registerTemplateHelper('highlightStreamText', function (content, termsToHighlight, phrasesToHighlight, opts) {
            if (termsToHighlight === void 0) { termsToHighlight = resolveQueryResultFromCallStack().termsToHighlight; }
            if (phrasesToHighlight === void 0) { phrasesToHighlight = resolveQueryResultFromCallStack().phrasesToHighlight; }
            if (Coveo.Utils.exists(content)) {
                if (Coveo.Utils.isNonEmptyArray(Coveo._.keys(termsToHighlight)) || Coveo.Utils.isNonEmptyArray(Coveo._.keys(phrasesToHighlight))) {
                    return Coveo.highlightStreamText(content, termsToHighlight, phrasesToHighlight, opts);
                }
                else {
                    return content;
                }
            }
            else {
                return undefined;
            }
        });
        Ui.TemplateHelpers.registerTemplateHelper('highlightStreamHTML', function (content, termsToHighlight, phrasesToHighlight, opts) {
            if (termsToHighlight === void 0) { termsToHighlight = resolveQueryResultFromCallStack().termsToHighlight; }
            if (phrasesToHighlight === void 0) { phrasesToHighlight = resolveQueryResultFromCallStack().phrasesToHighlight; }
            if (Coveo.Utils.exists(content)) {
                if (Coveo.Utils.isNonEmptyArray(termsToHighlight)) {
                    return Coveo.highlightStreamHTML(content, termsToHighlight, phrasesToHighlight, opts);
                }
                else {
                    return content;
                }
            }
            else {
                return undefined;
            }
        });
        Ui.TemplateHelpers.registerTemplateHelper('number', function (value, options) {
            if (Coveo.Utils.exists(value)) {
                if (Coveo._.isString(options)) {
                    return Coveo.StringUtils.htmlEncode(Globalize.format(value, options));
                }
                else {
                    return Coveo.StringUtils.htmlEncode(value.toString());
                }
            }
            else {
                return undefined;
            }
        });
        Ui.TemplateHelpers.registerTemplateHelper('date', function (value, options) {
            return Coveo.DateUtils.dateToString(Coveo.DateUtils.convertFromJsonDateIfNeeded(value), options);
        });
        Ui.TemplateHelpers.registerTemplateHelper('time', function (value, options) {
            return Coveo.DateUtils.timeToString(Coveo.DateUtils.convertFromJsonDateIfNeeded(value), options);
        });
        Ui.TemplateHelpers.registerTemplateHelper('dateTime', function (value, options) {
            return Coveo.DateUtils.dateTimeToString(Coveo.DateUtils.convertFromJsonDateIfNeeded(value), options);
        });
        Ui.TemplateHelpers.registerTemplateHelper('emailDateTime', function (value, options) {
            var defaultOptions = {};
            defaultOptions.includeTimeIfThisWeek = true;
            var optionsToUse = Coveo.$.extend({}, defaultOptions, options);
            return value ? Coveo.DateUtils.dateTimeToString(Coveo.DateUtils.convertFromJsonDateIfNeeded(value), optionsToUse) : undefined;
        });
        Ui.TemplateHelpers.registerTemplateHelper('currency', function (value, options) {
            return Coveo.CurrencyUtils.currencyToString(value, options);
        });
        Ui.TemplateHelpers.registerTemplateHelper('email', function (value, companyDomain, me, lengthLimit, truncateName) {
            if (lengthLimit === void 0) { lengthLimit = 2; }
            if (truncateName === void 0) { truncateName = false; }
            if (Coveo._.isString(value)) {
                var listOfAddresses = Coveo.EmailUtils.splitSemicolonSeparatedListOfEmailAddresses(value);
                return Coveo.EmailUtils.emailAddressesToHyperlinks(listOfAddresses, companyDomain, me, lengthLimit, truncateName);
            }
            else if (Coveo._.isArray(value)) {
                return Coveo.EmailUtils.emailAddressesToHyperlinks(value, companyDomain, me, lengthLimit, truncateName);
            }
            else {
                return undefined;
            }
        });
        Ui.TemplateHelpers.registerTemplateHelper("excessEmailToggle", function (target) {
            Coveo.$(target).removeClass("coveo-active");
            if (Coveo.$(target).hasClass("coveo-emails-excess-collapsed")) {
                Coveo.$(target).siblings(".coveo-emails-excess-expanded").addClass("coveo-active");
            }
            else if (Coveo.$(target).hasClass("coveo-hide-expanded")) {
                Coveo.$(target).parent().addClass("coveo-inactive");
                Coveo.$(target).parent().siblings(".coveo-emails-excess-collapsed").addClass("coveo-active");
            }
            return undefined;
        });
        Ui.TemplateHelpers.registerTemplateHelper('anchor', function (href, options) {
            return Coveo.AnchorUtils.buildAnchor(href, options);
        });
        Ui.TemplateHelpers.registerTemplateHelper('image', function (src, options) {
            return Coveo.ImageUtils.buildImage(src, options);
        });
        Ui.TemplateHelpers.registerTemplateHelper('thumbnail', function (result, endpoint, options) {
            if (result === void 0) { result = resolveQueryResultFromCallStack(); }
            if (endpoint === void 0) { endpoint = "default"; }
            if (Coveo.QueryUtils.hasThumbnail(result)) {
                return Coveo.ImageUtils.buildImageFromResult(result, Coveo.Rest.SearchEndpoint.endpoints[endpoint], options);
            }
        });
        Ui.TemplateHelpers.registerTemplateHelper('fromFileTypeToIcon', function (result, options) {
            if (result === void 0) { result = resolveQueryResultFromCallStack(); }
            if (options === void 0) { options = {}; }
            var caption = '';
            var classToUse = 'coveo-icon';
            if (options.classToUse) {
                classToUse += " " + options.classToUse;
            }
            else if (options.fileTypeToUse) {
                classToUse += " sysfiletype " + options.fileTypeToUse;
            }
            else {
                var info = Ui.FileTypes.get(result);
                classToUse = info.icon;
                caption = info.caption;
            }
            return "<span class='" + classToUse + "' title='" + caption + "'></span>";
        });
        Ui.TemplateHelpers.registerTemplateHelper('attrEncode', function (value) {
            return ('' + value).replace(/&/g, '&amp;').replace(/'/g, '&apos;').replace(/"/g, '&quot;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        });
        Ui.TemplateHelpers.registerTemplateHelper('loadTemplates', function (templatesToLoad, once) {
            if (once === void 0) { once = true; }
            var ret = "";
            var data = resolveQueryResultFromCallStack();
            var atLeastOneWasLoaded = false;
            var toLoad = templatesToLoad;
            var defaultTmpl;
            Coveo._.each(templatesToLoad, function (value, key, obj) {
                if (value == "default") {
                    defaultTmpl = key;
                }
            });
            if (defaultTmpl != undefined) {
                toLoad = Coveo._.omit(templatesToLoad, defaultTmpl);
            }
            Coveo._.each(toLoad, function (condition, id, obj) {
                if (!atLeastOneWasLoaded || !once) {
                    atLeastOneWasLoaded = atLeastOneWasLoaded || condition;
                    ret += Ui.TemplateHelpers.getHelper("loadTemplate")(id, condition, data);
                }
            });
            if (!atLeastOneWasLoaded && defaultTmpl != undefined) {
                ret += Ui.TemplateHelpers.getHelper("loadTemplate")(defaultTmpl, true, data);
            }
            return ret;
        });
        Ui.TemplateHelpers.registerTemplateHelper('loadTemplate', function (id, condition, data) {
            if (condition === void 0) { condition = true; }
            if (Coveo.Utils.isNullOrUndefined(data)) {
                data = resolveQueryResultFromCallStack();
            }
            if (condition) {
                return Ui.TemplateCache.getTemplate(id)(data);
            }
            return "";
        });
        function resolveQueryResultFromCallStack() {
            var calledBy = arguments.callee.caller;
            var queryResult = calledBy.arguments[0];
            var numOfCall = 0;
            while (calledBy != undefined && (queryResult == undefined || queryResult.uri == undefined) && numOfCall < 100) {
                queryResult = calledBy.arguments[0];
                calledBy = calledBy.caller;
                numOfCall++;
            }
            return queryResult;
        }
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ResultList = (function (_super) {
            __extends(ResultList, _super);
            function ResultList(element, options, bindings, elementClassId) {
                var _this = this;
                if (elementClassId === void 0) { elementClassId = ResultList.ID; }
                _super.call(this, element, elementClassId, bindings);
                this.element = element;
                this.options = options;
                this.bindings = bindings;
                this.currentlyDisplayedResults = [];
                this.reachedTheEndOfResults = false;
                this.resetList = true;
                this.pageChanged = false;
                this.options = Ui.ComponentOptions.initComponentOptions(element, ResultList, options);
                Coveo.Assert.exists(element);
                Coveo.Assert.exists(this.options);
                Coveo.Assert.exists(this.options.resultContainer);
                Coveo.Assert.exists(this.options.resultTemplate);
                Coveo.Assert.exists(this.options.waitAnimationContainer);
                Coveo.Assert.exists(this.options.infiniteScrollContainer);
                this.showOrHideElementsDependingOnState(false, false);
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.newQuery, Coveo.$.proxy(this.handleNewQuery, this));
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.querySuccess, Coveo.$.proxy(this.handleProcessNewQueryResults, this));
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.duringQuery, Coveo.$.proxy(this.handleDuringQuery, this));
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.queryError, function () {
                    _this.hideWaitingAnimation();
                    Coveo.$(_this.options.resultContainer).empty();
                    _this.currentlyDisplayedResults = [];
                });
                if (this.options.enableInfiniteScroll) {
                    Coveo.$(this.options.infiniteScrollContainer).scroll(function (event) { return _this.handleScrollOfResultList(event); });
                }
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + Coveo.Models.QueryStateModel.attributesEnum.first);
                Coveo.$(this.queryStateModel.element).on(eventName, Coveo.$.proxy(this.handlePageChanged, this));
            }
            ResultList.prototype.handlePageChanged = function () {
                var _this = this;
                Coveo.$(this.root).one(Coveo.Events.QueryEvents.querySuccess, function () {
                    Coveo.$(_this.options.infiniteScrollContainer).scrollTop(0);
                });
            };
            ResultList.prototype.handleNewQuery = function () {
                if (!this.disabled) {
                    Coveo.$(this.element).show();
                }
            };
            ResultList.prototype.displayMoreResults = function (count, triggeredByUser) {
                var _this = this;
                Coveo.Assert.isLargerOrEqualsThan(1, count);
                Coveo.Assert.check(this.hasPotentiallyMoreResultsToDisplay());
                if (this.isCurrentlyFetchingMoreResults()) {
                    this.logger.warn('Ignoring request to display more results since we\'re already doing so');
                    return;
                }
                if (!this.hasPotentiallyMoreResultsToDisplay()) {
                    this.logger.warn('Ignoring request to display more results since we know there aren\'t more to display');
                    return;
                }
                if (this.options.showInfiniteScrollWaitingAnimation) {
                    this.showWaitingAnimationForInfiniteScrolling();
                }
                this.fetchingMoreResults = this.queryController.fetchMore(count);
                this.fetchingMoreResults.done(function (data) {
                    Coveo.Assert.exists(data);
                    _this.usageAnalytics.logCustomEvent(Ui.AnalyticsActionCauseList.pagerScrolling, {}, _this.element);
                    var results = data.results;
                    _this.reachedTheEndOfResults = count > data.results.length;
                    _this._buildResults(data);
                    Coveo._.each(results, function (result) {
                        _this.currentlyDisplayedResults.push(result);
                    });
                    Coveo.$(_this.element).trigger(Coveo.Events.ResultListEvents.newResultsDisplayed, {});
                });
                this.fetchingMoreResults.always(function () {
                    _this.hideWaitingAnimationForInfiniteScrolling();
                    _this.fetchingMoreResults = undefined;
                    Coveo.Defer.defer(function () { return _this.handleScrollOfResultList(); });
                });
            };
            ResultList.prototype._triggerNewResultDisplayed = function (result, resultElement) {
                var args = {
                    result: result,
                    item: resultElement
                };
                Coveo.$(this.element).trigger(Coveo.Events.ResultListEvents.newResultDisplayed, args);
            };
            ResultList.prototype._buildResults = function (results) {
                var _this = this;
                Coveo.$.each(results.results, function (index, result) {
                    var resultElement = _this._instantiateTemplateForResult(result);
                    Coveo.$(resultElement).data("CoveoResult", result);
                    Coveo.$(_this.options.resultContainer).append(resultElement);
                    _this._autoCreateComponentsInsideResult(resultElement, result);
                    _this._triggerNewResultDisplayed(result, resultElement);
                });
            };
            ResultList.prototype._instantiateTemplateForResult = function (result) {
                Coveo.Assert.exists(result);
                var resultElement = this.options.resultTemplate.instantiateToElement(result);
                Ui.Component.bindResultToElement(resultElement, result);
                return resultElement;
            };
            ResultList.prototype._autoCreateComponentsInsideResult = function (element, result) {
                Coveo.Assert.exists(element);
                var initOptions = this.searchInterface.options;
                var initParameters = Coveo.$.extend({}, { options: initOptions }, this.getBindings(), { result: result });
                Ui.CoveoJQuery.automaticallyCreateComponentsInside(element, initParameters);
            };
            ResultList.prototype.handleDuringQuery = function () {
                this.logger.trace('Emptying the result container');
                this.currentlyDisplayedResults = [];
                this.cancelFetchingMoreResultsIfNeeded();
                this.showWaitingAnimation();
                this.showOrHideElementsDependingOnState(false, false);
            };
            ResultList.prototype.handleProcessNewQueryResults = function (e, data) {
                Coveo.Assert.exists(data);
                Coveo.Assert.exists(data.results);
                Coveo.$(this.element).fastToggle(!this.disabled);
                if (!this.disabled) {
                    var results = data.results;
                    this.logger.trace('Received query results from new query', results);
                    this.hideWaitingAnimation();
                    this.options.resultContainer.innerHTML = '';
                    this.currentlyDisplayedResults = [];
                    this._buildResults(results);
                    this.currentlyDisplayedResults = results.results;
                    this.reachedTheEndOfResults = false;
                    this.showOrHideElementsDependingOnState(true, this.currentlyDisplayedResults.length != 0);
                    if (this.options.enableInfiniteScroll && results.results.length == data.queryBuilder.numberOfResults) {
                        // This will check right away if we need to add more results to make the scroll container full & scrolling.
                        this.handleScrollOfResultList();
                    }
                    if (Coveo.DeviceUtils.isMobileDevice() && this.options.mobileScrollContainer != undefined) {
                        this.options.mobileScrollContainer.scrollTop = 0;
                    }
                    Coveo.$(this.element).trigger(Coveo.Events.ResultListEvents.newResultsDisplayed, {});
                }
            };
            ResultList.prototype.reset = function () {
                this.hideWaitingAnimation();
                Coveo.$(this.options.resultContainer).empty();
                this.currentlyDisplayedResults = [];
            };
            ResultList.prototype.handleScrollOfResultList = function (event) {
                if (this.isCurrentlyFetchingMoreResults()) {
                    return;
                }
                if (this.isScrollingOfResultListAlmostAtTheBottom() && this.hasPotentiallyMoreResultsToDisplay()) {
                    this.displayMoreResults(this.options.infiniteScrollPageSize, event != null);
                }
            };
            ResultList.prototype.isCurrentlyFetchingMoreResults = function () {
                return Coveo.Utils.exists(this.fetchingMoreResults);
            };
            ResultList.prototype.isScrollingOfResultListAlmostAtTheBottom = function () {
                //this is in a try catch because the unit test fail otherwise (Window does not exist for phantom js in the console)
                var isWindow;
                try {
                    isWindow = Coveo.$(this.options.infiniteScrollContainer).get(0) instanceof Window;
                }
                catch (e) {
                    isWindow = false;
                }
                return isWindow ? this.isScrollAtBottomForWindowElement() : this.isScrollAtBottomForHtmlElement();
            };
            ResultList.prototype.isScrollAtBottomForWindowElement = function () {
                var windowHeight = Coveo.$(window).height();
                var scrollTop = Coveo.$(window).scrollTop();
                var docHeight = Coveo.$(document).height();
                return docHeight - (windowHeight + scrollTop) < windowHeight / 2;
            };
            ResultList.prototype.isScrollAtBottomForHtmlElement = function () {
                var elementHeight = Coveo.$(this.options.infiniteScrollContainer).innerHeight();
                var scrollHeight = Coveo.$(this.options.infiniteScrollContainer).get(0).scrollHeight;
                var bottomPosition = Coveo.$(this.options.infiniteScrollContainer).scrollTop() + elementHeight;
                return (scrollHeight - bottomPosition) < elementHeight / 2;
            };
            ResultList.prototype.hasPotentiallyMoreResultsToDisplay = function () {
                return this.currentlyDisplayedResults.length > 0 && !this.reachedTheEndOfResults;
            };
            ResultList.prototype.cancelFetchingMoreResultsIfNeeded = function () {
                if (this.isCurrentlyFetchingMoreResults()) {
                    this.logger.trace('Cancelling fetching more results');
                    this.fetchingMoreResults.reject();
                    this.fetchingMoreResults = undefined;
                }
            };
            ResultList.prototype.showOrHideElementsDependingOnState = function (hasQuery, hasResults) {
                Coveo.$(this.element).find('.coveo-show-if-query').fastToggle(hasQuery);
                Coveo.$(this.element).find('.coveo-show-if-no-query').fastToggle(!hasQuery);
                Coveo.$(this.element).find('.coveo-show-if-results').fastToggle(hasQuery && hasResults);
                Coveo.$(this.element).find('.coveo-show-if-no-results').fastToggle(hasQuery && !hasResults);
            };
            ResultList.prototype.showWaitingAnimation = function () {
                switch (this.options.waitAnimation.toLowerCase()) {
                    case 'fade':
                        Coveo.$(this.options.waitAnimationContainer).addClass('coveo-fade-out');
                        break;
                    case 'spinner':
                        Coveo.$(this.options.resultContainer).children().hide();
                        if (Coveo.$(this.options.waitAnimationContainer).find('.coveo-wait-animation').length == 0) {
                            Coveo.$(this.options.waitAnimationContainer).append('<img src="../image/wait.gif" class="coveo-wait-animation"/>');
                        }
                        break;
                }
            };
            ResultList.prototype.hideWaitingAnimation = function () {
                switch (this.options.waitAnimation.toLowerCase()) {
                    case 'fade':
                        Coveo.$(this.options.waitAnimationContainer).removeClass('coveo-fade-out');
                        break;
                    case 'spinner':
                        Coveo.$(this.options.waitAnimationContainer).children('img.coveo-wait-animation').detach();
                        break;
                }
            };
            ResultList.prototype.showWaitingAnimationForInfiniteScrolling = function () {
                Coveo.$(this.options.waitAnimationContainer).append('<img src="../image/wait.gif" class="coveo-wait-animation"/>');
            };
            ResultList.prototype.hideWaitingAnimationForInfiniteScrolling = function () {
                Coveo.$(this.options.waitAnimationContainer).children('img.coveo-wait-animation').detach();
            };
            ResultList.ID = 'ResultList';
            ResultList.options = {
                resultContainer: Ui.ComponentOptions.buildChildHtmlElementOption({ defaultFunction: function (element) { return Coveo.$('<div/>').appendTo(element).get(0); } }),
                resultTemplate: Ui.ComponentOptions.buildTemplateOption({ defaultFunction: function (element) { return new Ui.DefaultResultTemplate(); } }),
                waitAnimation: Ui.ComponentOptions.buildStringOption({ defaultValue: 'none' }),
                waitAnimationContainer: Ui.ComponentOptions.buildChildHtmlElementOption({ postProcessing: function (value, options) { return value || options.resultContainer; } }),
                enableInfiniteScroll: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                infiniteScrollPageSize: Ui.ComponentOptions.buildNumberOption({ defaultValue: 10 }),
                infiniteScrollContainer: Ui.ComponentOptions.buildChildHtmlElementOption({ defaultFunction: function (element) { return Coveo.JQueryUtils.findScrollingParent(element); } }),
                showInfiniteScrollWaitingAnimation: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                mobileScrollContainer: Ui.ComponentOptions.buildSelectorOption({ defaultFunction: function () { return Coveo.$(".coveo-results-column").get(0); } })
            };
            return ResultList;
        })(Ui.Component);
        Ui.ResultList = ResultList;
        Ui.CoveoJQuery.registerAutoCreateComponent(ResultList);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ImageResultList = (function (_super) {
            __extends(ImageResultList, _super);
            function ImageResultList(element, options, bindings, elementClassId) {
                if (elementClassId === void 0) { elementClassId = Coveo.Ui.ResultList.ID; }
                _super.call(this, element, options, bindings, ImageResultList.ID);
                this.element = element;
                this.options = options;
                this.columnResultsArray = [];
                this.imagesInCurrentRow = [];
                this.imagesLoaded = 0;
                this.resultIndex = 0;
                this.lastRowHeight = 0;
                this.options = Ui.ComponentOptions.initComponentOptions(element, ImageResultList, options);
                this.lastRowHeight = this.options.heightThreshold;
                Coveo.$(this.root).on(Coveo.Events.ResultListEvents.newResultsDisplayed, Coveo.$.proxy(this.handleProcessNewResultsDisplayed, this));
                this.bindWindowResizeEvent();
            }
            ImageResultList.prototype.getResultsElement = function () {
                return Coveo.$(this.element).find(".CoveoResult");
            };
            ImageResultList.prototype.getResultsElementImages = function () {
                return Coveo.$(this.element).find(".CoveoResult img");
            };
            ImageResultList.prototype.getResultsContainerDiv = function () {
                return Coveo.$(this.element).find("> div");
            };
            ImageResultList.prototype.bindWindowResizeEvent = function () {
                var _this = this;
                var timeout;
                Coveo.$(window).on('resize', function () {
                    clearTimeout(timeout);
                    timeout = setTimeout(_this.retrieveLayoutMethod(), 250);
                });
            };
            ImageResultList.prototype.handleProcessNewResultsDisplayed = function () {
                if (this.disabled) {
                    Coveo.$(this.element).fadeOut();
                }
                else {
                    Coveo.$(this.element).fadeIn();
                }
                this.onImageProxy(this.retrieveLayoutMethod());
            };
            ImageResultList.prototype.addTransitionAllToElement = function (element) {
                Coveo._.defer(function () {
                    element.addClass('coveo-transition-all');
                });
            };
            ImageResultList.prototype.retrieveLayoutMethod = function () {
                var _this = this;
                var oncomplete;
                if (!this.disabled) {
                    if (this.options.layoutType.toLowerCase() == ImageResultList.columnLayoutTypeStr) {
                        return function () { return _this.setupColumns(); };
                    }
                    else if (this.options.layoutType.toLowerCase() == ImageResultList.rowLayoutTypeStr) {
                        return function () { return _this.setupRows(); };
                    }
                }
                return function () {
                };
            };
            ImageResultList.prototype.onImageProxy = function (callback) {
                var results = this.getResultsElement().each(function (i, e) {
                    if (Coveo.$(e).find('img').length == 0) {
                        Coveo.$(e).detach();
                    }
                });
                var images = this.getResultsElementImages();
                var loaded = 0;
                var onImageLoad = function (image) {
                    if (Coveo.$(image).height() > 0) {
                        if (Coveo.$(image).attr('width') == null && Coveo.$(image).attr('height') == null) {
                            Coveo.$(image).attr('height', Coveo.$(image).height());
                            Coveo.$(image).attr('width', Coveo.$(image).width());
                        }
                        loaded++;
                        if (loaded == images.length) {
                            callback();
                        }
                    }
                    else {
                        Coveo.$(image).parent().detach();
                        images = images.not(image);
                        if (loaded == images.length) {
                            callback();
                        }
                    }
                };
                images.each(function (i, e) {
                    if ((this.src && this.complete) || Coveo.$(e).height() > 0) {
                        onImageLoad(e);
                    }
                    else {
                        Coveo.$(e).off('load').one('load', function () {
                            onImageLoad(e);
                        });
                    }
                });
            };
            ImageResultList.prototype.getHorizontalMargin = function (element) {
                return parseInt(element.css('margin-left')) + parseInt(element.css('margin-right'));
            };
            ImageResultList.prototype.getVerticalMargin = function (element) {
                return parseInt(element.css('margin-top')) + parseInt(element.css('margin-bottom'));
            };
            ImageResultList.prototype.setupColumns = function () {
                var containerWidth = this.getResultsContainerDiv().width();
                var result = this.getResultsElement();
                var colWidth = this.options.columnWidth;
                var margin = this.getHorizontalMargin(result);
                var numberOfColumns = Math.floor(containerWidth / (colWidth + margin));
                this.columnResultsArray = [];
                for (var i = 0; i < numberOfColumns; i++) {
                    this.columnResultsArray.push(margin);
                }
                this.positionColumns(colWidth, margin);
                Coveo.$(this.element).trigger(Coveo.Events.ImageResultListEvents.imageResultsLayoutComplete, {});
                if (this.options.enableInfiniteScroll) {
                    this.adjustNumberOfResults();
                }
            };
            ImageResultList.prototype.positionColumns = function (colWidth, margin) {
                var _this = this;
                var results = this.getResultsElement();
                Coveo._.each(results, function (result) {
                    var minTopOffset = Coveo._.min(_this.columnResultsArray);
                    var resultIndex = Coveo.$.inArray(minTopOffset, _this.columnResultsArray);
                    var leftOffset = margin + (resultIndex * (colWidth + margin));
                    Coveo.$(result).css({
                        "left": leftOffset + "px",
                        "top": minTopOffset + "px",
                        "width": colWidth + "px"
                    });
                    _this.columnResultsArray[resultIndex] = minTopOffset + Coveo.$(result).outerHeight() + margin;
                });
                this.setResultsContainerHeight(Coveo._.max(this.columnResultsArray));
                this.addTransitionAllToElement(results);
            };
            ImageResultList.prototype.setResultsContainerHeight = function (height) {
                Coveo.$(this.element).height(Math.ceil(height));
                Coveo.$(this.element).attr("data-height", Math.ceil(height));
            };
            ImageResultList.prototype.setupRows = function () {
                var results = this.getResultsElement();
                var containerWidth = Coveo.$(this.element).width();
                this.resultIndex = 0;
                var topOffset = 0;
                while (this.resultIndex < results.length) {
                    this.imagesInCurrentRow = [];
                    var rowHeight = this.getCurrentRowHeight(results, containerWidth);
                    this.setCurrentRowImagesDimensions(results, rowHeight, topOffset);
                    topOffset += rowHeight;
                }
                this.setResultsContainerHeight(topOffset);
                Coveo.$(this.element).trigger(Coveo.Events.ImageResultListEvents.imageResultsLayoutComplete, {});
                this.addTransitionAllToElement(results);
                if (this.options.enableInfiniteScroll) {
                    this.adjustNumberOfResults();
                }
            };
            ImageResultList.prototype.getCurrentRowHeight = function (results, containerWidth) {
                var divider = 0;
                var height = null;
                while ((this.resultIndex < results.length) && (height == null || height >= this.options.heightThreshold)) {
                    var imageDimensions = this.getImageDimensionsFromResult(results.eq(this.resultIndex));
                    if (imageDimensions != null) {
                        divider += imageDimensions.width / imageDimensions.height;
                        height = containerWidth / divider;
                    }
                    this.imagesInCurrentRow.push(this.resultIndex);
                    this.resultIndex++;
                }
                // correct height for last element if it can't be as wide as the container
                if (height > this.options.heightThreshold) {
                    height = this.lastRowHeight;
                }
                this.lastRowHeight = height;
                return height;
            };
            ImageResultList.prototype.getImageDimensionsFromResult = function (result) {
                var image = result.find('img');
                var height = parseInt(image.attr('height'));
                var width = parseInt(image.attr('width'));
                return {
                    height: height,
                    width: width
                };
            };
            ImageResultList.prototype.setCurrentRowImagesDimensions = function (images, height, top) {
                var _this = this;
                var leftOffset = 0;
                Coveo._.each(this.imagesInCurrentRow, function (imageIndex) {
                    var oldWidth = parseInt(images.eq(imageIndex).find('img').attr('width'));
                    var oldHeight = parseInt(images.eq(imageIndex).find('img').attr('height'));
                    var width = oldWidth * height / oldHeight;
                    var widthMargin = _this.getHorizontalMargin(images.eq(imageIndex));
                    var heightMargin = _this.getVerticalMargin(images.eq(imageIndex));
                    images.eq(imageIndex).css({
                        "height": Math.round(height - heightMargin),
                        "width": Math.round(width - widthMargin),
                        "left": Math.round(leftOffset),
                        "top": Math.round(top)
                    });
                    leftOffset += width;
                });
            };
            ImageResultList.prototype.adjustNumberOfResults = function () {
                var elementHeight = Number(Coveo.$(this.element).attr("data-height"));
                if (Coveo.$.isNumeric(elementHeight) == false) {
                    elementHeight = Coveo.$(this.element).height();
                }
                if ((elementHeight < Coveo.$(this.options.infiniteScrollContainer).height()) && _super.prototype.hasPotentiallyMoreResultsToDisplay.call(this)) {
                    _super.prototype.displayMoreResults.call(this, this.options.infiniteScrollPageSize, false);
                }
            };
            ImageResultList.ID = 'ImageResultList';
            ImageResultList.rowLayoutTypeStr = 'row';
            ImageResultList.columnLayoutTypeStr = 'column';
            ImageResultList.options = {
                layoutType: Ui.ComponentOptions.buildStringOption({ defaultValue: "row", postProcessing: function (value) { return value.toLowerCase(); } }),
                heightThreshold: Ui.ComponentOptions.buildNumberOption({ defaultValue: 250 }),
                columnWidth: Ui.ComponentOptions.buildNumberOption({ defaultValue: 225 })
            };
            return ImageResultList;
        })(Ui.ResultList);
        Ui.ImageResultList = ImageResultList;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(ImageResultList);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var AjaxUtils = (function () {
        function AjaxUtils() {
        }
        AjaxUtils.ajaxBasicAuth = function (type, url, username, password, doneCallback, failCallBack) {
            Coveo.$.ajax({
                type: type,
                timeout: 5000,
                url: url,
                beforeSend: function (xhr) {
                    if (username != null && password != null) {
                        xhr.setRequestHeader('Authorization', AjaxUtils.getBasicAuthBase64(username, password));
                        if (Coveo.DeviceUtils.isPhonegap()) {
                            xhr.setRequestHeader('Basic-Auth-Challenge-Client', 'Phonegap');
                        }
                    }
                }
            }).fail(function (data) {
                if (failCallBack) {
                    failCallBack(data);
                }
            }).done(function (data) {
                doneCallback(data);
            });
        };
        AjaxUtils.getBasicAuthBase64 = function (username, password) {
            return 'Basic ' + btoa(username + ":" + password);
        };
        return AjaxUtils;
    })();
    Coveo.AjaxUtils = AjaxUtils;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var LoginCredentials = (function () {
            function LoginCredentials(loginPanel) {
                this.loginPanel = loginPanel;
                this.userInputTemplate = Coveo._.template("<div class='coveo-input-container'>\
          <span class='coveo-username-icon'></span>\
          <input class='coveo-username' type='text' placeholder='" + Ui.l("Username") + "' autocorrect='off' autocapitalize='off' />\
      </div>");
                this.passwordInputTemplate = Coveo._.template("<div class='coveo-input-container'>\
          <span class='coveo-password-icon'></span>\
          <input class='coveo-password'  type='password' placeholder='" + Ui.l("Password") + "' autocorrect='off' autocapitalize='off' />\
      </div>");
                this.containerTemplate = Coveo._.template("<div class='coveo-login-credentials-container'></div>");
            }
            LoginCredentials.prototype.buildDom = function () {
                var _this = this;
                this.credentialContainer = Coveo.$(this.containerTemplate());
                this.loginUser = Coveo.$(this.userInputTemplate());
                this.loginUser.keypress(function (e) { return _this.handleInputKeypress(e); });
                this.loginPassword = Coveo.$(this.passwordInputTemplate());
                this.loginPassword.keypress(function (e) { return _this.handleInputKeypress(e); });
                this.credentialContainer.append(this.loginUser, this.loginPassword);
                this.loginPanel.getOrCreateContainer().append(this.credentialContainer);
                this.loginUser.find("input").val(this.getUser());
                this.loginPassword.find("input").val(this.getPassword());
            };
            LoginCredentials.prototype.show = function () {
                this.credentialContainer.show();
            };
            LoginCredentials.prototype.getUser = function () {
                return window.localStorage.getItem(this.getLocalStorageKeyUser());
            };
            LoginCredentials.prototype.setUser = function (user) {
                this.loginUser.find('input').val(user);
                window.localStorage.setItem(this.getLocalStorageKeyUser(), user);
            };
            LoginCredentials.prototype.getPassword = function () {
                return window.localStorage.getItem(this.getLocalStorageKeyPassword());
            };
            LoginCredentials.prototype.setPassword = function (password) {
                this.loginPassword.find('input').val(password);
                window.localStorage.setItem(this.getLocalStorageKeyPassword(), password);
            };
            LoginCredentials.prototype.validate = function () {
                var deferred = Coveo.$.Deferred();
                this.setPassword(this.getPasswordFromInput());
                this.setUser(this.getUserFromInput());
                deferred.resolve(true);
                return deferred;
            };
            LoginCredentials.prototype.submit = function (allValidationPassed) {
                var deferred = Coveo.$.Deferred();
                this.setPassword(this.getPasswordFromInput());
                this.setUser(this.getUserFromInput());
                deferred.resolve(true);
                return deferred;
            };
            LoginCredentials.prototype.getLocalStorageKeyUser = function () {
                return "coveo-user-" + this.loginPanel.options.id;
            };
            LoginCredentials.prototype.getLocalStorageKeyPassword = function () {
                return "coveo-password-" + this.loginPanel.options.id;
            };
            LoginCredentials.prototype.getPasswordFromInput = function () {
                return this.loginPassword.find('input').val();
            };
            LoginCredentials.prototype.getUserFromInput = function () {
                return this.loginUser.find('input').val();
            };
            LoginCredentials.prototype.handleInputKeypress = function (e) {
                if (!this.loginPanel.isHidden && (e.keyCode == 13)) {
                    this.loginPanel.submit();
                }
            };
            return LoginCredentials;
        })();
        Ui.LoginCredentials = LoginCredentials;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var PhonegapFileAccess = (function () {
        function PhonegapFileAccess(filename, flags) {
            this.filename = filename;
            this.flags = flags;
        }
        PhonegapFileAccess.prototype.done = function (success) {
            this._success = success;
            return this;
        };
        PhonegapFileAccess.prototype.fail = function (error) {
            this._error = error;
            return this;
        };
        PhonegapFileAccess.prototype.tryAccess = function () {
            this.tryGetFilesystem();
        };
        PhonegapFileAccess.prototype._onGotFileEntry = function (fileEntry) {
            //Do nothing in parent class
            return;
        };
        PhonegapFileAccess.prototype.tryGetFilesystem = function () {
            window.requestFileSystem(LocalFileSystem.PERSISTENT, 0, Coveo.$.proxy(this._gotFileSystem, this), Coveo.$.proxy(this.onError, this));
        };
        PhonegapFileAccess.prototype._gotFileSystem = function (fileSystem) {
            fileSystem.root.getFile(this.filename, this.flags, Coveo.$.proxy(this._onGotFileEntry, this), Coveo.$.proxy(this.onError, this));
        };
        PhonegapFileAccess.prototype.onError = function (error) {
            this._error(error);
        };
        return PhonegapFileAccess;
    })();
    Coveo.PhonegapFileAccess = PhonegapFileAccess;
    var PhonegapFileReader = (function (_super) {
        __extends(PhonegapFileReader, _super);
        function PhonegapFileReader(filename) {
            _super.call(this, filename, null);
        }
        PhonegapFileReader.prototype.read = function () {
            this.tryAccess();
            return this;
        };
        PhonegapFileReader.prototype._onGotFileEntry = function (fileEntry) {
            this.gotFileEntry(fileEntry);
        };
        PhonegapFileReader.prototype.gotFileEntry = function (fileEntry) {
            fileEntry.file(Coveo.$.proxy(this.gotFile, this), Coveo.$.proxy(this._error, this));
        };
        PhonegapFileReader.prototype.gotFile = function (file) {
            var _this = this;
            var reader = new FileReader();
            reader.onloadend = function (evt) {
                if (_this._success) {
                    _this._success(evt.target.result);
                }
            };
            reader.readAsText(file);
        };
        return PhonegapFileReader;
    })(PhonegapFileAccess);
    Coveo.PhonegapFileReader = PhonegapFileReader;
    var PhonegapFileWriter = (function (_super) {
        __extends(PhonegapFileWriter, _super);
        function PhonegapFileWriter(filename, append) {
            if (append === void 0) { append = false; }
            _super.call(this, filename, { create: true, exclusive: false });
            this.append = append;
        }
        PhonegapFileWriter.prototype.write = function (content) {
            this.content = content;
            this.tryAccess();
            return this;
        };
        PhonegapFileWriter.prototype._onGotFileEntry = function (fileEntry) {
            fileEntry.createWriter(Coveo.$.proxy(this.gotFileWriter, this), Coveo.$.proxy(this._error, this));
        };
        PhonegapFileWriter.prototype.gotFileWriter = function (writer) {
            var _this = this;
            writer.onwriteend = function (evt) {
                if (_this._success) {
                    _this._success(evt);
                }
            };
            if (this.append) {
                writer.seek(writer.length);
            }
            ;
            writer.write(this.content);
        };
        return PhonegapFileWriter;
    })(PhonegapFileAccess);
    Coveo.PhonegapFileWriter = PhonegapFileWriter;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var LoginPageSettings = (function () {
            function LoginPageSettings(loginPanel) {
                this.loginPanel = loginPanel;
                this.pageSettingsInputTemplate = Coveo._.template("<div class='coveo-input-container'>\
          <span class='coveo-page-settings-icon'></span>\
          <input class='coveo-page-settings' type='text' placeholder='" + Ui.l("PageUrl") + "' autocorrect='off' autocapitalize='off' />\
    </div>");
            }
            LoginPageSettings.prototype.buildDom = function () {
                var _this = this;
                var container = Coveo.$("<div></div>").addClass('coveo-login-page-settings-container');
                this.pageSettings = Coveo.$(this.pageSettingsInputTemplate());
                this.pageSettings.keypress(function (e) { return _this.handleInputKeypress(e); });
                container.append(this.pageSettings);
                this.pageSettings.find('input').val(this.getPageSettingsUrl());
                this.loginPanel.getOrCreateContainer().append(container);
            };
            LoginPageSettings.prototype.getPageSettingsUrl = function () {
                return window.localStorage.getItem(this.getLocalStorageKeyPageUrl());
            };
            LoginPageSettings.prototype.setPageSettingsUrl = function (pageUrl) {
                this.pageSettings.find('input').val(pageUrl);
                window.localStorage.setItem(this.getLocalStorageKeyPageUrl(), pageUrl);
            };
            LoginPageSettings.prototype.submit = function (allValidationPassed) {
                var url = this.pageSettings.find('input').val();
                this.setPageSettingsUrl(url);
                var deferredToReturn = Coveo.$.Deferred();
                this.tryToWriteFileToDisc(allValidationPassed, deferredToReturn, true);
                return deferredToReturn;
            };
            LoginPageSettings.prototype.validate = function (allValidationPassed) {
                var deferredToReturn = Coveo.$.Deferred();
                //If this value is set, there is a pretty good chance that the file is also written on disc.
                if (this.getPageSettingsUrl()) {
                    this.tryToReadFileFomDisc(allValidationPassed, deferredToReturn, false);
                }
                else {
                    deferredToReturn.reject();
                }
                return deferredToReturn;
            };
            LoginPageSettings.prototype.getLocalStorageKeyPageUrl = function () {
                return "coveo-page-settings-url-" + this.loginPanel.options.id;
            };
            LoginPageSettings.prototype.handleInputKeypress = function (e) {
                if (!this.loginPanel.isHidden && (e.keyCode == 13)) {
                    this.loginPanel.submit();
                }
            };
            LoginPageSettings.prototype.loadFromInterfaceEditorUrl = function (url) {
                var urlObject = document.createElement('a');
                urlObject.href = url;
                if (urlObject.pathname == "/load") {
                    //the id param is required by the small node 'debug server' packaged with the interface editor
                    //The one exposed by the rest api might not need this ?
                    //Anyway, we might need to tweak this...
                    if (Coveo.Utils.getQueryStringValue("id", urlObject.search) != "" || url.indexOf("?id") != -1) {
                        return url;
                    }
                    else {
                        return url + "?id";
                    }
                }
                else {
                    return url + "/load?id";
                }
            };
            LoginPageSettings.prototype.tryToWriteFileToDisc = function (allValidationPassed, deferredToReturn, writeDocument) {
                var _this = this;
                if (writeDocument === void 0) { writeDocument = false; }
                //allValidationPassed is the deferred sent by the LoginComponent.
                //If the login credentials fail, for example, we don't wanna write the document content. We need a good url + good credentials before doing so.
                //deferredToReturn is what we send back to the login component to signify that we were able to fetch the page and write it
                var url = this.getPageSettingsUrl();
                Coveo.AjaxUtils.ajaxBasicAuth("GET", this.loadFromInterfaceEditorUrl(url), this.loginPanel.getUser(), this.loginPanel.getPassword(), function (res) {
                    if (Coveo.DeviceUtils.isPhonegap()) {
                        new Coveo.PhonegapFileWriter("SearchPage.html").write(JSON.stringify(res)).done(function () {
                            _this.loginPanel.logger.info("Found the page and successfully wrote to disc", _this.getPageSettingsUrl());
                            if (writeDocument) {
                                allValidationPassed.done(function () {
                                    _this.loginPanel.logger.info("Replacing body content with new search page", _this.getPageSettingsUrl());
                                    _this.writeDocumentContent(res.body);
                                });
                            }
                            deferredToReturn.resolve();
                        }).fail(function () {
                            _this.loginPanel.logger.error("Found the file but unable to write", _this.getPageSettingsUrl());
                            deferredToReturn.reject(Ui.l("ErrorSavingToDevice"));
                        });
                    }
                    else {
                        _this.loginPanel.logger.info("Found the page", _this.getPageSettingsUrl());
                        if (writeDocument) {
                            _this.writeDocumentContent(res.body);
                        }
                        deferredToReturn.resolve();
                    }
                }, function () {
                    if (_this.getPageSettingsUrl() == undefined || _this.getPageSettingsUrl() == "") {
                        _this.loginPanel.logger.error("Search page url is empty");
                        deferredToReturn.reject(Ui.l("PleaseEnterYourSearchPage"));
                    }
                    else {
                        _this.loginPanel.logger.error("Unable to find the file", _this.getPageSettingsUrl());
                        deferredToReturn.reject(Ui.l("CannotConnectSearchPage"));
                    }
                });
            };
            LoginPageSettings.prototype.tryToReadFileFomDisc = function (allValidationPassed, deferredToReturn, writeDocument) {
                var _this = this;
                if (writeDocument === void 0) { writeDocument = false; }
                if (Coveo.DeviceUtils.isPhonegap()) {
                    new Coveo.PhonegapFileReader("SearchPage.html").read().done(function (fileContent) {
                        _this.loginPanel.logger.info("Found the page on disc", _this.getPageSettingsUrl());
                        if (writeDocument) {
                            allValidationPassed.done(function () {
                                var body = JSON.parse(fileContent).body;
                                _this.writeDocumentContent(body);
                            });
                        }
                        //We still want to rewrite the file each time, so that we get the latest one available at each load
                        //We don't really care if it fails or not, so we pass a 'fake' deferred
                        //If it fails we'll load the one saved on the device anyway at the next restart of the app
                        _this.tryToWriteFileToDisc(Coveo.$.Deferred(), Coveo.$.Deferred(), false);
                        deferredToReturn.resolve();
                    }).fail(function () {
                        if (_this.getPageSettingsUrl()) {
                            _this.loginPanel.logger.info("Unable to find the page on disc", _this.getPageSettingsUrl());
                            _this.loginPanel.logger.info("Trying to fetch it with GET request and write to disc");
                            _this.tryToWriteFileToDisc(allValidationPassed, deferredToReturn, false);
                        }
                        else {
                            deferredToReturn.reject(Ui.l("ErrorReadingFromDevice"));
                        }
                    });
                }
                else {
                    this.tryToWriteFileToDisc(allValidationPassed, deferredToReturn, writeDocument);
                }
            };
            LoginPageSettings.prototype.writeDocumentContent = function (content) {
                document.body.outerHTML = content;
                //We need to append a login component if there is none on the landing page
                //otherwise the user will never be able to change it's page manually (other than reloading the app completely)
                this.appendMissingLoginComponentIfNeeded();
                //Scan and configure the different part we need to init the new search page
                this.configureNewEndpoints();
                Ui.TemplateCache.scanAndRegisterTemplates();
                this.initNewSearchInterface();
            };
            LoginPageSettings.prototype.appendMissingLoginComponentIfNeeded = function () {
                var login = Coveo.$('.' + Ui.Component.computeCssClassNameForType(Ui.Login.ID));
                if (login.length == 0) {
                    var loginToAppend = Coveo.$('<div class="CoveoLogin" data-require-page-settings="true"></div>');
                    if (this.loginPanel.options.requireLogin) {
                        loginToAppend.attr('data-require-login', 'true');
                    }
                    else {
                        loginToAppend.attr('data-require-login', 'false');
                    }
                    Coveo.$('.coveo-tab-section').append(loginToAppend);
                }
                else {
                    var pageSettingsOnExistingLogin = login.attr('data-require-page-settings');
                    if (pageSettingsOnExistingLogin == "false" || pageSettingsOnExistingLogin == undefined) {
                        login.attr('data-require-page-settings', 'true');
                    }
                }
            };
            LoginPageSettings.prototype.configureNewEndpoints = function () {
                var scripts = Coveo.$('body').find('script.CoveoEndpoint');
                Coveo._.each(scripts, function (script) {
                    eval(Coveo.$(script).text());
                });
            };
            LoginPageSettings.prototype.initNewSearchInterface = function () {
                var scripts = Coveo.$('body').find('script.CoveoInit');
                if (scripts.length != 0) {
                    Coveo["InitializeFromPhonegap"] = true;
                    Coveo._.each(scripts, function (script) {
                        eval(Coveo.$(script).text());
                    });
                }
                else {
                    var searchInterface = Coveo.$('.' + Ui.Component.computeCssClassNameForType(Ui.SearchInterface.ID));
                    if (searchInterface.length != 0) {
                        searchInterface.coveo('init');
                    }
                    else {
                        Coveo.$("#search").coveo('init');
                    }
                }
            };
            return LoginPageSettings;
        })();
        Ui.LoginPageSettings = LoginPageSettings;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Login = (function (_super) {
            __extends(Login, _super);
            function Login(element, options, bindings, loginId) {
                if (loginId === void 0) { loginId = Login.ID; }
                _super.call(this, element, loginId, bindings);
                this.element = element;
                this.options = options;
                this.errorMessageTemplate = Coveo._.template("<div class='coveo-login-error-message'></div>");
                this.captionTemplate = Coveo._.template("<div class='coveo-login-caption'></div>");
                this.tabButtonTemplate = Coveo._.template("<div class='coveo-login-tab'>Login</div>");
                this.containerTemplate = Coveo._.template("<div class='coveo-login-form-container'></div>");
                this.submitButtonTemplate = Coveo._.template("<button class='coveo-submit'type='submit'><div class='coveo-icon coveo-waiting'></div>" + Ui.l("GetStarted") + "</button>");
                this.combinedTemplate = Coveo._.template("<div class='coveo-login-combined coveo-active'></div>");
                this.logoTemplate = Coveo._.template("<div class='coveo-login-logo'></div>");
                this.options = Ui.ComponentOptions.initComponentOptions(element, Login, options);
                Coveo.Assert.exists(this.options.id);
                Coveo.Assert.exists(Coveo.Rest.SearchEndpoint.endpoints[this.options.id]);
                this.isHidden = true;
                if (this.options.requireLogin) {
                    this.credentials = new Ui.LoginCredentials(this);
                }
                if (this.options.requirePageSettings) {
                    this.pageSettings = new Ui.LoginPageSettings(this);
                }
                this.loadingAnimation = Coveo.$(this.searchInterface.options.firstLoadingAnimation);
                this.bind.onRoot(Coveo.Events.QueryEvents.queryError, this.handleQueryError);
                this.buildTabButton();
                this.ensureDom();
                this.updateEndpointWithCredentials();
                this.resetErrorMessage();
                this.hide();
                this.validate();
            }
            Login.prototype.getPageSettingsUrl = function () {
                return this.pageSettings ? this.pageSettings.getPageSettingsUrl() : undefined;
            };
            Login.prototype.setPageSettingsUrl = function (url) {
                if (this.pageSettings) {
                    this.pageSettings.setPageSettingsUrl(url);
                }
            };
            Login.prototype.getUser = function () {
                return this.credentials ? this.credentials.getUser() : undefined;
            };
            Login.prototype.setUser = function (user) {
                if (this.credentials) {
                    this.credentials.setUser(user);
                }
            };
            Login.prototype.getPassword = function () {
                return this.credentials ? this.credentials.getPassword() : undefined;
            };
            Login.prototype.setPassword = function (password) {
                if (this.credentials) {
                    this.credentials.setPassword(password);
                }
            };
            Login.prototype.setErrorMessage = function (msg) {
                this.errorMessage.text(msg);
                this.errorMessage.show();
                this.logo.hide();
            };
            Login.prototype.resetErrorMessage = function () {
                this.errorMessage.text("");
                this.errorMessage.hide();
                this.logo.show();
            };
            Login.prototype.createDom = function () {
                var _this = this;
                this.logo = Coveo.$(this.logoTemplate());
                this.getOrCreateCombined().append(this.logo);
                this.caption = Coveo.$(this.captionTemplate());
                if (this.options.caption) {
                    this.caption.text(this.options.caption);
                }
                this.errorMessage = Coveo.$(this.errorMessageTemplate());
                this.getOrCreateCombined().append(this.errorMessage);
                this.getOrCreateContainer().append(this.caption);
                if (this.credentials) {
                    this.credentials.buildDom();
                }
                if (this.pageSettings) {
                    this.pageSettings.buildDom();
                }
                this.submitButton = Coveo.$(this.submitButtonTemplate());
                this.submitButton.fastClick(function (e) { return _this.submit(); });
                this.getOrCreateContainer().append(this.submitButton);
            };
            Login.prototype.getOrCreateContainer = function () {
                if (!this.container) {
                    this.container = Coveo.$(this.containerTemplate());
                    this.getOrCreateCombined().append(this.container);
                }
                return this.container;
            };
            Login.prototype.getOrCreateCombined = function () {
                if (!this.combined) {
                    this.combined = Coveo.$(this.combinedTemplate());
                    Coveo.$(this.root).append(this.combined);
                }
                return this.combined;
            };
            Login.prototype.hide = function () {
                this.isHidden = true;
                this.getOrCreateCombined().hide();
            };
            Login.prototype.hideAndExecuteQuery = function () {
                this.hide();
                this.queryController.executeQuery();
            };
            Login.prototype.validate = function () {
                this.baseValidationEvent("validate", this.hide);
            };
            Login.prototype.submit = function () {
                var _this = this;
                var onSuccess = function () {
                    if (_this.credentials) {
                        _this.updateEndpointWithCredentials();
                    }
                    if (!_this.pageSettings) {
                        _this.hideAndExecuteQuery();
                    }
                };
                this.baseValidationEvent("submit", onSuccess);
            };
            Login.prototype.isAccessDeniedError = function (error) {
                return (error.status === 401) || (error.status === 403);
            };
            Login.prototype.baseValidationEvent = function (methodToGather, onSuccess) {
                var _this = this;
                Coveo.MobileUtils.hideIOSKeyboard(document.activeElement);
                this.resetErrorMessage();
                //deferreds is an array of deferred returned by all sub component. When they all resolve correctly, we're good to go.
                //allValidationPassed is a deferred we send to each sub component to alert them when everything is ok and they can proceed with their success callback
                var deferreds = [];
                var allValidationPassed = Coveo.$.Deferred();
                if (this.credentials) {
                    deferreds.push(this.credentials[methodToGather](allValidationPassed));
                }
                if (this.pageSettings) {
                    deferreds.push(this.pageSettings[methodToGather](allValidationPassed));
                }
                Coveo.$.when.apply(this, deferreds).fail(function (error) {
                    _this.show();
                    allValidationPassed.reject(false);
                    if (_this.pageSettings && Coveo.Utils.isNonEmptyString(_this.getPageSettingsUrl())) {
                        _this.setErrorMessage(error);
                    }
                    if (_this.credentials && (Coveo.Utils.isNonEmptyString(_this.getPassword()) || Coveo.Utils.isNonEmptyString(_this.getUser()))) {
                        _this.setErrorMessage(error);
                    }
                }).always(function () {
                    _this.submitButton.removeClass("coveo-waiting");
                }).done(function () {
                    allValidationPassed.resolve(true);
                    Coveo.$.proxy(onSuccess, _this);
                });
            };
            Login.prototype.show = function () {
                this.isHidden = false;
                this.ensureDom();
                Coveo.MobileUtils.removeToggleClassOnSearchInterface();
                this.getOrCreateCombined().show();
                if (Coveo.DeviceUtils.isPhonegap()) {
                    Coveo.$(document).on("backbutton", Coveo.$.proxy(this.handleBackButton, this));
                }
            };
            Login.prototype.handleBackButton = function () {
                this.hide();
                Coveo.$(document).off("backbutton");
            };
            Login.prototype.handleQueryError = function (e, args) {
                if (this.isAccessDeniedError(args.error)) {
                    this.setErrorMessage(Ui.l("BadUserPass"));
                    this.show();
                }
            };
            Login.prototype.updateEndpointWithCredentials = function () {
                if (this.credentials && Coveo.Rest.SearchEndpoint.endpoints[this.options.id] != undefined) {
                    Coveo.Rest.SearchEndpoint.endpoints[this.options.id].options.password = this.getPassword();
                    Coveo.Rest.SearchEndpoint.endpoints[this.options.id].options.username = this.getUser();
                }
            };
            Login.prototype.buildTabButton = function () {
                var _this = this;
                Coveo.$(this.element).append(Coveo.$(this.tabButtonTemplate()));
                Coveo.$(this.element).fastClick(function () {
                    _this.show();
                });
            };
            Login.ID = 'Login';
            Login.options = {
                id: Ui.ComponentOptions.buildStringOption({ defaultValue: "default" }),
                caption: Ui.ComponentOptions.buildLocalizedStringOption(),
                autoTriggerQuery: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                requireLogin: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                requirePageSettings: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false })
            };
            return Login;
        })(Ui.Component);
        Ui.Login = Login;
        Ui.CoveoJQuery.registerAutoCreateComponent(Login);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var QueryBox = (function (_super) {
            __extends(QueryBox, _super);
            function QueryBox(element, options, bindings) {
                var _this = this;
                _super.call(this, element, QueryBox.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, QueryBox, options);
                Ui.Component.pointElementsToDummyForm(Coveo.$(element));
                Coveo.$(element).change(function (event) {
                    _this._handleChange(event);
                });
                Coveo.$(element).keyup(function (event) {
                    _this._handleKeyUp(event);
                });
                var model = Coveo.Models;
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.buildingQuery, Coveo.$.proxy(this.handleBuildingQuery, this));
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.newQuery, Coveo.$.proxy(this._handleNewQuery, this));
                var eventName = this.queryStateModel.getEventName(model.Model.eventTypes.changeOne + model.QueryStateModel.attributesEnum.q);
                Coveo.$(this.queryStateModel.element).on(eventName, Coveo.$.proxy(this._handleQueryStateChanged, this));
                this._clearElement = Coveo.$("<span></span>").addClass('coveo-query-box-clear').hide();
                var clearElementIcon = Coveo.$("<span></span>").addClass('coveo-icon').appendTo(this._clearElement);
                this._clearElement.fastClick(function () {
                    _this.clear();
                    _this._hideClearElement();
                    _this.updateQueryState();
                    if (!Coveo.DeviceUtils.isMobileDevice()) {
                        Coveo.$(_this.element).focus();
                    }
                    // We do not want to redirect on clear on a standalone search box, as it creates a weird interaction.
                    if (!_this.queryController.isStandaloneSearchBox()) {
                        _this.queryController.deferExecuteQuery({ beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.searchboxClear, {}); } });
                    }
                });
                if (Coveo.DeviceUtils.isSmallScreenWidth()) {
                    Coveo.$(this.element).focus(function () {
                        Coveo.MobileUtils.removeToggleClassOnSearchInterface();
                    });
                }
                Coveo.$(this.element).after(this._clearElement);
                if (this.options.autoFocus) {
                    try {
                        Coveo.$(this.element).focus();
                    }
                    catch (e) {
                    }
                }
            }
            QueryBox.prototype.clear = function () {
                Coveo.$(this.element).val("");
                this.updateQueryState();
            };
            QueryBox.prototype.replace = function (searchValue, newValue) {
                Coveo.$(this.element).val(Coveo.$(this.element).val().replace(searchValue, newValue));
                this.updateQueryState();
            };
            QueryBox.prototype.replaceCurrentExpression = function (newValue) {
                this.replace(this.getCurrentQueryExpression(), newValue);
                this.updateQueryState();
            };
            QueryBox.prototype.clearCurrentExpression = function () {
                this.replace(this.getCurrentQueryExpression(), "");
                this.updateQueryState();
            };
            QueryBox.prototype.getCurrentQueryExpression = function () {
                var cursorPos = Coveo.$(this.element).getCursorPosition();
                var value = Coveo.$(this.element).val();
                var length = value.length;
                var start = cursorPos;
                var end = cursorPos;
                if (value[start] == " ") {
                    start--;
                }
                while (start > 0 && value[start] != " ") {
                    start--;
                }
                while (end < length && value[end] != " ") {
                    end++;
                }
                return value.substring(start, end);
            };
            QueryBox.prototype.insertAt = function (at, toInsert) {
                var oldValue = Coveo.$(this.element).val();
                var newValue = [oldValue.slice(0, at), toInsert, oldValue.slice(at)].join("");
                Coveo.$(this.element).val(newValue);
                this.updateQueryState();
            };
            QueryBox.prototype._handleChange = function (event) {
                this._addClearElement();
                this.updateQueryState();
                return undefined;
            };
            QueryBox.prototype._handleQueryStateChanged = function (e, data) {
                Coveo.Assert.exists(data);
                var q = data.value;
                Coveo.$(this.element).val(q);
                this._addClearElement();
            };
            QueryBox.prototype._handleKeyUp = function (event) {
                Coveo.Assert.exists(event);
                this._addClearElement();
                if (event.which == 13) {
                    this.logger.debug('Performing query because user pressed Enter');
                    this.updateQueryState();
                    this.enterOnSearchBox();
                    event.stopPropagation();
                    if (Coveo.DeviceUtils.isMobileDevice()) {
                        Coveo.$(this.element).blur();
                    }
                }
                else if (this.options.enableSearchAsYouType && Coveo.KeyboardUtils.isAllowedKeyForSearchAsYouType(event)) {
                    this.startNewSearchAsYouTypeTimeout();
                }
            };
            QueryBox.prototype._addClearElement = function () {
                if (Coveo.$(this.element).val() == "") {
                    this._hideClearElement();
                }
                else {
                    this._showClearElement();
                }
            };
            QueryBox.prototype._hideClearElement = function () {
                this._clearElement.hide();
            };
            QueryBox.prototype._showClearElement = function () {
                this._clearElement.show();
            };
            QueryBox.prototype.startNewSearchAsYouTypeTimeout = function () {
                var _this = this;
                this.cancelAnyPendingSearchAsYouTypeTimeout();
                this.searchAsYouTypeTimeout = setTimeout(function () {
                    _this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchAsYouType(Ui.AnalyticsActionCauseList.searchboxAsYouType, {}); }, true);
                }, this.options.searchAsYouTypeDelay);
            };
            QueryBox.prototype._handleNewQuery = function (e, data) {
                QueryBox.queryBoxIsAlreadyAddedToQuery = false;
            };
            QueryBox.prototype.handleBuildingQuery = function (e, data) {
                Coveo.Assert.exists(data);
                Coveo.Assert.exists(data.queryBuilder);
                var query = Coveo.$(this.element).val();
                if (this.options.enableWildcards) {
                    data.queryBuilder.enableWildcards = true;
                }
                if (this.options.enableQuestionMarks) {
                    data.queryBuilder.enableQuestionMarks = true;
                }
                if (this.options.enableLowercaseOperators) {
                    data.queryBuilder.enableLowercaseOperators = true;
                }
                if (this.options.enablePartialMatch) {
                    data.queryBuilder.enablePartialMatch = true;
                    data.queryBuilder.partialMatchKeywords = this.options.partialMatchKeywords;
                    data.queryBuilder.partialMatchThreshold = this.options.partialMatchThreshold;
                }
                if (Coveo.Utils.isNonEmptyString(query) && !QueryBox.queryBoxIsAlreadyAddedToQuery) {
                    if (this.options.disableQuerySyntax) {
                        data.queryBuilder.expression.add("<@- " + query + " -@>");
                    }
                    else {
                        data.queryBuilder.expression.add(query);
                    }
                    this.logger.trace('Adding query to QueryBuilder', query);
                    QueryBox.queryBoxIsAlreadyAddedToQuery = true;
                }
            };
            QueryBox.prototype.enterOnSearchBox = function () {
                var _this = this;
                Coveo.$(this.element).trigger(Coveo.Events.UserActionEvents.enterOnSearchBox);
                this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.searchboxSubmit, {}); }, false);
            };
            QueryBox.prototype.triggerNewQuery = function (beforeExecuteQuery, searchAsYouType) {
                this.cancelAnyPendingSearchAsYouTypeTimeout();
                this.queryController.deferExecuteQuery({ beforeExecuteQuery: beforeExecuteQuery, searchAsYouType: searchAsYouType });
            };
            QueryBox.prototype.updateQueryState = function () {
                var query = Coveo.$(this.element).val();
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.q, query);
            };
            QueryBox.prototype.cancelAnyPendingSearchAsYouTypeTimeout = function () {
                if (Coveo.Utils.exists(this.searchAsYouTypeTimeout)) {
                    clearTimeout(this.searchAsYouTypeTimeout);
                    this.searchAsYouTypeTimeout = undefined;
                }
            };
            QueryBox.ID = 'QueryBox';
            QueryBox.options = {
                enableSearchAsYouType: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                searchAsYouTypeDelay: Ui.ComponentOptions.buildNumberOption({ defaultValue: 500 }),
                disableQuerySyntax: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                enableWildcards: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                enableQuestionMarks: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                enableLowercaseOperators: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                enablePartialMatch: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                partialMatchKeywords: Ui.ComponentOptions.buildNumberOption({ defaultValue: 5 }),
                partialMatchThreshold: Ui.ComponentOptions.buildStringOption({ defaultValue: '50%' }),
                autoFocus: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true })
            };
            QueryBox.queryBoxIsAlreadyAddedToQuery = false;
            return QueryBox;
        })(Coveo.Ui.Component);
        Ui.QueryBox = QueryBox;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(QueryBox);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var SearchButton = (function (_super) {
            __extends(SearchButton, _super);
            function SearchButton(element, options, bindings) {
                _super.call(this, element, SearchButton.ID, bindings);
                this.element = element;
                this.options = options;
                this.bind.fastClick(Coveo.$(element), this.handleClick);
                // Provide a magnifier icon if element contains nothing
                if (Coveo.$.trim(Coveo.$(element).text()) == '') {
                    Coveo.$('<span/>').text(Ui.l("Search")).addClass('coveo-icon').appendTo(element);
                }
            }
            SearchButton.prototype.handleClick = function () {
                var _this = this;
                this.logger.debug('Performing query following button click');
                this.queryController.deferExecuteQuery({ beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.searchboxSubmit, {}); } });
            };
            SearchButton.ID = 'SearchButton';
            return SearchButton;
        })(Ui.Component);
        Ui.SearchButton = SearchButton;
        Ui.CoveoJQuery.registerAutoCreateComponent(SearchButton);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var SearchBox = (function (_super) {
            __extends(SearchBox, _super);
            function SearchBox(element, options, bindings) {
                _super.call(this, element, SearchBox.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, SearchBox, options);
                this.searchButton = new Ui.SearchButton(Coveo.$('<a/>').appendTo(this.element).get(0), undefined, bindings);
                var stretch = Coveo.$('<div/>').appendTo(this.element);
                var tag = this.buildInputTag();
                tag.appendTo(stretch);
                if (this.options.activateOmniBox) {
                    this.searchBox = new Ui.OmniBox(tag.get(0), this.options, bindings);
                }
                else {
                    this.searchBox = new Ui.QueryBox(tag.get(0), this.options, bindings);
                }
            }
            SearchBox.prototype.buildInputTag = function () {
                var _this = this;
                return Coveo.$('<input type="text" autocapitalize="off" autocorrect="off" />').blur(function (event) {
                    _this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.q, Coveo.$(event.target).val());
                });
            };
            SearchBox.ID = 'SearchBox';
            SearchBox.parent = Ui.OmniBox;
            SearchBox.options = {
                activateOmniBox: Ui.ComponentOptions.buildBooleanOption({
                    attrName: 'data-activate-omnibox',
                    defaultValue: false,
                    postProcessing: function (value, options) {
                        if (options.enableSearchAsYouType) {
                            if (value) {
                                new Coveo.Logger(document).warn("Cannot initialize omnibox and search as you type at the same time : Disabling omnibox functionnality");
                            }
                            return false;
                        }
                        return value;
                    }
                }),
                enableSearchAsYouType: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                searchAsYouTypeDelay: Ui.ComponentOptions.buildNumberOption({ defaultValue: 500 }),
                disableQuerySyntax: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                enableWildcards: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                enableQuestionMarks: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                enableLowercaseOperators: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                enablePartialMatch: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                partialMatchKeywords: Ui.ComponentOptions.buildNumberOption({ defaultValue: 5 }),
                partialMatchThreshold: Ui.ComponentOptions.buildStringOption({ defaultValue: '50%' }),
                autoFocus: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true })
            };
            return SearchBox;
        })(Coveo.Ui.Component);
        Ui.SearchBox = SearchBox;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(SearchBox);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var OmniBox = (function (_super) {
            __extends(OmniBox, _super);
            function OmniBox(element, options, bindings) {
                var _this = this;
                _super.call(this, element, options, bindings);
                this.element = element;
                this.options = options;
                this.omniBoxHeaderSearchForTemplate = Coveo._.template("<div class='coveo-omnibox-selectable coveo-omnibox-section coveo-omnibox-header'>" + "<div class='coveo-text'>" + Ui.l("SearchFor", "<strong><%- data %></strong>") + "</div>" + "</div>");
                this.omniBoxIsOpen = false;
                this.isLoadingData = false;
                this.headerIsCurrentlyRendered = false;
                this.options = Ui.ComponentOptions.initComponentOptions(element, OmniBox, options);
                Coveo.$(element).keyup(function (event) { return _this._handleKeyUp(event); });
                this.renderOmniBoxDiv();
                this.omniBoxDiv.hide();
                this.prepareThrottledCall();
                Coveo.$(this.root).fastClick(function (e) {
                    if (_this.omniBoxIsOpen && !Coveo.$.contains(_this.omniBoxDiv.get(0), Coveo.$(e.target).get(0))) {
                        _this.escapeEvent();
                    }
                });
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + Coveo.Models.QueryStateModel.attributesEnum.q);
                Coveo.$(this.queryStateModel.element).on(eventName, Coveo.$.proxy(this._handleQueryStateChanged, this));
                Coveo.$(window).on("resize", function () {
                    if (_this.omniBoxIsOpen) {
                        _this.setWidthOnOmniBoxDiv();
                    }
                });
            }
            OmniBox.prototype.close = function () {
                Coveo.$(this.root).trigger(Coveo.Events.OmniBoxEvents.closeOmniBox);
                if (this.omniBoxDiv) {
                    this.omniBoxDiv.children().remove();
                    this.omniBoxDiv.hide();
                }
                this.clearLastOmniBoxRows();
                if (!Coveo.Utils.isNullOrUndefined(this.lastOmniBoxData)) {
                    this.rejectAllPendingDeferred(this.lastOmniBoxData);
                }
                this.resetOmniBoxInternalData();
                this.omniBoxIsOpen = false;
            };
            OmniBox.prototype.open = function () {
                if (Coveo.$(this.element).val() != "") {
                    this.throttledCallForOmniBoxBody();
                    Coveo.$(this.root).trigger(Coveo.Events.OmniBoxEvents.openOmniBox);
                }
                else {
                    this.escapeEvent();
                }
            };
            OmniBox.prototype.getDataForOmniboxBody = function () {
                this.addSearchAnimation();
                if (!this.isCurrentlyBeingRendered) {
                    var omniBoxRequestObject = this.buildOmniBoxRequestObject();
                    var data = this.requestOmniBoxData(omniBoxRequestObject);
                    this.processNewOmniBoxData(data);
                }
                else {
                    this.throttledCallForOmniBoxBody();
                }
            };
            OmniBox.prototype.buildOmniBoxRequestObject = function () {
                var _this = this;
                var currentQueryExpression = this.getCurrentQueryExpression();
                var ret = {
                    completeQueryExpression: {
                        word: Coveo.$(this.element).val(),
                        regex: this.getRegexToSearch()
                    },
                    currentQueryExpression: {
                        word: currentQueryExpression,
                        regex: this.getRegexToSearch(currentQueryExpression)
                    },
                    allQueryExpressions: this.getQueryExpressionBreakDown(),
                    cursorPosition: Coveo.$(this.element).getCursorPosition(),
                    clear: function () {
                        _this.clear();
                    },
                    clearCurrentExpression: function () {
                        _this.clearCurrentExpression();
                    },
                    replace: function (searchValue, newValue) {
                        _this.replace(searchValue, newValue);
                    },
                    replaceCurrentExpression: function (newValue) {
                        _this.replaceCurrentExpression(newValue);
                    },
                    insertAt: function (at, toInsert) {
                        _this.insertAt(at, toInsert);
                    },
                    closeOmniBox: function () {
                        _this.close();
                    }
                };
                return ret;
            };
            OmniBox.prototype.prepareThrottledCall = function () {
                this.throttledCallForOmniBoxBody = Coveo.Utils.throttle(this.getDataForOmniboxBody, this.options.omniBoxDelay, undefined, this);
            };
            OmniBox.prototype.requestOmniBoxData = function (dataToSearch) {
                Coveo.Assert.exists(dataToSearch);
                this.logger.info("Requesting omnibox data to all components");
                var eventArgs = Coveo.$.extend({ rows: [] }, dataToSearch);
                Coveo.$(this.root).trigger(Coveo.Events.OmniBoxEvents.populateOmniBox, eventArgs);
                return eventArgs;
            };
            OmniBox.prototype.getQueryExpressionBreakDown = function () {
                var _this = this;
                var ret = [];
                var queryWords = Coveo.$(this.element).val().split(" ");
                Coveo._.each(queryWords, function (word) {
                    ret.push({
                        word: word,
                        regex: _this.getRegexToSearch(word)
                    });
                });
                return ret;
            };
            OmniBox.prototype._handleNewQuery = function (e, data) {
                _super.prototype._handleNewQuery.call(this, e, data);
                if (this.omniBoxIsOpen) {
                    e.stopPropagation();
                }
            };
            OmniBox.prototype._handleKeyUp = function (event) {
                var _this = this;
                //block keyup event on QueryBox
                event.stopImmediatePropagation();
                var currentNumberOfLettersInOmniBox = Coveo.$(this.element).val().length;
                if (!Coveo.Utils.isNullOrUndefined(this.lastOmniBoxData) && !Coveo.Utils.isNullOrUndefined(this.lastNumberOfLettersInOmniBox) && Math.abs(currentNumberOfLettersInOmniBox - this.lastNumberOfLettersInOmniBox) > this.options.omniBoxChangeLimit) {
                    this.rejectAllPendingDeferred(this.lastOmniBoxData);
                    this.prepareThrottledCall();
                }
                if (Coveo.KeyboardUtils.keysEqual(event, 27 /* ESCAPE */) && this.omniBoxIsOpen) {
                    this.escapeEvent();
                }
                else if (Coveo.KeyboardUtils.keysEqual(event, 13 /* ENTER */)) {
                    if (this.omniBoxIsOpen) {
                        this.selectionEvent();
                    }
                    else {
                        this.escapeEvent();
                        this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.searchboxSubmit, {}); });
                    }
                }
                else if (Coveo.KeyboardUtils.isArrowKeyPushed(event.keyCode) && this.omniBoxIsOpen) {
                    this.navigationEvent(event);
                }
                else if (Coveo.KeyboardUtils.isAllowedKeyForOmniBox(event)) {
                    if (Coveo.$(this.element).val() == "") {
                        this.escapeEvent();
                    }
                    else {
                        this.open();
                    }
                }
            };
            OmniBox.prototype._handleChange = function (event) {
                //block change event on QueryBox
                event.stopImmediatePropagation();
                return false;
            };
            OmniBox.prototype.handleHover = function (event) {
                var target = this.getCorrectTarget(event);
                if (target) {
                    this.toggleSelected(target);
                }
            };
            OmniBox.prototype.bindOmniBoxEvent = function () {
                this.bindHoverEvent();
            };
            OmniBox.prototype.bindHoverEvent = function () {
                var _this = this;
                Coveo.$(this.omniBoxDiv).find(".coveo-omnibox-selectable").hover(function (e) {
                    _this.handleHover(e);
                });
            };
            OmniBox.prototype.escapeEvent = function () {
                this.clearLastOmniBoxRows();
                this.close();
                this.removeSearchAnimation();
            };
            OmniBox.prototype.selectionEvent = function () {
                var _this = this;
                if (!this.isFirstValueSelected(this.findSelected())) {
                    this.keyBoardSelection();
                }
                else {
                    this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.searchboxSubmit, {}); });
                }
            };
            OmniBox.prototype.navigationEvent = function (event) {
                var alreadySelected = this.findSelected();
                if (alreadySelected.length == 0) {
                    this.navigationEventWhenNoSelection(event);
                }
                else {
                    this.navigationEventWhenSelection(event, alreadySelected);
                }
            };
            OmniBox.prototype.navigationEventWhenNoSelection = function (event) {
                if (Coveo.KeyboardUtils.keysEqual(event, 40 /* DOWN_ARROW */)) {
                    this.findSelectable().first().addClass('coveo-omnibox-selected');
                }
                else {
                    return;
                }
            };
            OmniBox.prototype.navigationEventWhenSelection = function (event, alreadySelected) {
                if (!this.isLoadingData) {
                    switch (event.keyCode) {
                        case 38 /* UP_ARROW */:
                            if (!this.isFirstValueSelected(alreadySelected)) {
                                this.unselectValueInOmnibox(alreadySelected);
                                this.selectValueBeforeAlreadySelected(alreadySelected);
                            }
                            break;
                        case 40 /* DOWN_ARROW */:
                            if (!this.isLastValueSelected(alreadySelected)) {
                                this.unselectValueInOmnibox(alreadySelected);
                                this.selectValueAfterAlreadySelected(alreadySelected);
                            }
                            break;
                        default:
                            break;
                    }
                }
            };
            OmniBox.prototype.keyBoardSelection = function () {
                this.logger.trace("Selecting facet value because of omnibox selection");
                var selectedInOmnibox = this.findSelected();
                selectedInOmnibox.trigger('keyboardSelect');
                this.escapeEvent();
            };
            OmniBox.prototype.triggerNewQuery = function (beforeExecuteQuery) {
                this.logger.info("Triggering new query because of omnibox selection");
                this.escapeEvent();
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.q, Coveo.$(this.element).val());
                this.queryController.deferExecuteQuery({ beforeExecuteQuery: beforeExecuteQuery });
            };
            OmniBox.prototype.processNewOmniBoxData = function (data) {
                this.logger.trace('Processing omnibox data');
                this.isCurrentlyBeingRendered = true;
                this.numberOfPendingQueries = 0;
                this.renderOmniBoxBody(data);
                this.omniBoxIsOpen = true;
            };
            OmniBox.prototype.renderHeader = function () {
                this.buildHeader();
                this.setWidthOnOmniBoxDiv();
                this.omniBoxDiv.show();
                this.findSelectable().first().addClass('coveo-omnibox-selected');
                this.headerIsCurrentlyRendered = true;
            };
            OmniBox.prototype.renderOmniBoxDiv = function () {
                this.omniBoxDiv = Coveo.$("<div class='coveo-omnibox'></div>");
                Coveo.$(this.element).after(this.omniBoxDiv);
            };
            OmniBox.prototype.setWidthOnOmniBoxDiv = function () {
                this.omniBoxDiv.width(this.getWidth());
            };
            OmniBox.prototype.buildHeader = function () {
                var _this = this;
                if (this.omniBoxHeader != undefined) {
                    this.omniBoxHeader.remove();
                }
                this.omniBoxHeader = Coveo.$(this.omniBoxHeaderSearchForTemplate({ data: Coveo.$(this.element).val() }));
                this.omniBoxHeader.fastClick(function () {
                    _this.triggerNewQuery(function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.searchboxSubmit, {}); });
                });
                this.omniBoxDiv.prepend(this.omniBoxHeader);
            };
            OmniBox.prototype.renderOmniBoxBody = function (data) {
                var _this = this;
                this.omniBoxRows = [];
                this.lastOmniBoxData = data;
                this.lastNumberOfLettersInOmniBox = Coveo.$(this.element).val().length;
                var atLeastOneRowCurrentlyExists = Coveo._.find(data.rows, function (row) {
                    return !Coveo.Utils.isNullOrUndefined(row.element);
                });
                Coveo._.each(data.rows, function (row) {
                    if (!Coveo.Utils.isNullOrUndefined(row.element)) {
                        _this.renderOmniBoxForOneElement(row);
                    }
                    else if (!Coveo.Utils.isNullOrUndefined(row.deferred)) {
                        _this.numberOfPendingQueries++;
                        _this.renderOmniBoxForOneElementDeferred(row);
                    }
                });
                if (this.numberOfPendingQueries == 0) {
                    this.allDeferredHaveArrived();
                }
                setTimeout(function () {
                    _this.rejectAllPendingDeferred(data);
                }, this.options.omniBoxTimeout);
            };
            OmniBox.prototype.rejectAllPendingDeferred = function (data) {
                Coveo._.each(data.rows, function (row) {
                    if (!Coveo.Utils.isNullOrUndefined(row.deferred) && row.deferred.state() == 'pending') {
                        row.deferred.reject();
                    }
                });
            };
            OmniBox.prototype.allDeferredHaveArrived = function () {
                this.appendOmniBoxSections();
                this.resetOmniBoxInternalData();
                this.removeSearchAnimation();
            };
            OmniBox.prototype.clearLastOmniBoxRows = function () {
                if (this.lastOmniBoxRows != undefined) {
                    Coveo._.each(this.lastOmniBoxRows, function (row) {
                        Coveo.$(row.element).remove();
                    });
                }
            };
            OmniBox.prototype.appendOmniBoxSections = function () {
                if (this.omniBoxRows.length > 0 && Coveo.$(this.element).val() != "") {
                    this.renderHeader();
                    this.clearLastOmniBoxRows();
                    this.omniBoxRows = Coveo._.sortBy(this.omniBoxRows, function (row) {
                        return row.zIndex;
                    }).reverse();
                    for (var i = 0; i < this.omniBoxRows.length; i++) {
                        this.omniBoxDiv.append(this.omniBoxRows[i].element);
                    }
                    this.bindOmniBoxEvent();
                    this.resetOmniBoxInternalData();
                }
                else {
                    this.close();
                }
            };
            OmniBox.prototype.resetOmniBoxInternalData = function () {
                this.lastOmniBoxRows = this.omniBoxRows;
                this.isCurrentlyBeingRendered = false;
                this.headerIsCurrentlyRendered = false;
            };
            OmniBox.prototype.renderOmniBoxForOneElement = function (row) {
                var zIndex = row.zIndex || -1;
                Coveo.$(row.element).addClass('coveo-omnibox-section');
                this.omniBoxRows.push({ zIndex: zIndex, element: row.element });
            };
            OmniBox.prototype.renderOmniBoxForOneElementDeferred = function (row) {
                var _this = this;
                row.deferred.done(function (row) {
                    if (!_this.headerIsCurrentlyRendered && row.element != undefined) {
                        _this.renderHeader();
                    }
                    _this.numberOfPendingQueries--;
                    if (!Coveo.Utils.isNullOrUndefined(row.element)) {
                        _this.renderOmniBoxForOneElement(row);
                    }
                    if (_this.numberOfPendingQueries == 0) {
                        _this.allDeferredHaveArrived();
                    }
                });
                row.deferred.fail(function () {
                    _this.numberOfPendingQueries--;
                    if (_this.numberOfPendingQueries == 0) {
                        _this.allDeferredHaveArrived();
                    }
                });
            };
            OmniBox.prototype.isFirstValueSelected = function (selected) {
                return selected.get(0) == this.findSelectable().first().get(0);
            };
            OmniBox.prototype.isLastValueSelected = function (selected) {
                return selected.get(0) == this.findSelectable().last().get(0);
            };
            OmniBox.prototype.unselectValueInOmnibox = function (alreadySelected) {
                alreadySelected.removeClass('coveo-omnibox-selected');
            };
            OmniBox.prototype.selectValueBeforeAlreadySelected = function (alreadySelected) {
                Coveo.$(this.findSelectable().get(this.findPosOfAlreadySelected(alreadySelected) - 1)).addClass('coveo-omnibox-selected');
            };
            OmniBox.prototype.selectValueAfterAlreadySelected = function (alreadySelected) {
                Coveo.$(this.findSelectable().get(this.findPosOfAlreadySelected(alreadySelected) + 1)).addClass('coveo-omnibox-selected');
            };
            OmniBox.prototype.findPosOfAlreadySelected = function (alreadySelected) {
                var alreadySelectedPos = -1;
                var allSelectable = this.findSelectable();
                Coveo._.find(allSelectable, function (selectable) {
                    alreadySelectedPos++;
                    return selectable == alreadySelected.get(0);
                });
                return alreadySelectedPos;
            };
            OmniBox.prototype.findSelectable = function () {
                return this.omniBoxDiv.find(".coveo-omnibox-selectable");
            };
            OmniBox.prototype.findSelected = function () {
                return this.findSelectable().closest(".coveo-omnibox-selected");
            };
            OmniBox.prototype.toggleSelected = function (newSelected) {
                this.omniBoxDiv.find(".coveo-omnibox-selected").removeClass('coveo-omnibox-selected');
                newSelected.addClass('coveo-omnibox-selected');
            };
            OmniBox.prototype.getWidth = function () {
                var elem = Coveo.$(this.element);
                return elem.outerWidth() + this.getSearchButtonWidth();
            };
            OmniBox.prototype.getSearchButtonWidth = function () {
                var searchBox = Coveo.$(this.element).closest("." + Ui.Component.computeCssClassNameForType(Ui.SearchBox.ID));
                if (searchBox.length != 0) {
                    var searchBoxComponent = searchBox.coveo(Ui.SearchBox);
                    return searchBoxComponent.searchButton != undefined ? Coveo.$(searchBoxComponent.searchButton.element).outerWidth() : 0;
                }
                return 0;
            };
            OmniBox.prototype.getRegexToSearch = function (strValue) {
                if (strValue === void 0) { strValue = Coveo.$(this.element).val(); }
                return new RegExp(Coveo.Utils.escapeRegexCharacter(strValue), "i");
            };
            OmniBox.prototype.getCorrectTarget = function (event) {
                var target = Coveo.$(event.target);
                return target.closest(".coveo-omnibox-selectable");
            };
            OmniBox.prototype.addSearchAnimation = function () {
                this._hideClearElement();
                Coveo.$(this.element).addClass('coveo-loading');
                this.isLoadingData = true;
            };
            OmniBox.prototype.removeSearchAnimation = function () {
                Coveo.$(this.element).removeClass('coveo-loading');
                this._addClearElement();
                this.isLoadingData = false;
            };
            OmniBox.ID = 'OmniBox';
            OmniBox.options = {
                omniBoxDelay: Ui.ComponentOptions.buildNumberOption({ defaultValue: 500 }),
                omniBoxTimeout: Ui.ComponentOptions.buildNumberOption({ defaultValue: 2000 }),
                omniBoxChangeLimit: Ui.ComponentOptions.buildNumberOption({ defaultValue: 3 }),
                omniBoxMinimumLetters: Ui.ComponentOptions.buildNumberOption({ defaultValue: 1 })
            };
            OmniBox.parent = Ui.QueryBox;
            return OmniBox;
        })(Ui.QueryBox);
        Ui.OmniBox = OmniBox;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(OmniBox);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var SuggestionForOmniBox = (function () {
            function SuggestionForOmniBox(structure, onSelect) {
                this.structure = structure;
                this.onSelect = onSelect;
            }
            SuggestionForOmniBox.prototype.buildOmniBoxElement = function (results, args) {
                var element;
                if (results.length != 0) {
                    element = Coveo.$("<div></div>");
                    var header = this.buildElementHeader();
                    element.append(header);
                    var rows = this.buildRowElements(results, args);
                    Coveo._.each(rows, function (row) {
                        element.append(row);
                    });
                }
                return element;
            };
            SuggestionForOmniBox.prototype.buildElementHeader = function () {
                return Coveo.$(this.structure.header.template({
                    headerTitle: this.structure.header.title
                }));
            };
            SuggestionForOmniBox.prototype.buildRowElements = function (results, args) {
                var _this = this;
                var ret = [];
                Coveo._.each(results, function (result) {
                    var row = Coveo.$(_this.structure.row({
                        rawValue: result.value,
                        data: Coveo.JQueryUtils.highlightElement(result.value, args.completeQueryExpression.word)
                    }));
                    row.fastClick(function () {
                        _this.onSelect.call(_this, result.value, args);
                    });
                    row.on("keyboardSelect", function () {
                        _this.onSelect.call(_this, result.value, args);
                    });
                    ret.push(row);
                });
                return ret;
            };
            return SuggestionForOmniBox;
        })();
        Ui.SuggestionForOmniBox = SuggestionForOmniBox;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var OmniBoxResultList = (function (_super) {
            __extends(OmniBoxResultList, _super);
            function OmniBoxResultList(element, options, bindings) {
                _super.call(this, element, options, bindings, OmniBoxResultList.ID);
                this.element = element;
                this.options = options;
                this.bindings = bindings;
                this.options = Ui.ComponentOptions.initComponentOptions(element, OmniBoxResultList, options);
                this.setupOptions();
                this.bind.onRoot(Coveo.Events.OmniBoxEvents.populateOmniBox, this.handlePopulateOmniBox);
            }
            OmniBoxResultList.prototype._buildResults = function (results) {
                var _this = this;
                if (this.lastOmniboxRequest) {
                    var content = Coveo.$("<div></div>");
                    content.append("<div class='coveo-omnibox-result-list-header'>\
          <span class='coveo-icon-omnibox-result-list'></span> \
          <span class='coveo-caption'>" + (this.options.headerTitle || Ui.l("SuggestedResults")) + "</span> \
        </div>");
                    Coveo._.each(results.results, function (result) {
                        var resultElement = _this._instantiateTemplateForResult(result);
                        Coveo.$(resultElement).data("CoveoResult", result).addClass('coveo-omnibox-selectable').appendTo(content);
                        Coveo.$(resultElement).on("keyboardSelect", function () {
                            _this.options.onSelect.call(_this, result, Coveo.$(resultElement), _this.lastOmniboxRequest.omniboxObject);
                        });
                        _this._autoCreateComponentsInsideResult(resultElement, result);
                        _this._triggerNewResultDisplayed(result, resultElement);
                    });
                    this.lastOmniboxRequest.deferred.resolve({ element: content.get(0), zIndex: this.options.omniboxZIndex });
                }
            };
            OmniBoxResultList.prototype.setupOptions = function () {
                this.logger.info('Disabling infinite scroll for OmniBoxResultList', this);
                this.options.enableInfiniteScroll = false;
                this.options.onSelect = this.options.onSelect || this.onRowSelection;
            };
            OmniBoxResultList.prototype.handlePopulateOmniBox = function (e, args) {
                var _this = this;
                var deferred = Coveo.$.Deferred();
                args.rows.push({
                    deferred: deferred
                });
                this.lastOmniboxRequest = { omniboxObject: args, deferred: deferred };
                this.queryController.executeQuery({ beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchAsYouType(Ui.AnalyticsActionCauseList.searchboxSubmit, {}); }, searchAsYouType: true });
            };
            OmniBoxResultList.prototype.onRowSelection = function (result, resultElement, omniboxObject) {
                this.usageAnalytics.logClickEvent(Ui.AnalyticsActionCauseList.documentOpen, { documentTitle: result.title, documentURL: result.clickUri }, result, this.root);
                window.location.href = result.clickUri;
            };
            OmniBoxResultList.ID = 'OmniBoxResultList';
            OmniBoxResultList.options = {
                omniboxZIndex: Ui.ComponentOptions.buildNumberOption(51),
                headerTitle: Ui.ComponentOptions.buildStringOption()
            };
            return OmniBoxResultList;
        })(Ui.ResultList);
        Ui.OmniBoxResultList = OmniBoxResultList;
        Ui.CoveoJQuery.registerAutoCreateComponent(OmniBoxResultList);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Pager = (function (_super) {
            __extends(Pager, _super);
            function Pager(element, options, bindings) {
                var _this = this;
                _super.call(this, element, Pager.ID, bindings);
                this.element = element;
                this.options = options;
                this.listenToQueryStateChange = true;
                this.needToReset = true;
                this.ignoreNextQuerySuccess = false;
                this.listItemTemplate = Coveo._.template('<li class="<%= _class %>"></li>');
                this.listItemValueTemplate = Coveo._.template('<a><%= listItemValue %></a>');
                this.navigationButtonTemplate = Coveo._.template('<li class="<%= _class %>"><a><span title="<%= buttonValue %>"/></a></li>');
                this.options = Ui.ComponentOptions.initComponentOptions(element, Pager, options);
                this.currentPage = 1;
                this.bind.onRoot(Coveo.Events.QueryEvents.newQuery, function (e, args) { return _this.handleNewQuery(); });
                this.bind.onRoot(Coveo.Events.QueryEvents.buildingQuery, function (e, args) { return _this.handleBuildingQuery(e, args); });
                this.bind.onRoot(Coveo.Events.QueryEvents.querySuccess, function (e, args) { return _this.handleQuerySuccess(e, args); });
                this.bind.onRoot(Coveo.Events.QueryEvents.queryError, function (e, args) { return _this.handleQueryError(e, args); });
                this.bind.onRoot(Coveo.Events.QueryEvents.noResults, function (e, args) { return _this.handleNoResults(e, args); });
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + Coveo.Models.QueryStateModel.attributesEnum.first);
                Coveo.$(this.queryStateModel.element).on(eventName, Coveo.$.proxy(this.handleQueryStateModelChanged, this));
                this.list = Coveo.$('<ul></ul>').appendTo(element);
            }
            Pager.prototype.setPage = function (pageNumber) {
                Coveo.Assert.exists(pageNumber);
                this.needToReset = false;
                this.currentPage = pageNumber;
                this.updateQueryStateModel(this.getFirstResultNumber(this.currentPage));
                this.usageAnalytics.logCustomEvent(Ui.AnalyticsActionCauseList.pagerNumber, { pagerNumber: pageNumber }, this.element);
                this.queryController.deferExecuteQuery();
            };
            Pager.prototype.previousPage = function () {
                this.needToReset = false;
                this.currentPage = this.currentPage - 1;
                this.currentPage = Math.max(this.currentPage, 1);
                this.updateQueryStateModel(this.getFirstResultNumber(this.currentPage));
                this.usageAnalytics.logCustomEvent(Ui.AnalyticsActionCauseList.pagerPrevious, { pagerNumber: this.currentPage }, this.element);
                this.queryController.deferExecuteQuery();
            };
            Pager.prototype.nextPage = function () {
                this.needToReset = false;
                this.currentPage = this.currentPage + 1;
                this.currentPage = Math.min(this.currentPage, 1000);
                this.updateQueryStateModel(this.getFirstResultNumber(this.currentPage));
                this.usageAnalytics.logCustomEvent(Ui.AnalyticsActionCauseList.pagerNext, { pagerNumber: this.currentPage }, this.element);
                this.queryController.deferExecuteQuery();
            };
            Pager.prototype.handleNewQuery = function () {
                if (this.needToReset) {
                    this.currentPage = 1;
                    this.updateQueryStateModel(this.getFirstResultNumber(this.currentPage));
                }
                this.needToReset = true;
            };
            Pager.prototype.updateQueryStateModel = function (attrValue) {
                this.listenToQueryStateChange = false;
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.first, attrValue);
                this.listenToQueryStateChange = true;
            };
            Pager.prototype.handleQueryError = function (e, data) {
                this.reset();
            };
            Pager.prototype.handleQuerySuccess = function (e, data) {
                var _this = this;
                this.reset();
                if (this.ignoreNextQuerySuccess) {
                    this.ignoreNextQuerySuccess = false;
                }
                else {
                    Coveo.Assert.isNotUndefined(data);
                    var firstResult = data.query.firstResult;
                    var count = data.results.totalCount;
                    var pagerBoundary = this.computePagerBoundary(firstResult, count);
                    this.currentPage = pagerBoundary.currentPage;
                    if (pagerBoundary.end - pagerBoundary.start > 0) {
                        for (var i = pagerBoundary.start; i <= pagerBoundary.end; i++) {
                            var listItemValue = Coveo.$(this.listItemValueTemplate({
                                listItemValue: i
                            }));
                            (function (pageNumber) {
                                var listItem = Coveo.$(_this.listItemTemplate({
                                    _class: (pageNumber == _this.currentPage ? 'coveo-active' : "")
                                })).fastClick(function () { return _this.handleClickPage(pageNumber); });
                                listItem.append(listItemValue).appendTo(_this.list);
                            })(i);
                        }
                        if (this.options.navigationButton && pagerBoundary.lastResultPage > 1) {
                            this.renderNavigationButton(pagerBoundary, this.list);
                        }
                    }
                }
            };
            Pager.prototype.handleNoResults = function (e, data) {
                var lastValidPage = this.computePagerBoundary(data.results.totalCount, data.results.totalCount).lastResultPage;
                if (this.currentPage > lastValidPage) {
                    this.ignoreNextQuerySuccess = true;
                    this.setPage(lastValidPage);
                }
            };
            Pager.prototype.reset = function () {
                Coveo.$(this.list).empty();
            };
            Pager.prototype.handleBuildingQuery = function (e, data) {
                Coveo.Assert.exists(data);
                var eventArgs = this.getQueryEventArgs();
                data.queryBuilder.firstResult = eventArgs.first;
                data.queryBuilder.numberOfResults = eventArgs.count;
            };
            Pager.prototype.computePagerBoundary = function (firstResult, totalCount) {
                var resultPerPage = this.queryController.options.resultsPerPage;
                var currentPage = Math.floor(firstResult / resultPerPage) + 1;
                var lastPageNumber = Math.ceil(totalCount / resultPerPage);
                lastPageNumber = Math.max(lastPageNumber, 1);
                var halfLength = Math.floor(this.options.numberOfPages / 2);
                var firstPageNumber = currentPage - halfLength;
                firstPageNumber = Math.max(firstPageNumber, 1);
                var endPageNumber = firstPageNumber + this.options.numberOfPages - 1;
                endPageNumber = Math.min(endPageNumber, lastPageNumber);
                return {
                    start: firstPageNumber,
                    end: endPageNumber,
                    lastResultPage: lastPageNumber,
                    currentPage: currentPage
                };
            };
            Pager.prototype.renderNavigationButton = function (pagerBoundary, list) {
                var _this = this;
                if (this.currentPage > 1) {
                    var previous = Coveo.$(this.navigationButtonTemplate({
                        _class: 'coveo-previous',
                        buttonValue: Ui.l("Previous")
                    })).prependTo(list);
                    previous.fastClick(function () { return _this.handleClickPrevious(); });
                }
                if (this.currentPage < pagerBoundary.lastResultPage) {
                    var next = Coveo.$(this.navigationButtonTemplate({
                        _class: 'coveo-next',
                        buttonValue: Ui.l("Next")
                    })).appendTo(list);
                    next.fastClick(function () { return _this.handleClickNext(); });
                }
            };
            Pager.prototype.handleQueryStateModelChanged = function (e, data) {
                if (!this.listenToQueryStateChange) {
                    return;
                }
                Coveo.Assert.exists(data);
                this.needToReset = false;
                var firstResult = data.value;
                this.currentPage = this.fromFirstResultsToPageNumber(firstResult);
            };
            Pager.prototype.handleClickPage = function (pageNumber) {
                Coveo.Assert.exists(pageNumber);
                this.setPage(pageNumber);
            };
            Pager.prototype.handleClickPrevious = function () {
                this.previousPage();
            };
            Pager.prototype.handleClickNext = function () {
                this.nextPage();
            };
            Pager.prototype.fromFirstResultsToPageNumber = function (firstResult) {
                return (firstResult / this.queryController.options.resultsPerPage) + 1;
            };
            Pager.prototype.getFirstResultNumber = function (pageNumber) {
                if (pageNumber === void 0) { pageNumber = this.currentPage; }
                return (pageNumber - 1) * this.queryController.options.resultsPerPage;
            };
            Pager.prototype.getQueryEventArgs = function () {
                return {
                    count: this.queryController.options.resultsPerPage,
                    first: this.getFirstResultNumber()
                };
            };
            Pager.ID = 'Pager';
            Pager.options = {
                numberOfPages: Ui.ComponentOptions.buildNumberOption({ defaultFunction: function () {
                    if (Coveo.DeviceUtils.isMobileDevice()) {
                        return 3;
                    }
                    else {
                        return 10;
                    }
                } }),
                navigationButton: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true, attrName: "data-show-previous-next" })
            };
            return Pager;
        })(Ui.Component);
        Ui.Pager = Pager;
        Ui.CoveoJQuery.registerAutoCreateComponent(Pager);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var PreferencesPanelBoxInput = (function () {
            function PreferencesPanelBoxInput(boxInputToBuild, nameOfInput, type) {
                this.boxInputToBuild = boxInputToBuild;
                this.nameOfInput = nameOfInput;
                this.type = type;
                this.inputs = {};
                this.inputTemplate = Coveo._.template("<div class='coveo-choice-container'>\
        <div class='coveo-section coveo-section-input'>\
          <input <%= otherAttribute %> class='coveo-<%= label %>' id='coveo-<%= label %>' type='<%= type %>' name='<%= name%>' value='<%= label %>' ></input><span class='coveo-input-icon'></span><label for='coveo-<%= label %>'><%= label %></label>\
        </div>\
        <div class='coveo-section coveo-section-tab'><%- tab %></div>\
      <div class='coveo-section coveo-section-expression'><%- expression %></div>\
      </div>");
            }
            PreferencesPanelBoxInput.prototype.build = function () {
                var _this = this;
                return Coveo._.reduce(Coveo._.map(this.boxInputToBuild, function (toBuild) {
                    _this.inputs[toBuild.label] = Coveo.$(_this.inputTemplate({ label: toBuild.label, name: _this.nameOfInput, type: _this.type, otherAttribute: toBuild.otherAttribute, tab: toBuild.tab, expression: toBuild.expression }));
                    return _this.inputs[toBuild.label];
                }), function (memo, input) {
                    return memo.add(input);
                });
            };
            PreferencesPanelBoxInput.prototype.select = function (toSelect) {
                Coveo.Assert.exists(this.inputs[toSelect]);
                this.inputs[toSelect].find("input").prop("checked", true);
                this.inputs[toSelect].find(".coveo-input-icon").addClass("coveo-selected");
            };
            PreferencesPanelBoxInput.prototype.unselect = function (toUnselect) {
                Coveo.Assert.exists(this.inputs[toUnselect]);
                this.inputs[toUnselect].find("input").prop("checked", false);
                this.inputs[toUnselect].find(".coveo-input-icon").removeClass("coveo-selected");
            };
            PreferencesPanelBoxInput.prototype.getSelected = function () {
                var checked = Coveo._.find(this.inputs, function (input) {
                    return input.find("input").prop("checked");
                });
                return checked.find("input").val();
            };
            PreferencesPanelBoxInput.prototype.getSelecteds = function () {
                var checkeds = Coveo._.filter(this.inputs, function (input) {
                    return input.find("input").prop("checked");
                });
                return Coveo._.map(checkeds, function (checked) {
                    return checked.find("input").val();
                });
            };
            return PreferencesPanelBoxInput;
        })();
        Ui.PreferencesPanelBoxInput = PreferencesPanelBoxInput;
        var PreferencesPanelRadioInput = (function (_super) {
            __extends(PreferencesPanelRadioInput, _super);
            function PreferencesPanelRadioInput(radioElementToBuild, name) {
                _super.call(this, radioElementToBuild, name, "radio");
                this.radioElementToBuild = radioElementToBuild;
                this.name = name;
            }
            return PreferencesPanelRadioInput;
        })(PreferencesPanelBoxInput);
        Ui.PreferencesPanelRadioInput = PreferencesPanelRadioInput;
        var PreferencesPanelCheckboxInput = (function (_super) {
            __extends(PreferencesPanelCheckboxInput, _super);
            function PreferencesPanelCheckboxInput(checkboxElementToBuild, name) {
                _super.call(this, checkboxElementToBuild, name, "checkbox");
                this.checkboxElementToBuild = checkboxElementToBuild;
                this.name = name;
            }
            PreferencesPanelCheckboxInput.prototype.build = function () {
                var build = _super.prototype.build.call(this);
                var input = build.find("input");
                var icons = build.find(".coveo-input-icon");
                Coveo._.each(icons, function (icon) {
                    var input = Coveo.$(icon).siblings("input");
                    var iconJquery = Coveo.$(icon);
                    input.change(function () {
                        iconJquery.toggleClass("coveo-selected", input.is(":checked"));
                    });
                    iconJquery.fastClick(function () {
                        input.prop("checked", !input.is(":checked"));
                        input.change();
                    });
                });
                return build;
            };
            return PreferencesPanelCheckboxInput;
        })(PreferencesPanelBoxInput);
        Ui.PreferencesPanelCheckboxInput = PreferencesPanelCheckboxInput;
        var PreferencesPanelTextInput = (function () {
            function PreferencesPanelTextInput(textElementToBuild, name) {
                this.textElementToBuild = textElementToBuild;
                this.name = name;
                this.inputs = {};
                this.inputTemplate = Coveo._.template("<div class='coveo-choice-container'><input <%= otherAttribute %> class='coveo-<%= label %>' id='coveo-<%= label %>' type='<%= type %>' name='<%= name%>' placeholder='<%= placeholder %>' ></input></div>");
            }
            PreferencesPanelTextInput.prototype.build = function () {
                var _this = this;
                return Coveo._.reduce(Coveo._.map(this.textElementToBuild, function (toBuild) {
                    _this.inputs[toBuild.label] = Coveo.$(_this.inputTemplate({ label: toBuild.label, name: _this.name, type: "text", otherAttribute: toBuild.otherAttribute, placeholder: toBuild.placeholder || toBuild.label }));
                    return _this.inputs[toBuild.label];
                }), function (memo, input) {
                    return memo.add(input);
                });
            };
            PreferencesPanelTextInput.prototype.getValues = function () {
                var _this = this;
                return Coveo._.map(this.inputs, function (input, key) {
                    return _this.getInput(key).val();
                });
            };
            PreferencesPanelTextInput.prototype.setValue = function (input, value) {
                Coveo.Assert.exists(this.inputs[input]);
                this.getInput(input).val(value);
            };
            PreferencesPanelTextInput.prototype.reset = function () {
                Coveo._.each(this.inputs, function (input) {
                    input.find("input").val("");
                });
            };
            PreferencesPanelTextInput.prototype.getInput = function (input) {
                Coveo.Assert.exists(this.inputs[input]);
                var found = this.inputs[input].find("input");
                if (found.length == 0) {
                    found = this.inputs[input].find("textarea");
                }
                return found;
            };
            return PreferencesPanelTextInput;
        })();
        Ui.PreferencesPanelTextInput = PreferencesPanelTextInput;
        var PreferencesPanelTextAreaInput = (function (_super) {
            __extends(PreferencesPanelTextAreaInput, _super);
            function PreferencesPanelTextAreaInput() {
                _super.apply(this, arguments);
                this.inputTemplate = Coveo._.template("<div class='coveo-choice-container'><textarea <%= otherAttribute %> class='coveo-<%= label %>' id='coveo-<%= label %>' name='<%= name%>' placeholder='<%= placeholder %>' ></textarea></div>");
            }
            PreferencesPanelTextAreaInput.prototype.build = function () {
                var _this = this;
                return Coveo._.reduce(Coveo._.map(this.textElementToBuild, function (toBuild) {
                    _this.inputs[toBuild.label] = Coveo.$(_this.inputTemplate({ label: toBuild.label, name: _this.name, otherAttribute: toBuild.otherAttribute, placeholder: toBuild.placeholder || toBuild.label }));
                    return _this.inputs[toBuild.label];
                }), function (memo, input) {
                    return memo.add(input);
                });
            };
            return PreferencesPanelTextAreaInput;
        })(PreferencesPanelTextInput);
        Ui.PreferencesPanelTextAreaInput = PreferencesPanelTextAreaInput;
        var PreferencePanelMultiSelectInput = (function () {
            function PreferencePanelMultiSelectInput(toBuild, options, name) {
                this.toBuild = toBuild;
                this.options = options;
                this.name = name;
                this.textInput = new PreferencesPanelTextAreaInput([{ label: toBuild.label, otherAttribute: 'readonly' }], name);
            }
            PreferencePanelMultiSelectInput.prototype.build = function () {
                var _this = this;
                this.select = Coveo.$("<select multiple></select>");
                Coveo._.each(this.options, function (option) {
                    _this.select.append(Coveo.$("<option>" + option + "</option>"));
                });
                this.select.change(function () {
                    var values = _this.select.val();
                    if (!Coveo.Utils.isNullOrUndefined(values)) {
                        _this.textInput.setValue(_this.toBuild.label, values.join(","));
                    }
                    else {
                        _this.reset();
                    }
                });
                return this.textInput.build().append(this.select);
            };
            PreferencePanelMultiSelectInput.prototype.getValues = function () {
                return this.textInput.getValues()[0].split(",");
            };
            PreferencePanelMultiSelectInput.prototype.setValues = function (values) {
                this.textInput.setValue(this.toBuild.label, values.join(','));
            };
            PreferencePanelMultiSelectInput.prototype.reset = function () {
                this.textInput.setValue(this.toBuild.label, "");
            };
            return PreferencePanelMultiSelectInput;
        })();
        Ui.PreferencePanelMultiSelectInput = PreferencePanelMultiSelectInput;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var PreferencesPanel = (function (_super) {
            __extends(PreferencesPanel, _super);
            function PreferencesPanel(element, options, bindings) {
                _super.call(this, element, PreferencesPanel.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, PreferencesPanel, options);
                this.buildCloseButton();
                this.buildTitle();
            }
            PreferencesPanel.prototype.getCssClass = function () {
                return "coveo-preference-panel";
            };
            PreferencesPanel.prototype.getMenuItems = function () {
                var _this = this;
                return [{ text: Ui.l("Preferences"), onOpen: function () { return _this.open(); }, onClose: function () { return _this.close(); } }];
            };
            PreferencesPanel.prototype.open = function () {
                Coveo.$(this.element).addClass("coveo-active");
            };
            PreferencesPanel.prototype.close = function () {
                Coveo.$(this.element).removeClass("coveo-active");
            };
            PreferencesPanel.prototype.save = function () {
                Coveo.$(this.element).trigger(Coveo.Events.PreferencesPanelEvents.savePreferences);
                this.queryController.executeQuery();
            };
            PreferencesPanel.prototype.closeWithoutSave = function () {
                Coveo.$(this.element).trigger(Coveo.Events.PreferencesPanelEvents.exitPreferencesWithoutSave);
            };
            PreferencesPanel.prototype.buildCloseButton = function () {
                var _this = this;
                var closeButton = Coveo.$("<div class='coveo-close'><span class='coveo-icon'></span></div>");
                closeButton.fastClick(function () {
                    _this.closeWithoutSave();
                    _this.close();
                });
                Coveo.$(this.element).prepend(closeButton);
            };
            PreferencesPanel.prototype.buildTitle = function () {
                var title = Coveo.$("<div class='coveo-title'>" + Ui.l("Preferences") + "</div>");
                Coveo.$(this.element).prepend(title);
            };
            PreferencesPanel.ID = 'PreferencesPanel';
            PreferencesPanel.options = {};
            return PreferencesPanel;
        })(Ui.Component);
        Ui.PreferencesPanel = PreferencesPanel;
        Ui.CoveoJQuery.registerAutoCreateComponent(PreferencesPanel);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var PhonegapUtils;
        (function (PhonegapUtils) {
            function bindOpenLinkInPhonegap(element, uri) {
                Coveo.$(element).fastClick(function (ev) {
                    ev.preventDefault();
                    if (uri && uri.indexOf('javascript:') < 0) {
                        PhonegapUtils.openInPhonegap(uri);
                    }
                });
            }
            PhonegapUtils.bindOpenLinkInPhonegap = bindOpenLinkInPhonegap;
            function openInPhonegap(uri) {
                window.open(uri, '_system', 'location=yes');
            }
            PhonegapUtils.openInPhonegap = openInPhonegap;
        })(PhonegapUtils = Ui.PhonegapUtils || (Ui.PhonegapUtils = {}));
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var PrintableUri = (function (_super) {
            __extends(PrintableUri, _super);
            function PrintableUri(element, options, bindings, result) {
                _super.call(this, element, PrintableUri.ID, bindings);
                this.element = element;
                this.options = options;
                this.result = result;
                this.options = Ui.ComponentOptions.initComponentOptions(element, PrintableUri, options);
                var parentsXml = result.raw.sysparents;
                if (parentsXml) {
                    this.renderParentsXml(element, parentsXml);
                }
                else {
                    this.renderUri(element, result);
                }
                if (Coveo.DeviceUtils.isPhonegap()) {
                    Ui.PhonegapUtils.bindOpenLinkInPhonegap(element, this.uri);
                }
            }
            PrintableUri.prototype.renderParentsXml = function (element, parentsXml) {
                var xmlDoc = Coveo.$.parseXML(parentsXml);
                var parents = xmlDoc.getElementsByTagName("parent");
                var tokens = [];
                var seperators = [];
                for (var i = 0; i < parents.length; i++) {
                    if (i > 0) {
                        var seperator = this.buildSeperator();
                        seperators.push(seperator);
                        element.appendChild(seperator);
                    }
                    var parent = parents.item(i);
                    var token = this.buildHtmlToken(parent.getAttribute('name'), parent.getAttribute('uri'));
                    tokens.push(token);
                    element.appendChild(token);
                }
                if (tokens.length > 1) {
                    var ellipsis = this.buildEllipsis();
                    element.insertBefore(ellipsis, seperators[0]);
                    var ellipsisSeperator = this.buildSeperator();
                    element.insertBefore(ellipsisSeperator, ellipsis);
                    var contentWidth = 0;
                    var tokensWidth = [];
                    for (var i = 0; i < tokens.length; i++) {
                        tokensWidth[i] = tokens[i].offsetWidth;
                        contentWidth += tokensWidth[i];
                    }
                    var seperatorWidth = seperators[0].offsetWidth;
                    var ellipsisWidth = ellipsis.offsetWidth;
                    var availableWidth = element.offsetWidth;
                    if (availableWidth <= contentWidth) {
                        contentWidth += ellipsisWidth + seperatorWidth;
                        var hidden = [];
                        var i = 1;
                        while (i < tokens.length && availableWidth <= contentWidth) {
                            element.removeChild(tokens[i]);
                            element.removeChild(seperators[i - 1]);
                            if (i > 1) {
                                hidden.push(seperators[i - 1]);
                            }
                            hidden.push(tokens[i]);
                            contentWidth -= tokensWidth[i] + seperatorWidth;
                            i++;
                        }
                        ellipsis.onclick = function () {
                            for (var i = 0; i < hidden.length; i++) {
                                element.insertBefore(hidden[i], ellipsis);
                            }
                            element.removeChild(ellipsis);
                        };
                    }
                    else {
                        element.removeChild(ellipsis);
                        element.removeChild(ellipsisSeperator);
                    }
                }
            };
            PrintableUri.prototype.renderUri = function (element, result) {
                this.uri = result.clickUri;
                var stringAndHoles;
                if (result.printableUri.indexOf("\\") == -1) {
                    stringAndHoles = Coveo.StringAndHoles.shortenUri(result.printableUri, Coveo.$(element).width() / 7);
                }
                else {
                    stringAndHoles = Coveo.StringAndHoles.shortenPath(result.printableUri, Coveo.$(element).width() / 7);
                }
                var uri = Coveo.HighlightUtils.highlightString(stringAndHoles.value, result.printableUriHighlights, stringAndHoles.holes, 'coveo-highlight');
                var link = Coveo.$('<a>').attr('title', result.printableUri).addClass('coveo-printable-uri').html(uri);
                if (!Coveo.DeviceUtils.isPhonegap()) {
                    link.attr('href', result.clickUri);
                }
                link.appendTo(element);
            };
            PrintableUri.prototype.buildSeperator = function () {
                var seperator = document.createElement('span');
                seperator.innerText = ">";
                seperator.className = 'coveo-printable-uri-separator';
                return seperator;
            };
            PrintableUri.prototype.buildEllipsis = function () {
                var ellipsis = document.createElement('span');
                ellipsis.innerText = "...";
                ellipsis.className = 'coveo-printable-uri';
                return ellipsis;
            };
            PrintableUri.prototype.buildHtmlToken = function (name, uri) {
                var modifiedName = name.charAt(0).toUpperCase() + name.slice(1);
                var link = document.createElement('a');
                if (!Coveo.DeviceUtils.isPhonegap()) {
                    link.href = uri;
                }
                this.uri = uri;
                link.className = 'coveo-printable-uri';
                link.innerText = modifiedName;
                return link;
            };
            PrintableUri.ID = 'PrintableUri';
            PrintableUri.options = {};
            return PrintableUri;
        })(Ui.Component);
        Ui.PrintableUri = PrintableUri;
        Ui.CoveoJQuery.registerAutoCreateComponent(PrintableUri);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var QueryDuration = (function (_super) {
            __extends(QueryDuration, _super);
            function QueryDuration(element, options, bindings) {
                var _this = this;
                _super.call(this, element, QueryDuration.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, QueryDuration, options);
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.querySuccess, Coveo.$.proxy(this.handleQuerySuccess, this));
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.queryError, function () {
                    Coveo.$(_this.element).hide();
                });
                Coveo.$(this.element).hide();
                this.textContainer = Coveo.$('<span />').appendTo(this.element);
            }
            QueryDuration.prototype.handleQuerySuccess = function (e, data) {
                if (!this.disabled) {
                    Coveo.Assert.exists(data);
                    var tooltip = Ui.l("Duration", this.formatQueryDuration(data.results.duration)) + '\n' + Ui.l("IndexDuration", this.formatQueryDuration(data.results.indexDuration)) + '\n' + Ui.l("ProxyDuration", this.formatQueryDuration(data.results.proxyDuration)) + '\n' + Ui.l("ClientDuration", this.formatQueryDuration(data.results.clientDuration));
                    this.textContainer.text(this.formatQueryDuration(data.results.duration));
                    Coveo.$(this.element).attr('title', tooltip);
                    Coveo.$(this.element).show();
                }
            };
            QueryDuration.prototype.formatQueryDuration = function (durationInMillis) {
                if (durationInMillis == undefined) {
                    return Ui.l("Unavailable");
                }
                else {
                    var seconds = Math.max(durationInMillis / 1000, 0.01);
                    return Ui.l("Seconds", Globalize.format(seconds, 'n2'), seconds);
                }
            };
            QueryDuration.ID = 'QueryDuration';
            QueryDuration.options = {};
            return QueryDuration;
        })(Ui.Component);
        Ui.QueryDuration = QueryDuration;
        Ui.CoveoJQuery.registerAutoCreateComponent(QueryDuration);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var QuerySummary = (function (_super) {
            __extends(QuerySummary, _super);
            function QuerySummary(element, options, bindings) {
                var _this = this;
                _super.call(this, element, QuerySummary.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, QuerySummary, options);
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.querySuccess, Coveo.$.proxy(this.handleQuerySuccess, this));
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.queryError, function () {
                    Coveo.$(_this.element).hide();
                });
                Coveo.$(this.element).hide();
                this.textContainer = Coveo.$('<span />').appendTo(this.element);
            }
            QuerySummary.prototype.handleQuerySuccess = function (e, data) {
                if (!this.disabled) {
                    Coveo.Assert.exists(data);
                    Coveo.$(this.element).show();
                    if (data.results.results.length > 0) {
                        var first = Globalize.format(data.query.firstResult + 1, 'n0');
                        var last = Globalize.format(data.query.firstResult + data.results.results.length, 'n0');
                        var totalCount = Globalize.format(data.results.totalCount, 'n0');
                        this.textContainer.html(Ui.l("ShowingResultsOf", '<span class="coveo-highlight">' + first + '</span>', '<span class ="coveo-highlight">' + last + '</span>', '<span class ="coveo-highlight">' + totalCount + '</span>', data.results.results.length));
                    }
                    else if (data.results.exception != null && data.results.exception.code != null) {
                        var code = ('QueryException' + data.results.exception.code).toLocaleString();
                        this.textContainer.html(Ui.l("QueryException", code));
                    }
                    else {
                        this.textContainer.html(Ui.l("QueryDidntMatchAnyDocuments"));
                    }
                }
            };
            QuerySummary.ID = 'QuerySummary';
            QuerySummary.options = {};
            return QuerySummary;
        })(Ui.Component);
        Ui.QuerySummary = QuerySummary;
        Ui.CoveoJQuery.registerAutoCreateComponent(QuerySummary);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var EmailActionsUtils = (function () {
        function EmailActionsUtils() {
        }
        EmailActionsUtils.buildMailToString = function (options) {
            var mailTo = options.to ? "mailto:" + encodeURIComponent(options.to) : "mailto:";
            var parameters = EmailActionsUtils.buildMailToParametersString(options.subject, options.cc, options.bcc, options.body, mailTo);
            if (parameters) {
                mailTo += "?" + parameters;
            }
            return mailTo;
        };
        EmailActionsUtils.buildMailToParametersString = function (subject, cc, bcc, body, mailTo) {
            var parametersArray = [];
            if (subject) {
                parametersArray.push(EmailActionsUtils.buildMailToParameter("subject", subject));
            }
            if (cc) {
                parametersArray.push(EmailActionsUtils.buildMailToParameter("cc", cc));
            }
            if (bcc) {
                parametersArray.push(EmailActionsUtils.buildMailToParameter("bcc", bcc));
            }
            if (body) {
                var shortenBody = EmailActionsUtils.getShortenBody(body, mailTo + "?" + parametersArray.join('&'));
                if (shortenBody) {
                    parametersArray.push(EmailActionsUtils.buildMailToParameter("body", shortenBody));
                }
            }
            return parametersArray.join('&');
        };
        EmailActionsUtils.getShortenBody = function (body, mailTo) {
            var shortenBody = body;
            if (mailTo.length < Coveo.Ui.MailTo.maxLength) {
                var maxBodyLength = Coveo.Ui.MailTo.maxLength - mailTo.length - "&body=".length;
                shortenBody = EmailActionsUtils.shortenString(body, maxBodyLength);
            }
            return shortenBody;
        };
        EmailActionsUtils.buildMailToParameter = function (name, param) {
            return param ? encodeURIComponent(name) + '=' + encodeURIComponent(param) : '';
        };
        EmailActionsUtils.shortenString = function (str, maxLength, encodeShortenBodyIndication) {
            if (encodeShortenBodyIndication === void 0) { encodeShortenBodyIndication = false; }
            /* There is a size limit on mailto url,
             * Depending on the browser, the mailto will not open if too large. */
            var shortenBodyIndicator = encodeShortenBodyIndication ? encodeURIComponent(Coveo.Ui.MailTo.shortenBodyIndicator) : Coveo.Ui.MailTo.shortenBodyIndicator;
            maxLength = maxLength - Coveo.Ui.MailTo.shortenBodyIndicator.length;
            var sliced = str.length > maxLength ? true : false;
            var shortenStr = str.substring(0, maxLength);
            shortenStr += sliced ? shortenBodyIndicator : '';
            return shortenStr;
        };
        EmailActionsUtils.appendShortenBodyToMailToString = function (mailTo, body) {
            var shortenBody = EmailActionsUtils.getShortenBody(body, mailTo);
            return mailTo.indexOf('?') >= 0 ? mailTo + "&body=" + shortenBody : mailTo + "?body=" + shortenBody;
        };
        EmailActionsUtils.removeCurrentUserEmailFromString = function (currentUserEmail, str) {
            if (str && currentUserEmail) {
                return Coveo._.filter(str.split(";"), function (email) {
                    return email.indexOf(currentUserEmail) == -1;
                }).join(";");
            }
            else {
                return str;
            }
        };
        EmailActionsUtils.buildReplyMailToFromResult = function (result, currentUserEmail) {
            return new Coveo.Ui.MailTo({
                currentUserEmail: currentUserEmail,
                originalFrom: result.raw.sysfrom,
                to: result.raw.sysfrom,
                subject: result.raw.sysconversationsubject
            });
        };
        EmailActionsUtils.buildReplyAllMailToFromResult = function (result, currentUserEmail) {
            return new Coveo.Ui.MailTo({
                currentUserEmail: currentUserEmail,
                originalFrom: result.raw.sysfrom,
                to: result.raw.sysfrom + ";" + result.raw.systo,
                subject: result.raw.sysconversationsubject,
                cc: result.raw.syscc
            });
        };
        EmailActionsUtils.buildForwardMailToFromResult = function (result, currentUserEmail) {
            return new Coveo.Ui.MailTo({
                currentUserEmail: currentUserEmail,
                originalFrom: result.raw.sysfrom,
                subject: result.raw.sysconversationsubject
            });
        };
        EmailActionsUtils.encodeMailToBody = function (body) {
            var linesArray = body.split('\n');
            Coveo._.each(linesArray, function (line, index) {
                linesArray[index] = encodeURIComponent(linesArray[index]);
            });
            return linesArray.join(Coveo.Ui.MailTo.enter);
        };
        return EmailActionsUtils;
    })();
    Coveo.EmailActionsUtils = EmailActionsUtils;
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var DefaultMailToOptions = (function (_super) {
            __extends(DefaultMailToOptions, _super);
            function DefaultMailToOptions() {
                _super.apply(this, arguments);
                this.currentUserEmail = "";
                this.originalFrom = "";
                this.to = "";
                this.subject = "";
                this.cc = "";
                this.bcc = "";
                this.body = "";
                this.bodyIsHTML = Coveo.DeviceUtils.isPhonegap();
            }
            return DefaultMailToOptions;
        })(Coveo.Options);
        Ui.DefaultMailToOptions = DefaultMailToOptions;
        var MailTo = (function () {
            function MailTo(options) {
                this.options = options;
                this.bodyHeader = "";
                this.options = new DefaultMailToOptions().merge(options);
                this.removeCurrentUserFromParameters();
                if (Coveo.DeviceUtils.isPhonegap()) {
                    this.setRecipientsArrays();
                }
                if (this.options.originalFrom) {
                    this.bodyHeader = this.options.bodyIsHTML ? "<p><br/><br/><br/>" + Ui.l("From") + ": " + this.options.originalFrom + "<hr></p>" : "\n\n\n" + Ui.l("From") + ": " + this.options.originalFrom + "\n_________________________________\n";
                }
            }
            MailTo.prototype.removeCurrentUserFromParameters = function () {
                this.options.to = Coveo.EmailActionsUtils.removeCurrentUserEmailFromString(this.options.currentUserEmail, this.options.to);
                this.options.cc = Coveo.EmailActionsUtils.removeCurrentUserEmailFromString(this.options.currentUserEmail, this.options.cc);
                this.options.bcc = Coveo.EmailActionsUtils.removeCurrentUserEmailFromString(this.options.currentUserEmail, this.options.bcc);
            };
            MailTo.prototype.setRecipientsArrays = function () {
                this.toArray = this.options.to ? this.options.to.split(';') : [];
                this.ccArray = this.options.cc ? this.options.cc.split(';') : [];
                this.bccArray = this.options.bcc ? this.options.bcc.split(';') : [];
            };
            MailTo.prototype.open = function () {
                if (Coveo.DeviceUtils.isPhonegap()) {
                    var shortenBody = !this.options.bodyIsHTML ? Coveo.EmailActionsUtils.shortenString(this.body, MailTo.phonegapMaxLength) : this.body;
                    var emailOpenerObject = window.plugin.email.open(this.getEmailOpenerObject(shortenBody));
                }
                else {
                    this.ensureValueIsSet();
                    window.location.href = this.value;
                }
            };
            MailTo.prototype.getEmailOpenerObject = function (shortenBody) {
                var obj = {
                    to: this.toArray,
                    cc: this.ccArray,
                    bcc: this.bccArray,
                    subject: this.options.subject,
                    body: shortenBody,
                    isHtml: this.options.bodyIsHTML
                };
                console.log(obj);
                return obj;
            };
            MailTo.prototype.ensureValueIsSet = function () {
                if (!this.value) {
                    this.setValue();
                }
                else if (!this.valueBodyIsSet()) {
                    this.setValueBody();
                }
            };
            MailTo.prototype.setValue = function () {
                this.value = Coveo.EmailActionsUtils.buildMailToString(this.options);
                if (this.value && !this.valueBodyIsSet()) {
                    this.setValueBody();
                }
            };
            MailTo.prototype.setValueBody = function () {
                this.value = Coveo.EmailActionsUtils.appendShortenBodyToMailToString(this.value, this.body);
            };
            MailTo.prototype.setMailToBodyFromText = function (text) {
                if (text === void 0) { text = ""; }
                this.body = text;
                if (!Coveo.DeviceUtils.isPhonegap()) {
                    this.body = Coveo.EmailActionsUtils.encodeMailToBody(this.body);
                }
            };
            MailTo.prototype.valueBodyIsSet = function () {
                return this.value.indexOf('body=') >= 0;
            };
            MailTo.prototype.bodyIsSet = function () {
                return this.body ? true : false;
            };
            MailTo.enter = '%0D%0A'; // \r\n
            MailTo.shortenBodyIndicator = '\r\n\r\n...';
            // Arbitrary numbers :
            MailTo.maxLength = 1000;
            MailTo.phonegapMaxLength = 15000;
            return MailTo;
        })();
        Ui.MailTo = MailTo;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var EmailActions = (function (_super) {
            __extends(EmailActions, _super);
            function EmailActions(element, options, bindings, result) {
                _super.call(this, element, EmailActions.ID, bindings);
                this.element = element;
                this.options = options;
                this.result = result;
                this.options = Ui.ComponentOptions.initComponentOptions(element, EmailActions, options);
                this.result = result || this.resolveResult();
                this.createAndAppendEmailActions();
                this.appendWaitingAnimation();
            }
            EmailActions.prototype.createAndAppendEmailActions = function () {
                if (this.options.reply) {
                    this.reply = new Ui.EmailAction(Coveo.$(document.createElement('div'))[0], this, {
                        type: Ui.EmailAction.reply,
                        currentUserEmail: this.options.currentUserEmail
                    }, this.getBindings(), this.result);
                    Coveo.$(this.element).append(this.reply.element);
                }
                if (this.options.replyAll) {
                    this.replyAll = new Ui.EmailAction(Coveo.$(document.createElement('div'))[0], this, {
                        type: Ui.EmailAction.replyAll,
                        currentUserEmail: this.options.currentUserEmail
                    }, this.getBindings(), this.result);
                    Coveo.$(this.element).append(this.replyAll.element);
                }
                if (this.options.forward) {
                    this.forward = new Ui.EmailAction(Coveo.$(document.createElement('div'))[0], this, {
                        type: Ui.EmailAction.forward,
                        currentUserEmail: this.options.currentUserEmail
                    }, this.getBindings(), this.result);
                    Coveo.$(this.element).append(this.forward.element);
                }
            };
            EmailActions.prototype.appendWaitingAnimation = function () {
                this.loadingAnimation = Coveo.JQueryUtils.getBasicLoadingDots().hide();
                Coveo.$(this.element).append(this.loadingAnimation);
                //$(this.element).append($(document.createElement('div')).addClass('coveo-wait-animation').hide());
            };
            EmailActions.ID = 'EmailActions';
            EmailActions.options = {
                currentUserEmail: Ui.ComponentOptions.buildStringOption({ defaultValue: '' }),
                reply: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                replyAll: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                forward: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true })
            };
            return EmailActions;
        })(Coveo.Ui.Component);
        Ui.EmailActions = EmailActions;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(EmailActions);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var EmailAction = (function (_super) {
            __extends(EmailAction, _super);
            function EmailAction(element, actions, options, bindings, result) {
                var _this = this;
                _super.call(this, element, EmailAction.ID, bindings);
                this.element = element;
                this.actions = actions;
                this.options = options;
                this.result = result;
                this.options = Ui.ComponentOptions.initComponentOptions(element, Ui.EmailActions, options);
                this.result = result || this.resolveResult();
                this.setMailToFromResult();
                Coveo.$(this.element).fastClick(function () {
                    _this.showWaitingAnimation();
                    if (!_this.mailTo.bodyIsSet()) {
                        _this.appendBodyToMailTo(function () { return _this.openMailTo(); });
                    }
                    else {
                        _this.openMailTo();
                    }
                });
            }
            EmailAction.prototype.showWaitingAnimation = function () {
                this.actions.loadingAnimation.show();
            };
            EmailAction.prototype.hideWaitingAnimation = function () {
                this.actions.loadingAnimation.hide();
            };
            EmailAction.prototype.setMailToFromResult = function () {
                switch (this.options.type) {
                    case EmailAction.reply:
                        this.mailTo = Coveo.EmailActionsUtils.buildReplyMailToFromResult(this.result, this.options.currentUserEmail);
                        Coveo.$(this.element).append(Ui.l("Reply"));
                        break;
                    case EmailAction.replyAll:
                        this.mailTo = Coveo.EmailActionsUtils.buildReplyAllMailToFromResult(this.result, this.options.currentUserEmail);
                        Coveo.$(this.element).append(Ui.l("ReplyAll"));
                        break;
                    case EmailAction.forward:
                        Coveo.$(this.element).append(Ui.l("Forward"));
                        this.mailTo = Coveo.EmailActionsUtils.buildForwardMailToFromResult(this.result, this.options.currentUserEmail);
                        break;
                    default:
                        this.mailTo = new Ui.MailTo({});
                        break;
                }
            };
            EmailAction.prototype.appendBodyToMailTo = function (callback) {
                var _this = this;
                if (!Coveo.DeviceUtils.isPhonegap()) {
                    this.queryController.getEndpoint().getDocumentText(this.result.uniqueId).done(function (res) { return _this.doneRetrieveBody(res, callback); }).fail(function () { return _this.doneRetrieveBody("", callback); });
                }
                else {
                    var endPoint = this.queryController.getEndpoint();
                    var deferred;
                    if (Coveo.DeviceUtils.isAndroid()) {
                        deferred = endPoint.getDocumentText(this.result.uniqueId).done(function (res) {
                            _this.doneRetrieveBody(res, callback);
                        });
                    }
                    else {
                        deferred = endPoint.getDocumentHtml(this.result.uniqueId).done(function (res) {
                            _this.doneRetrieveBody(res.getElementsByTagName("body")[0].innerHTML, callback);
                        });
                    }
                    deferred.fail(function () {
                        _this.doneRetrieveBody('', callback);
                    });
                }
            };
            EmailAction.prototype.doneRetrieveBody = function (res, callback) {
                var text = res.content ? res.content : res;
                this.mailTo.setMailToBodyFromText(text);
                callback(res);
            };
            EmailAction.prototype.openMailTo = function () {
                this.mailTo.open();
                this.hideWaitingAnimation();
            };
            EmailAction.ID = 'EmailAction';
            EmailAction.options = {
                type: Ui.ComponentOptions.buildStringOption({ defaultValue: "forward" }),
                currentUserEmail: Ui.ComponentOptions.buildStringOption({ defaultValue: "" })
            };
            EmailAction.forward = "forward";
            EmailAction.reply = "reply";
            EmailAction.replyAll = "replyAll";
            return EmailAction;
        })(Coveo.Ui.Component);
        Ui.EmailAction = EmailAction;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var HIGHLIGHT_PREFIX = "CoveoHighlight";
        var QuickViewDocument = (function (_super) {
            __extends(QuickViewDocument, _super);
            function QuickViewDocument(element, options, bindings, result) {
                _super.call(this, element, QuickViewDocument.ID, bindings);
                this.element = element;
                this.options = options;
                this.result = result;
                this.options = Ui.ComponentOptions.initComponentOptions(element, QuickViewDocument, options);
                this.result = result || this.resolveResult();
                Coveo.Assert.exists(this.result);
            }
            QuickViewDocument.prototype.createDom = function () {
                this.header = this.buildHeader().appendTo(Coveo.$(this.element));
                this.iframe = this.buildIFrame().appendTo(Coveo.$(this.element));
            };
            QuickViewDocument.prototype.open = function () {
                var _this = this;
                this.ensureDom();
                this.usageAnalytics.logClickEvent(Ui.AnalyticsActionCauseList.documentQuickView, { documentTitle: this.result.title, documentURL: this.result.clickUri }, this.result, this.queryController.element);
                var beforeLoad = (new Date()).getTime();
                var iframe = this.iframe.find('iframe')[0];
                iframe.src = "about:blank";
                var endpoint = this.queryController.getEndpoint();
                var callOptions = {
                    query: this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.q),
                    requestedOutputSize: this.options.maximumDocumentSize
                };
                endpoint.getDocumentHtml(this.result.uniqueId, callOptions).done(function (html) {
                    // If the contentDocument is null at this point it means that the Quick View
                    // was closed before we've finished loading it. In this case do nothing.
                    if (iframe.contentDocument == null) {
                        return;
                    }
                    _this.renderHTMLDocument(iframe, html);
                    _this.triggerQuickviewLoaded(beforeLoad);
                }).fail(function (html, error) {
                    // If the contentDocument is null at this point it means that the Quick View
                    // was closed before we've finished loading it. In this case do nothing.
                    if (iframe.contentDocument == null) {
                        return;
                    }
                    if (error.status != 0) {
                        _this.renderErrorReport(iframe);
                        _this.triggerQuickviewLoaded(beforeLoad);
                    }
                    else {
                        iframe.onload = function () {
                            _this.triggerQuickviewLoaded(beforeLoad);
                        };
                        iframe.src = endpoint.getViewAsHtmlUri(_this.result.uniqueId, _this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.q));
                    }
                });
            };
            QuickViewDocument.prototype.renderHTMLDocument = function (iframe, html) {
                var _this = this;
                iframe.onload = function () {
                    _this.onReceivingMessage(iframe.contentWindow);
                };
                this.writeToIFrame(iframe, html);
                this.wrapPreElementsInIframe(iframe);
                if (Coveo.DeviceUtils.isMobileDevice()) {
                    this.bindOpenIframeLinksInPhonegap(iframe);
                }
            };
            QuickViewDocument.prototype.renderErrorReport = function (iframe) {
                var errorMessage = "<html><body style='font-family: Arimo, \"Helvetica Neue\", Helvetica, Arial, sans-serif; -webkit-text-size-adjust: none;'>" + Ui.l("OopsError") + "</body></html>";
                this.writeToIFrame(iframe, errorMessage);
            };
            /* TODO Remove Comment, will be fix in ts 1.4
             private writeToIFrame(iframe: HTMLIFrameElement, content: HTMLDocument);
             private writeToIFrame(iframe: HTMLIFrameElement, content: String);
             */
            QuickViewDocument.prototype.writeToIFrame = function (iframe, content) {
                var toWrite = content;
                //This sucks because we can't do instanceof HTMLDocument
                //lib.d.ts declare HTMLDocument as an interface, not an actual object
                if (typeof content == "object") {
                    toWrite = content.getElementsByTagName("html")[0].outerHTML;
                }
                iframe.contentWindow.document.open();
                iframe.contentWindow.document.write(toWrite);
                iframe.contentWindow.document.close();
            };
            QuickViewDocument.prototype.bindOpenIframeLinksInPhonegap = function (iframe) {
                try {
                    var iframeLinks = Coveo.$(iframe.contentWindow.document).find('a');
                    Coveo._.each(iframeLinks, function (link) {
                        var href = link["href"];
                        link["href"] = 'javascript:';
                        Ui.PhonegapUtils.bindOpenLinkInPhonegap(link, href);
                    });
                }
                catch (e) {
                }
            };
            QuickViewDocument.prototype.wrapPreElementsInIframe = function (iframe) {
                var _this = this;
                try {
                    var style = document.createElement('style');
                    style.type = 'text/css';
                    var cssText = "html pre { white-space: pre-wrap; white-space: -moz-pre-wrap; white-space: -pre-wrap; white-space: -o-pre-wrap; word-wrap: break-word;} body, html {Arimo, \"Helvetica Neue\", Helvetica, Arial, sans-serif; -webkit-text-size-adjust: none; margin:0; padding:0; transform-origin:0 0; -ms-transform-origin:0 0; -webkit-transform-origin:0 0;} * { max-width: 100%; -webkit-text-size-adjust: none; -webkit-box-sizing: border-box; -moz-box-sizing: border-box; box-sizing: border-box;} html body {height: auto; width: auto;}";
                    if (style.styleSheet) {
                        style.styleSheet.cssText = cssText;
                    }
                    else {
                        style.appendChild(document.createTextNode(cssText));
                    }
                    var head = iframe.contentWindow.document.head;
                    head.appendChild(style);
                    if (Coveo.DeviceUtils.isMobileDevice() && this.options.allowedZoom) {
                        // Handle zoom in iframe
                        // This is needed to prevent the iframe from being clipped while scrolling on iOS
                        if (Coveo.DeviceUtils.isIos()) {
                            Coveo.$(iframe.contentWindow.document.body).css({
                                '-ms-transform': 'translate3d(0,0,0)',
                                '-webkit-transform': 'translate3d(0,0,0)',
                                'transform': 'translate3d(0,0,0)'
                            });
                        }
                        // Android
                        // The iframe take the width of the page. The body is the scroll and the scale element
                        // iphone/ipad
                        // The iframe take the size of the body. We have to wrap the iframe in a containner. This containner will manage the scroll and the iframe element will be the scale
                        var frameElement = Coveo.DeviceUtils.isIos() ? this.iframe.get(0) : iframe;
                        var bodyElement = iframe.contentWindow.document.body;
                        var scrollElement = Coveo.DeviceUtils.isIos() ? this.iframe.get(0) : iframe.contentWindow.document.body;
                        var scaleElement = Coveo.DeviceUtils.isIos() ? iframe : iframe.contentWindow.document.body;
                        // we got a initial state to compare the current state
                        // do not update the initialState at each tick because it will create imprecision because of the float in javacript
                        // last state
                        var touchEventObject = {
                            frameElement: frameElement,
                            bodyElement: bodyElement,
                            scaleElement: scaleElement,
                            scrollElement: scrollElement,
                            maxWidth: 0,
                            maxHeight: 0,
                            scale: 1,
                            scroll: {
                                left: 0,
                                top: 0
                            },
                            initialState: undefined
                        };
                        Coveo.$(scrollElement).on("touchstart", function (event) {
                            _this.handleTouchStart(event, touchEventObject);
                        }).on("touchmove", function (event) {
                            _this.handleTouchMove(event, touchEventObject);
                        }).on("touchend", function (event) {
                            _this.handleTouchEnd(event, touchEventObject);
                        });
                        this.iframeSizeCalculation(iframe);
                        this.calculateBoundaries(touchEventObject);
                        Coveo.$(window).on('orientationchange', function () {
                            _this.iframeSizeCalculation(iframe);
                            _this.calculateBoundaries(touchEventObject);
                            Coveo.$(touchEventObject.scrollElement).animate({
                                scrollLeft: 0,
                                scrollTop: 0
                            }, 0);
                        });
                    }
                }
                catch (e) {
                }
            };
            QuickViewDocument.prototype.handleTouchStart = function (event, object) {
                var _this = this;
                var touches = Coveo._.map(event.originalEvent['touches'], function (mouseEvent) { return _this.mouseEventToPoint(mouseEvent, object.scrollElement); });
                // starting tranform
                object.initialState = {
                    scale: object.scale,
                    touches: touches,
                    centerClient: {
                        x: this.getMeanValue(touches, "x"),
                        y: this.getMeanValue(touches, "y")
                    },
                    scroll: {
                        left: object.scroll.left,
                        top: object.scroll.top
                    },
                    distance: touches.length == 2 ? this.distance(touches[0], touches[1]) : 0
                };
            };
            QuickViewDocument.prototype.handleTouchMove = function (event, object) {
                var _this = this;
                var touches = Coveo._.map(event.originalEvent['touches'], function (mouseEvent) { return _this.mouseEventToPoint(mouseEvent, object.scrollElement); });
                //only run code if the user has two fingers touching
                if (object.initialState != null) {
                    if (touches.length === 2) {
                        // the distance is use for the scale
                        var currentDistance = this.distance(touches[0], touches[1]);
                        object.scale = Math.max(this.options.minimumZoom, Math.min(this.options.maximumZoom, currentDistance / object.initialState.distance * object.initialState.scale));
                    }
                    this.calculateScroll(object, touches);
                    this.updateScaleScroll(object);
                    event.preventDefault();
                    return false;
                }
            };
            QuickViewDocument.prototype.handleTouchEnd = function (event, object) {
                var touches = event.originalEvent["touches"];
                this.updateScaleScroll(object);
                if (Coveo.DeviceUtils.isIos()) {
                    this.overlaps.css({
                        '-ms-transform': 'scale(' + object.scale + ',' + object.scale + ') translate(0, 0)',
                        '-webkit-transform': 'scale(' + object.scale + ',' + object.scale + ') translate(0, 0)',
                        'transform': 'scale(' + object.scale + ',' + object.scale + ') translate(0, 0)',
                        'transform-origin': '0 0',
                        '-ms-transform-origin': '0 0',
                        '-webkit-transform-origin': '0 0'
                    });
                }
                object.initialState = null;
            };
            QuickViewDocument.prototype.iframeSizeCalculation = function (iframe) {
                var width = Coveo.$(iframe.contentWindow.document.body).width();
                var height = Coveo.$(iframe.contentWindow.document.body).height();
                Coveo.$(iframe.contentWindow.document.body).width(width);
                Coveo.$(iframe.contentWindow.document.body).height(height);
                if (Coveo.DeviceUtils.isMobileDevice()) {
                    this.resizeIframe();
                }
                if (Coveo.DeviceUtils.isIos()) {
                    // Yes i know... but other wise the mouse event will not be at the right place. Don't blame me, blame ios.
                    if (this.overlaps) {
                        this.overlaps.remove();
                    }
                    this.overlaps = Coveo.$('<div />').css({ top: 0, left: 0, width: Math.max(window.innerWidth, width), height: Math.max(window.innerHeight, height), position: 'absolute' }).appendTo(this.iframe);
                    this.overlaps.fastClick(function (e) {
                        var offset = Coveo.$(iframe).offset();
                        Coveo.$(iframe.contentWindow.document.elementFromPoint(e.clientX - offset.left, e.clientY - offset.top)).fastClick();
                    });
                    Coveo.$(this.iframe).css({ 'position': 'relative' });
                }
            };
            QuickViewDocument.prototype.getMeanValue = function (touches, toGet) {
                if (touches.length == 1) {
                    return touches[0][toGet];
                }
                return Coveo._.reduce(touches, function (memo, touch) { return memo[toGet] + touch[toGet]; }) / touches.length;
            };
            QuickViewDocument.prototype.mouseEventToPoint = function (event, scrollElement) {
                var offset = Coveo.$(scrollElement).offset();
                return { x: event.clientX - offset.left, y: event.clientY - offset.top };
            };
            QuickViewDocument.prototype.distance = function (a, b) {
                return Math.ceil(Math.sqrt(Math.pow(a.x - b.x, 2) + Math.pow(a.y - b.y, 2)));
            };
            QuickViewDocument.prototype.calculateBoundaries = function (object) {
                // Android's body width == iframe width / iOS's body width == content width
                object.maxWidth = object.bodyElement.scrollWidth;
                object.maxHeight = object.bodyElement.scrollHeight;
            };
            QuickViewDocument.prototype.calculateScroll = function (object, touches) {
                // Fancy calculation to have the right scroll to reproduce native behavior
                // Trust me I know what I'm doing
                var computedLeft = (object.initialState.scroll.left + object.initialState.centerClient.x) / object.initialState.scale * object.scale - this.getMeanValue(touches, "x");
                var computedTop = (object.initialState.scroll.top + object.initialState.centerClient.y) / object.initialState.scale * object.scale - this.getMeanValue(touches, "y");
                // Min-Max values are used as boundaries for the document to stay within
                var maxLeft = object.maxWidth * object.scale - Coveo.$(object.frameElement).width();
                var maxTop = object.maxHeight * object.scale - Coveo.$(object.frameElement).width();
                object.scroll = {
                    left: Math.max(0, Math.min(maxLeft, computedLeft)),
                    top: Math.max(0, Math.min(maxTop, computedTop))
                };
            };
            QuickViewDocument.prototype.updateScaleScroll = function (object) {
                var transform = 'scale(' + object.scale + ',' + object.scale + ') translate(' + (-1 * object.scroll.left / object.scale) + 'px, ' + (-1 * object.scroll.top / object.scale) + 'px)';
                Coveo.$(object.scaleElement).css({
                    '-ms-transform': transform,
                    '-webkit-transform': transform,
                    'transform': transform,
                    'transform-origin': '0 0',
                    '-ms-transform-origin': '0 0',
                    '-webkit-transform-origin': '0 0'
                });
            };
            QuickViewDocument.prototype.triggerQuickviewLoaded = function (beforeLoad) {
                var afterLoad = (new Date()).getTime();
                var eventArgs = { duration: afterLoad - beforeLoad };
                Coveo.$(this.element).trigger(Coveo.Events.UserActionEvents.quickViewLoaded, eventArgs);
            };
            QuickViewDocument.prototype.onReceivingMessage = function (window) {
                var _this = this;
                this.header.empty();
                var words = {};
                this.keywordsState = [];
                var highlights = Coveo.$(window.document.body).find('[id^=' + HIGHLIGHT_PREFIX + ']');
                if (highlights.length == 0) {
                    this.header.css("min-height", 0);
                }
                for (var i = 0; i < highlights.length; i++) {
                    var highlight = highlights[i];
                    var wordInfo = highlight.id.substr(HIGHLIGHT_PREFIX.length + 1).match(/^([0-9]+)\.([0-9]+)\.([0-9]+)$/);
                    if (wordInfo != null) {
                        var wordIndex = wordInfo[1];
                        var wordNumber = wordInfo[2];
                        if (words[wordIndex]) {
                            words[wordIndex].count = Math.max(words[wordIndex].count, Number(wordNumber));
                        }
                        else {
                            words[wordIndex] = { text: highlight.innerHTML, count: 1, index: wordIndex };
                        }
                    }
                }
                var keys = Coveo._.keys(words);
                for (var i = 0; i < keys.length; i++) {
                    var wordIndex = keys[i];
                    var word = words[wordIndex];
                    var element = Coveo.$(window.document.body).find('[id^="' + HIGHLIGHT_PREFIX + ':' + wordIndex + '.1"]')[0];
                    var color = element.style.backgroundColor;
                    this.keywordsState.push({ word: word, color: color, currentIndex: 0, index: Number(word.index) });
                }
                Coveo.$.each(this.keywordsState, function (index, stateItem) {
                    _this.header.append(_this.buildWordButton(stateItem, window));
                });
            };
            QuickViewDocument.prototype.buildWordButton = function (wordState, window) {
                var _this = this;
                var wordHtml = Coveo.$('<span/>').addClass('coveo-term');
                wordHtml.append(Coveo.$('<span/>').addClass('coveo-term-left-arrow').append(Coveo.$('<span/>').addClass('coveo-term-left-arrow-icon')).click(function () {
                    _this.navigate(wordState, true, window);
                }));
                wordHtml.append(Coveo.$('<span/>').addClass('coveo-term-name').text(wordState.word.text).click(function () {
                    _this.navigate(wordState, false, window);
                }));
                wordHtml.append(Coveo.$('<span/>').addClass('coveo-term-right-arrow').append(Coveo.$('<span/>').addClass('coveo-term-right-arrow-icon')).click(function () {
                    _this.navigate(wordState, false, window);
                }));
                wordHtml.css('background-color', wordState.color);
                return wordHtml;
            };
            QuickViewDocument.prototype.navigate = function (state, backward, window) {
                var fromIndex = state.currentIndex;
                var toIndex;
                if (!backward) {
                    toIndex = fromIndex == state.word.count ? 1 : fromIndex + 1;
                }
                else {
                    toIndex = fromIndex <= 1 ? state.word.count : fromIndex - 1;
                }
                var body = Coveo.$(window.document.body);
                var element = body.find('[id^="' + HIGHLIGHT_PREFIX + ':' + state.word.index + '.' + toIndex + '"]')[0];
                var offset = Coveo.$(element).offset();
                var bodyElement = body.get(0);
                body.stop(true).animate({
                    scrollLeft: offset.left - bodyElement.clientWidth / 2 + Coveo.$(element).width() / 2,
                    scrollTop: offset.top - bodyElement.clientHeight / 2 + Coveo.$(element).height() / 2
                });
                this.iframe.stop(true).animate({
                    scrollLeft: offset.left - this.iframe.width() / 2 + Coveo.$(element).width() / 2,
                    scrollTop: offset.top - this.iframe.height() / 2 + Coveo.$(element).height() / 2
                });
                var selectedElenment = body.find('[id^="' + HIGHLIGHT_PREFIX + ':' + state.word.index + '.' + fromIndex + '"]')[0];
                if (selectedElenment != null) {
                    selectedElenment.style.border = "";
                }
                element.style.border = "1px dotted #333";
                state.currentIndex = toIndex;
            };
            QuickViewDocument.prototype.buildHeader = function () {
                return Coveo.$('<div/>').addClass('coveo-quickview-header');
            };
            QuickViewDocument.prototype.buildIFrame = function () {
                return Coveo.$('<div class="coveo-iframeWrapper"><iframe/></div>');
            };
            QuickViewDocument.prototype.resizeIframe = function () {
                var otherHeight = Coveo._.reduce(Coveo.$('.coveo-modalBox .coveo-title, .coveo-modalBox .coveo-quick-view-header, .coveo-modalBox .' + Ui.Component.computeCssClassNameForType(Ui.EmailAction.ID)), function (memo, element) { return memo + Coveo.$(element).height(); }, 0) + 20;
                Coveo.$(this.iframe).height(Coveo.$('.coveo-modalBox .coveo-body').height() - otherHeight);
            };
            QuickViewDocument.ID = 'QuickViewDocument';
            QuickViewDocument.options = {
                maximumDocumentSize: Ui.ComponentOptions.buildNumberOption({ defaultValue: 0 }),
                allowedZoom: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                minimumZoom: Ui.ComponentOptions.buildNumberOption({ defaultValue: 0.5 }),
                maximumZoom: Ui.ComponentOptions.buildNumberOption({ defaultValue: 4 })
            };
            return QuickViewDocument;
        })(Ui.Component);
        Ui.QuickViewDocument = QuickViewDocument;
        Ui.CoveoJQuery.registerAutoCreateComponent(QuickViewDocument);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var QuickView = (function (_super) {
            __extends(QuickView, _super);
            function QuickView(element, options, bindings, result) {
                var _this = this;
                _super.call(this, element, QuickView.ID, bindings);
                this.element = element;
                this.options = options;
                this.result = result;
                this.options = Ui.ComponentOptions.initComponentOptions(element, QuickView, options);
                if (this.options.contentTemplate == null) {
                    Coveo.$(this.root).one(Coveo.Events.ResultListEvents.newResultsDisplayed, function (e) {
                        _this.dialogBoxContent = Coveo.$(_this.element).children().detach();
                        _this.createLinkAndAppendItToDom(result);
                    });
                }
                else {
                    if (this.element.innerHTML.match(/^\s*$/)) {
                        this.createLinkAndAppendItToDom(result);
                    }
                }
                this.bindClick(result);
            }
            QuickView.prototype.open = function () {
                var openerObject = this.prepareOpenQuickViewObject();
                this.createModalBox(openerObject);
                this.bindQuickViewEvents(openerObject);
                this.animateAndOpen();
            };
            QuickView.prototype.close = function () {
                this.modalbox.close();
                if (Coveo.DeviceUtils.isAndroid() && Coveo.DeviceUtils.isPhonegap()) {
                    Coveo.$(document).off("backbutton");
                }
            };
            QuickView.prototype.createLinkAndAppendItToDom = function (result) {
                if (typeof result.hasHtmlVersion == 'undefined' || result.hasHtmlVersion) {
                    this.link = Coveo.$(QuickView.quickViewLinkTemplate());
                    Coveo.$(this.element).append(this.link);
                }
            };
            QuickView.prototype.bindClick = function (result) {
                if (typeof result.hasHtmlVersion == 'undefined' || result.hasHtmlVersion) {
                    Coveo.$(this.element).fastClick(Coveo.$.proxy(this.open, this));
                }
                else {
                    Coveo.$(this.element).css('display', 'none');
                }
            };
            QuickView.prototype.bindQuickViewEvents = function (openerObject) {
                var _this = this;
                if (Coveo.DeviceUtils.isAndroid() && Coveo.DeviceUtils.isPhonegap()) {
                    Coveo.$(document).on("backbutton", function () {
                        _this.close();
                    });
                }
                Coveo.$(this.modalbox.wrapper.children('.coveo-title')).fastClick(function () { return _this.close(); });
                Coveo.$(window).on('resize orientationchange', openerObject.resizeHandler);
                this.modalbox.content.on(Coveo.Events.UserActionEvents.quickViewLoaded, function () {
                    Coveo.$(openerObject.loadingAnimation).remove();
                });
            };
            QuickView.prototype.animateAndOpen = function () {
                var _this = this;
                var animationDuration = this.modalbox.wrapper.css('animation-duration');
                if (animationDuration) {
                    var duration = /^(.+)(ms|s)$/.exec(animationDuration);
                    var durationMs = Number(duration[1]) * (duration[2] == 's' ? 1000 : 1);
                    //open the QuickViewDocument
                    setTimeout(function () {
                        Coveo.$(_this.modalbox.modalBox.find("." + Ui.Component.computeCssClassNameForType(Ui.QuickViewDocument.ID))).coveo('open');
                        _this.resizeIFrame();
                    }, durationMs);
                }
                else {
                    Coveo.$(this.modalbox.modalBox.find("." + Ui.Component.computeCssClassNameForType(Ui.QuickViewDocument.ID))).coveo('open');
                    this.resizeIFrame();
                }
            };
            QuickView.prototype.createModalBox = function (openerObject) {
                var _this = this;
                if (openerObject.content) {
                    this.dialogBoxContent = openerObject.content;
                }
                var computedModalBoxContent = Coveo.$("<div/>").append(this.dialogBoxContent);
                if (this.options.title) {
                    computedModalBoxContent.prepend(Coveo.$('<div class="coveo-title" />').html(this.options.title));
                }
                this.modalbox = Coveo.ModalBox.open(computedModalBoxContent, {
                    overlayClose: true,
                    title: Coveo.JQueryUtils.getPopUpCloseButton(Ui.l("Close"), Ui.l("QuickView")),
                    className: 'coveo-quick-view',
                    validation: function () {
                        Coveo.$(window).off('resize orientationchange', openerObject.resizeHandler);
                        _this.modalbox = null;
                        return true;
                    }
                });
            };
            QuickView.prototype.prepareOpenQuickViewObject = function () {
                var _this = this;
                var resizeHandler = function () {
                    _this.resizeIFrame();
                };
                var loadingAnimation = this.options.loadingAnimation;
                return {
                    resizeHandler: resizeHandler,
                    loadingAnimation: loadingAnimation,
                    content: this.options.contentTemplate != undefined ? this.prepareQuickViewContent(loadingAnimation) : undefined
                };
            };
            QuickView.prototype.prepareQuickViewContent = function (loadingAnimation) {
                var content = Coveo.$(this.options.contentTemplate.instantiateToElement(this.result));
                var initOptions = this.searchInterface.options;
                var initParameters = Coveo.$.extend({}, { options: initOptions }, this.getBindings(), { result: this.result });
                Ui.CoveoJQuery.automaticallyCreateComponentsInside(content.get(0), initParameters);
                if (content.find("." + Ui.Component.computeCssClassNameForType(Ui.QuickViewDocument.ID)).length != 0 && this.options.showLoadingAnimation) {
                    content.prepend(loadingAnimation);
                }
                return content;
            };
            QuickView.prototype.resizeIFrame = function () {
                var quickViewDocument = this.modalbox.content.find("." + Ui.Component.computeCssClassNameForType(Ui.QuickViewDocument.ID)).find("iframe");
                if (quickViewDocument.length != 0) {
                    var scrollHeight = this.modalbox.content.get(0).scrollHeight - this.modalbox.content.outerHeight();
                    var scrollWidth = this.modalbox.content.get(0).scrollWidth - this.modalbox.content.outerWidth();
                    if (scrollHeight > 0) {
                        quickViewDocument.height(quickViewDocument.height() - scrollHeight);
                    }
                    else {
                        quickViewDocument.css("height", "");
                    }
                    if (scrollWidth > 0) {
                        quickViewDocument.width(quickViewDocument.width() - scrollWidth - 5);
                    }
                    else {
                        quickViewDocument.css("width", "");
                    }
                }
            };
            QuickView.ID = 'QuickView';
            QuickView.quickViewLinkTemplate = Coveo._.template("<div class='coveo-icon-for-quickview'>" + Ui.l("QuickView") + "</div>");
            QuickView.options = {
                title: Ui.ComponentOptions.buildStringOption(),
                showLoadingAnimation: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                contentTemplate: Ui.ComponentOptions.buildTemplateOption({ selectorAttr: 'data-template-selector', idAttr: 'data-template-id' }),
                loadingAnimation: Ui.ComponentOptions.buildOption(11 /* NONE */, function (element) {
                    var loadingAnimationSelector = Coveo.$(element).attr("data-loading-animation-selector");
                    if (loadingAnimationSelector != null) {
                        var loadingAnimation = Coveo.$(loadingAnimationSelector);
                        if (loadingAnimation.length != 0) {
                            return loadingAnimation.remove().get(0);
                        }
                    }
                    var id = Coveo.$(element).attr('data-loading-animation-template-id');
                    if (id != null) {
                        var loadingAnimationTemplate = Ui.ComponentOptions.loadResultTemplateFromId(id);
                        if (loadingAnimationTemplate) {
                            return loadingAnimationTemplate.instantiateToElement({});
                        }
                    }
                    return Coveo.JQueryUtils.getBasicLoadingAnimation().get(0);
                })
            };
            return QuickView;
        })(Ui.Component);
        Ui.QuickView = QuickView;
        Ui.CoveoJQuery.registerAutoCreateComponent(QuickView);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ResultAttachments = (function (_super) {
            __extends(ResultAttachments, _super);
            function ResultAttachments(element, options, bindings, result, attachmentLevel) {
                if (attachmentLevel === void 0) { attachmentLevel = 0; }
                _super.call(this, element, ResultAttachments.ID, bindings);
                this.element = element;
                this.options = options;
                this.bindings = bindings;
                this.attachmentLevel = attachmentLevel;
                this.options = Ui.ComponentOptions.initComponentOptions(element, ResultAttachments, options);
                this.attachments = result.attachments;
                if (Coveo.Utils.isNonEmptyArray(this.attachments)) {
                    this.renderAttachments();
                }
            }
            ResultAttachments.prototype.renderAttachments = function () {
                var _this = this;
                Coveo._.each(this.attachments, function (attachment) {
                    var container = _this.attachmentLevel > 0 ? _this.options.subResultTemplate.instantiateToElement(attachment) : _this.options.resultTemplate.instantiateToElement(attachment);
                    _this.autoCreateComponentsInsideResult(container, Coveo.$.extend({}, attachment, { attachments: [] }));
                    Coveo.$(_this.element).append(container);
                    if (_this.attachmentHasSubAttachment(attachment) && _this.attachmentLevel < _this.options.maximumAttachmentLevel) {
                        var childAttachmentContainer = Coveo.$("<div></div>");
                        Coveo.$(container).append(childAttachmentContainer);
                        new ResultAttachments(childAttachmentContainer.get(0), _this.options, _this.bindings, attachment, _this.attachmentLevel + 1);
                    }
                });
            };
            ResultAttachments.prototype.attachmentHasSubAttachment = function (attachment) {
                if (Coveo.Utils.isNonEmptyArray(attachment.attachments)) {
                    return true;
                }
                else if (Coveo.Utils.isNonEmptyArray(attachment.childResults)) {
                    attachment.attachments = attachment.childResults;
                    return true;
                }
                else {
                    return false;
                }
            };
            ResultAttachments.prototype.autoCreateComponentsInsideResult = function (element, result) {
                Coveo.Assert.exists(element);
                var initOptions = this.searchInterface.options;
                var initParameters = Coveo.$.extend({}, { options: initOptions }, this.getBindings(), { result: result });
                Ui.CoveoJQuery.automaticallyCreateComponentsInside(element, initParameters, [ResultAttachments.ID]);
            };
            ResultAttachments.ID = 'ResultAttachments';
            ResultAttachments.options = {
                resultTemplate: Ui.ComponentOptions.buildTemplateOption({ defaultFunction: function () { return new Ui.DefaultResultTemplate(); } }),
                subResultTemplate: Ui.ComponentOptions.buildTemplateOption({ postProcessing: function (value, options) { return value != null ? value : options.resultTemplate; } }),
                maximumAttachmentLevel: Ui.ComponentOptions.buildNumberOption({ defaultValue: 5 })
            };
            return ResultAttachments;
        })(Ui.Component);
        Ui.ResultAttachments = ResultAttachments;
        Ui.CoveoJQuery.registerAutoCreateComponent(ResultAttachments);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ResultFolding = (function (_super) {
            __extends(ResultFolding, _super);
            function ResultFolding(element, options, bindings, result) {
                _super.call(this, element, ResultFolding.ID, bindings);
                this.element = element;
                this.options = options;
                this.result = result;
                this.showingMoreResults = false;
                this.options = Ui.ComponentOptions.initComponentOptions(this.element, ResultFolding, options);
                Coveo.Assert.exists(result);
                this.buildElements();
                this.displayThoseResults(this.result.childResults);
                this.updateElementVisibility();
                if (this.result.childResults.length == 0 && !this.result.moreResults) {
                    Coveo.$(this.element).hide();
                }
            }
            ResultFolding.prototype.showMoreResults = function () {
                var _this = this;
                Coveo.Assert.exists(this.result.moreResults);
                this.cancelAnyPendingShowMore();
                this.moreResultsDeferred = this.result.moreResults();
                this.waitAnimation = Coveo.JQueryUtils.getBasicLoadingDots().appendTo(this.results);
                this.updateElementVisibility();
                this.moreResultsDeferred.done(function (results) {
                    _this.showingMoreResults = true;
                    _this.displayThoseResults(results);
                    _this.updateElementVisibility(results.length);
                });
                this.moreResultsDeferred.always(function (results) {
                    _this.moreResultsDeferred = undefined;
                    _this.waitAnimation.detach();
                    _this.waitAnimation = undefined;
                });
            };
            ResultFolding.prototype.showLessResults = function () {
                this.cancelAnyPendingShowMore();
                this.showingMoreResults = false;
                this.displayThoseResults(this.result.childResults);
                this.updateElementVisibility();
                this.scrollToResultElement();
            };
            ResultFolding.prototype.buildElements = function () {
                this.buildHeader();
                this.buildResults();
                this.buildFooter();
            };
            ResultFolding.prototype.buildHeader = function () {
                var header = Coveo.$('<div/>').addClass('coveo-folding-header').appendTo(this.element);
                if (this.options.normalCaption != undefined && this.options.expandedCaption != undefined) {
                    this.normalCaption = Coveo.$('<div/>').addClass('coveo-folding-header-caption').text(this.options.normalCaption).appendTo(header);
                    this.expandedCaption = Coveo.$('<div/>').addClass('coveo-folding-header-caption').text(this.options.expandedCaption).appendTo(header);
                }
                this.onlyOneMessageCaption = Coveo.$('<div/>').addClass('coveo-folding-header-caption').text(this.options.oneResultCaption).appendTo(header);
            };
            ResultFolding.prototype.buildResults = function () {
                this.results = Coveo.$('<div/>').addClass('coveo-folding-results').appendTo(this.element);
            };
            ResultFolding.prototype.buildFooter = function () {
                var _this = this;
                var footer = Coveo.$('<div/>').addClass('coveo-folding-footer').appendTo(this.element.parentElement);
                if (this.result.moreResults) {
                    this.showMore = Coveo.$("<div/>").addClass("coveo-folding-footer-section-for-less").appendTo(footer).fastClick(function () { return _this.showMoreResults(); });
                    this.showLess = Coveo.$("<div/>").addClass("coveo-folding-footer-section-for-more").appendTo(footer).fastClick(function () { return _this.showLessResults(); });
                    var footerIconShowMore = Coveo.$("<div><span class='coveo-folding-footer-icon'></span></div>").addClass('coveo-more');
                    var footerIconShowLess = Coveo.$("<div><span class='coveo-folding-footer-icon'></span></div>").addClass('coveo-less');
                    var showMoreLink = Coveo.$('<a/>').addClass('coveo-folding-show-more').text(this.options.moreCaption);
                    var showLessLink = Coveo.$('<a/>').addClass('coveo-folding-show-less').text(this.options.lessCaption);
                    this.showMore.append(showMoreLink);
                    this.showLess.append(showLessLink);
                    this.showMore.append(footerIconShowMore);
                    this.showLess.append(footerIconShowLess);
                }
            };
            ResultFolding.prototype.updateElementVisibility = function (subResultsLength) {
                if (this.normalCaption) {
                    this.normalCaption.fastToggle(!this.showingMoreResults && this.result.childResults.length > 0);
                }
                if (this.expandedCaption) {
                    this.expandedCaption.fastToggle(this.showingMoreResults);
                }
                this.onlyOneMessageCaption.fastToggle(subResultsLength && subResultsLength == 1);
                if (this.showMore) {
                    this.showMore.fastToggle(!this.showingMoreResults && !Coveo.Utils.exists(this.moreResultsDeferred));
                    this.showLess.fastToggle(this.showingMoreResults);
                }
                Coveo.$(this.element).find('.coveo-show-if-normal').fastToggle(!this.showingMoreResults);
                Coveo.$(this.element).find('.coveo-show-if-expanded').fastToggle(this.showingMoreResults);
            };
            ResultFolding.prototype.scrollToResultElement = function () {
                var elementOffset = Coveo.$(this.element).closest('.CoveoResult').offset();
                var resultListElement = Coveo.$(this.root).find("." + Ui.Component.computeCssClassNameForType(Ui.ResultList.ID));
                var wasScrolled = false;
                if (resultListElement.length != 0) {
                    var resultList = resultListElement.coveo();
                    var resultListScrollContainer = resultList.options.mobileScrollContainer || resultList.options.infiniteScrollContainer;
                    var resultListIsScrollable = resultListScrollContainer.scrollHeight > Coveo.$(resultListScrollContainer).height();
                    if (resultListIsScrollable) {
                        wasScrolled = true;
                        Coveo.$(resultListScrollContainer).animate({
                            scrollTop: resultListScrollContainer.scrollTop + elementOffset.top - (Coveo.DeviceUtils.isMobileDevice() ? 50 : 0)
                        });
                    }
                }
                if (elementOffset.top < Coveo.$(window).scrollTop() && !wasScrolled) {
                    Coveo.$("html, body").animate({
                        scrollTop: elementOffset.top
                    });
                }
            };
            ResultFolding.prototype.displayThoseResults = function (results) {
                var _this = this;
                this.results.empty();
                Coveo._.each(results, function (result) {
                    _this.renderChildResult(result);
                });
            };
            ResultFolding.prototype.renderChildResult = function (childResult) {
                var oneChild = Coveo.$(this.options.resultTemplate.instantiateToElement(childResult)).addClass('coveo-child-result').appendTo(this.results);
                oneChild.toggleClass('coveo-normal-child-result', !this.showingMoreResults);
                oneChild.toggleClass('coveo-expanded-child-result', this.showingMoreResults);
                this.autoCreateComponentsInsideResult(oneChild.get(0), childResult);
            };
            ResultFolding.prototype.autoCreateComponentsInsideResult = function (element, result) {
                Coveo.Assert.exists(element);
                var initOptions = this.searchInterface.options;
                var initParameters = Coveo.$.extend({}, { options: initOptions }, this.getBindings(), { result: result });
                Ui.CoveoJQuery.automaticallyCreateComponentsInside(element, initParameters);
            };
            ResultFolding.prototype.cancelAnyPendingShowMore = function () {
                if (this.moreResultsDeferred) {
                    this.moreResultsDeferred.reject();
                }
                Coveo.Assert.doesNotExists(this.moreResultsDeferred);
                Coveo.Assert.doesNotExists(this.waitAnimation);
            };
            ResultFolding.ID = "ResultFolding";
            ResultFolding.options = {
                resultTemplate: Ui.ComponentOptions.buildTemplateOption({ defaultFunction: function () { return new Ui.DefaultResultTemplate(); } }),
                normalCaption: Ui.ComponentOptions.buildLocalizedStringOption(),
                expandedCaption: Ui.ComponentOptions.buildLocalizedStringOption(),
                moreCaption: Ui.ComponentOptions.buildLocalizedStringOption({ postProcessing: function (value) { return value || Ui.l("ShowMore"); } }),
                lessCaption: Ui.ComponentOptions.buildLocalizedStringOption({ postProcessing: function (value) { return value || Ui.l("ShowLess"); } }),
                oneResultCaption: Ui.ComponentOptions.buildLocalizedStringOption({ postProcessing: function (value) { return value || Ui.l("DisplayingTheOnlyMessage"); } })
            };
            return ResultFolding;
        })(Ui.Component);
        Ui.ResultFolding = ResultFolding;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(ResultFolding);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var OSUtils;
    (function (OSUtils) {
        (function (NAME) {
            NAME[NAME["WINDOWS"] = 0] = "WINDOWS";
            NAME[NAME["MACOSX"] = 1] = "MACOSX";
            NAME[NAME["UNIX"] = 2] = "UNIX";
            NAME[NAME["LINUX"] = 3] = "LINUX";
            NAME[NAME["UNKNOWN"] = 4] = "UNKNOWN";
        })(OSUtils.NAME || (OSUtils.NAME = {}));
        var NAME = OSUtils.NAME;
        function get(nav) {
            if (nav === void 0) { nav = navigator; }
            var osName;
            if (nav.appVersion.indexOf("Win") != -1) {
                osName = 0 /* WINDOWS */;
            }
            else if (nav.appVersion.indexOf("Mac") != -1) {
                osName = 1 /* MACOSX */;
            }
            else if (nav.appVersion.indexOf("X11") != -1) {
                osName = 2 /* UNIX */;
            }
            else if (nav.appVersion.indexOf("Linux") != -1) {
                osName = 3 /* LINUX */;
            }
            else {
                osName = 4 /* UNKNOWN */;
            }
            return osName;
        }
        OSUtils.get = get;
    })(OSUtils = Coveo.OSUtils || (Coveo.OSUtils = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ResultLink = (function (_super) {
            __extends(ResultLink, _super);
            function ResultLink(element, options, bindings, result, os) {
                _super.call(this, element, ResultLink.ID, bindings);
                this.element = element;
                this.options = options;
                this.result = result;
                this.os = os;
                this.options = Ui.ComponentOptions.initComponentOptions(element, ResultLink, options);
                this.options = Coveo.$.extend({}, this.options, this.componentOptionsModel.get(Coveo.Models.ComponentOptionsModel.attributesEnum.resultLink));
                this.result = result || this.resolveResult();
                Coveo.Assert.exists(this.componentOptionsModel);
                Coveo.Assert.exists(this.result);
                Coveo.$(element).on("mousedown touchend", Coveo.$.proxy(this.logOpenDocument, this));
                this.bindOnClickIfNotUndefined() || this.bindOpenQuickViewIfNotUndefined() || this.setHrefIfNotAlready() || this.openLinkThatIsNotAnAnchor();
            }
            ResultLink.prototype.bindOnClickIfNotUndefined = function () {
                var _this = this;
                if (this.options.onClick != undefined) {
                    Coveo.$(this.element).fastClick(function (e) {
                        _this.options.onClick.call(_this, e, _this.result);
                    });
                    return true;
                }
                else {
                    return false;
                }
            };
            ResultLink.prototype.bindOpenQuickViewIfNotUndefined = function () {
                var _this = this;
                if (this.options.openQuickview) {
                    Coveo.$(this.element).fastClick(function (e) {
                        e.preventDefault();
                        var quickView = Coveo.$(_this.element).parent().find('.CoveoQuickView .coveo-icon-for-quickview');
                        if (quickView.length == 0) {
                            quickView = Coveo.$(_this.element).closest('.CoveoQuickView .coveo-icon-for-quickview');
                        }
                        quickView.fastClick();
                    });
                    return true;
                }
                else {
                    return false;
                }
            };
            ResultLink.prototype.openLinkThatIsNotAnAnchor = function () {
                var _this = this;
                if (Coveo.DeviceUtils.isPhonegap()) {
                    Ui.PhonegapUtils.bindOpenLinkInPhonegap(this.element, this.getResultUri());
                }
                else if (!this.elementIsAnAnchor()) {
                    Coveo.$(this.element).fastClick(function (ev) {
                        if (_this.options.alwaysOpenInNewWindow) {
                            if (_this.options.openInOutlook && _this.hasOutlookField()) {
                                window.location.href = _this.getResultUri();
                            }
                            else {
                                window.open(_this.getResultUri(), '_blank');
                            }
                        }
                        else {
                            window.location.href = _this.getResultUri();
                        }
                    });
                }
            };
            ResultLink.prototype.setHrefIfNotAlready = function () {
                if (Coveo.DeviceUtils.isPhonegap() && this.elementIsAnAnchor()) {
                    //In phonegap, we need to open using the inappbrowser plugin
                    //remove the href/target so that the link doesn't open 2 times ( in the external browser + inside the webview)
                    //We still retrieve the url set on the template, if available
                    var uri = Coveo.$(this.element).attr('href');
                    if (uri == undefined || uri == "") {
                        uri = this.getResultUri();
                    }
                    Coveo.$(this.element).removeAttr('href');
                    Coveo.$(this.element).removeAttr('target');
                    Ui.PhonegapUtils.bindOpenLinkInPhonegap(this.element, uri);
                    return true;
                }
                else {
                    // Do not erase any value put in href by the template, etc. Allows
                    // using custom click urls while still keeping analytics recording
                    // and other behavior brought by the component.
                    if (this.elementIsAnAnchor() && !Coveo.Utils.isNonEmptyString(Coveo.$(this.element).attr('href'))) {
                        Coveo.$(this.element).attr('href', this.getResultUri());
                        if (this.options.alwaysOpenInNewWindow && !(this.options.openInOutlook && this.hasOutlookField())) {
                            Coveo.$(this.element).attr('target', '_blank');
                        }
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            };
            ResultLink.prototype.bindPhonegapClick = function () {
                if (Coveo.DeviceUtils.isPhonegap()) {
                    Ui.PhonegapUtils.bindOpenLinkInPhonegap(this.element, this.getResultUri());
                }
            };
            ResultLink.prototype.logOpenDocument = function (e) {
                this.usageAnalytics.logClickEvent(Ui.AnalyticsActionCauseList.documentOpen, {
                    documentURL: this.result.clickUri,
                    documentTitle: this.result.title
                }, this.result, this.root);
            };
            ResultLink.prototype.getResultUri = function () {
                if (this.options.field == undefined && this.options.openInOutlook) {
                    this.setField();
                }
                if (this.options.field != undefined) {
                    return this.result.raw[Coveo.Utils.getCoveoFieldKey(this.options.field)];
                }
                else {
                    return this.result.clickUri;
                }
            };
            ResultLink.prototype.elementIsAnAnchor = function () {
                return this.element.tagName == "A";
            };
            ResultLink.prototype.setField = function () {
                var os = Coveo.Utils.exists(this.os) ? this.os : Coveo.OSUtils.get();
                if (os == 1 /* MACOSX */ && this.hasOutlookField()) {
                    this.options.field = "@sysoutlookformacuri";
                }
                else if (os == 0 /* WINDOWS */ && this.hasOutlookField()) {
                    this.options.field = "@sysoutlookuri";
                }
            };
            ResultLink.prototype.hasOutlookField = function () {
                var os = Coveo.Utils.exists(this.os) ? this.os : Coveo.OSUtils.get();
                if (os == 1 /* MACOSX */ && this.result.raw["sysoutlookformacuri"] != undefined) {
                    return true;
                }
                else if (os == 0 /* WINDOWS */ && this.result.raw["sysoutlookuri"] != undefined) {
                    return true;
                }
                return false;
            };
            ResultLink.ID = 'ResultLink';
            ResultLink.options = {
                field: Ui.ComponentOptions.buildFieldOption(),
                openInOutlook: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                openQuickview: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false }),
                alwaysOpenInNewWindow: Ui.ComponentOptions.buildBooleanOption({ defaultValue: false })
            };
            return ResultLink;
        })(Ui.Component);
        Ui.ResultLink = ResultLink;
        Ui.CoveoJQuery.registerAutoCreateComponent(ResultLink);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ResultsFiltersPreferences = (function (_super) {
            __extends(ResultsFiltersPreferences, _super);
            function ResultsFiltersPreferences(element, options, bindings) {
                var _this = this;
                _super.call(this, element, ResultsFiltersPreferences.ID, bindings);
                this.element = element;
                this.options = options;
                this.bindings = bindings;
                this.options = Ui.ComponentOptions.initComponentOptions(element, ResultsFiltersPreferences, options);
                this.preferencePanel = Coveo.$(this.element).parents("." + Ui.Component.computeCssClassNameForType(Ui.PreferencesPanel.ID));
                this.preferencePanelLocalStorage = new Coveo.LocalStorageUtils(ResultsFiltersPreferences.ID);
                this.mergeLocalPreferencesWithStaticPreferences();
                this.bindPreferencePanelEvent();
                this.bindBreadcrumbEvent();
                this.bindQueryEvent();
                //We need to wait after all components are initialized before building the dom, because this component interacts with Tab
                //And we don't know if Tab(s) are initialized before or after this component.
                Coveo.$(this.root).one(Coveo.Events.InitializationEvents.afterComponentsInitialization, function () {
                    _this.createDom();
                });
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + Coveo.Models.QueryStateModel.attributesEnum.t);
                Coveo.$(this.root).one(eventName, function () {
                    _this.fromPreferencesToCheckboxInput();
                });
            }
            ResultsFiltersPreferences.prototype.createDom = function () {
                this.buildTitle();
                this.buildCheckboxesInput();
                if (this.options.showAdvancedFilters) {
                    this.buildAdvancedFilters();
                }
            };
            ResultsFiltersPreferences.prototype.save = function () {
                this.fromCheckboxInputToPreferences();
                var toSave = Coveo._.omit(this.preferences, 'tab');
                this.logger.info("Saving preferences", toSave);
                this.preferencePanelLocalStorage.save(toSave);
            };
            ResultsFiltersPreferences.prototype.exitWithoutSave = function () {
                this.fromPreferencesToCheckboxInput();
            };
            ResultsFiltersPreferences.prototype.bindPreferencePanelEvent = function () {
                var _this = this;
                this.bind.on(this.preferencePanel, Coveo.Events.PreferencesPanelEvents.savePreferences, function () { return _this.save(); });
                this.bind.on(this.preferencePanel, Coveo.Events.PreferencesPanelEvents.exitPreferencesWithoutSave, function () { return _this.exitWithoutSave(); });
            };
            ResultsFiltersPreferences.prototype.bindBreadcrumbEvent = function () {
                if (this.options.includeInBreadcrumb) {
                    this.bind.onRoot(Coveo.Events.BreadcrumbEvents.populateBreadcrumb, Coveo.$.proxy(this.handlePopulateBreadcrumb, this));
                    this.bind.onRoot(Coveo.Events.BreadcrumbEvents.clearBreadcrumb, Coveo.$.proxy(this.handleClearBreadcrumb, this));
                }
            };
            ResultsFiltersPreferences.prototype.bindQueryEvent = function () {
                this.bind.onRoot(Coveo.Events.QueryEvents.buildingQuery, Coveo.$.proxy(this.handleBuildingQuery, this));
            };
            ResultsFiltersPreferences.prototype.handleBuildingQuery = function (e, args) {
                Coveo._.each(this.getActiveFilters(), function (filter) {
                    args.queryBuilder.advancedExpression.add(filter.expression);
                });
            };
            ResultsFiltersPreferences.prototype.handlePopulateBreadcrumb = function (e, args) {
                var actives = this.getActiveFilters();
                if (Coveo.Utils.isNonEmptyArray(actives)) {
                    var container = Coveo.$('<div/>').addClass('coveo-results-filter-preferences-breadcrumb');
                    Coveo.$('<span/>').addClass('coveo-title').text(Ui.l("FiltersInYourPreferences") + ":").appendTo(container);
                    var valuesContainer = Coveo.$('<span/>').addClass('coveo-values').appendTo(container);
                    for (var i = 0; i < actives.length; i++) {
                        if (i != 0) {
                            Coveo.$('<span/>').addClass('coveo-separator').text(', ').appendTo(valuesContainer);
                        }
                        this.buildBreadcrumb(actives[i]).appendTo(valuesContainer);
                    }
                    args.breadcrumbs.push({ element: container.get(0) });
                }
            };
            ResultsFiltersPreferences.prototype.handleClearBreadcrumb = function (e, args) {
                Coveo._.each(this.getActiveFilters(), function (filter) {
                    filter.selected = false;
                });
                this.fromPreferencesToCheckboxInput();
            };
            ResultsFiltersPreferences.prototype.buildTitle = function () {
                Coveo.$(this.element).append(Coveo.$("<div class='coveo-title'>" + Ui.l("ResultsFilteringExpression") + "</div>"));
            };
            ResultsFiltersPreferences.prototype.buildAdvancedFilters = function () {
                var _this = this;
                this.advancedFilters = Coveo.$("<div>" + Ui.l("Create") + "</div>").addClass("coveo-advanced-filters");
                this.buildAdvancedFilterInput();
                this.buildAdvancedFilterFormValidate();
                this.advancedFiltersBuilder = Coveo.$("<div class='coveo-advanced-filters-builder'></div>");
                this.advancedFiltersBuilder.append(this.advancedFilterFormValidate);
                this.advancedFilters.fastClick(function () { return _this.openAdvancedFilterSectionOrSaveFilters(); });
                var onlineHelp = Coveo.$("<a href='http://onlinehelp.coveo.com/en/ces/7.0/user/user_help.htm' target='_blank' class='coveo-online-help'>?</a>");
                Coveo.$(this.element).find('.coveo-title').first().after(onlineHelp, this.advancedFilters);
                Coveo.$(this.element).append(this.advancedFiltersBuilder);
            };
            ResultsFiltersPreferences.prototype.buildAdvancedFilterInput = function () {
                this.advancedFiltersTextInputCaption = new Ui.PreferencesPanelTextAreaInput([{
                    label: Ui.l("Caption"),
                    placeholder: Ui.l("EnterExpressionName"),
                    otherAttribute: "required"
                }], ResultsFiltersPreferences.ID + "-advanced-caption");
                this.advancedFiltersTextInputExpression = new Ui.PreferencesPanelTextAreaInput([{
                    label: Ui.l("Expression"),
                    placeholder: Ui.l("EnterExpressionToFilterWith"),
                    otherAttribute: "required"
                }], ResultsFiltersPreferences.ID + "-advanced-expression");
                this.advancedFiltersTabSelect = new Ui.PreferencePanelMultiSelectInput({
                    label: Ui.l("Tab"),
                    placeholder: Ui.l("SelectTab")
                }, this.getAllTabs(), ResultsFiltersPreferences.ID + "-multiselect");
            };
            ResultsFiltersPreferences.prototype.buildAdvancedFilterFormValidate = function () {
                var _this = this;
                this.advancedFilterFormValidate = Coveo.$("<form></form>");
                var formSubmit = Coveo.$("<input type='submit' />");
                var saveFormButton = Coveo.$("<span class='coveo-save'></span>");
                var closeFormButton = Coveo.$("<span class='coveo-close'></span>");
                var saveAndCloseContainer = Coveo.$("<div class='coveo-choice-container coveo-close-and-save'></div>").append(saveFormButton, closeFormButton);
                this.advancedFilterFormValidate.append(this.advancedFiltersTextInputCaption.build().addClass("coveo-caption"), this.advancedFiltersTabSelect.build().addClass("coveo-tab"), this.advancedFiltersTextInputExpression.build().addClass("coveo-expression"), saveAndCloseContainer, formSubmit);
                saveFormButton.fastClick(function () {
                    formSubmit.click();
                });
                closeFormButton.fastClick(function () {
                    _this.advancedFiltersBuilder.toggleClass("coveo-active");
                });
                this.advancedFilterFormValidate.find('textarea').keyup(function (e) {
                    if (e.keyCode == 13 /* ENTER */) {
                        formSubmit.click();
                    }
                });
                this.advancedFilterFormValidate.submit(function (e) {
                    _this.validateAndSaveAdvancedFilter(e);
                });
            };
            ResultsFiltersPreferences.prototype.getAdvancedFiltersTextInputToBuild = function () {
                return [
                    {
                        label: Ui.l("Caption"),
                        otherAttribute: "required"
                    },
                    {
                        label: Ui.l("Expression"),
                        otherAttribute: "required"
                    }
                ];
            };
            ResultsFiltersPreferences.prototype.getAllTabs = function () {
                var tabRef = Ui.Component.getComponentRef("Tab");
                if (tabRef) {
                    var tabsElement = Coveo.$(this.root).find("." + Ui.Component.computeCssClassNameForType(tabRef.ID));
                    return Coveo._.map(tabsElement, function (tabElement) {
                        var tab = Coveo.$(tabElement).coveo();
                        return tab.options.uniqueId;
                    });
                }
            };
            ResultsFiltersPreferences.prototype.getPreferencesBoxInputToBuild = function () {
                return Coveo._.map(this.preferences, function (filter) {
                    return {
                        label: filter.caption,
                        tab: filter.tab,
                        expression: filter.expression
                    };
                });
            };
            ResultsFiltersPreferences.prototype.buildCheckboxesInput = function () {
                var _this = this;
                if (this.preferenceContainer != undefined) {
                    this.preferenceContainer.remove();
                }
                var toBuild = this.getPreferencesBoxInputToBuild();
                if (Coveo.Utils.isNonEmptyArray(toBuild)) {
                    this.preferencePanelCheckboxInput = new Ui.PreferencesPanelCheckboxInput(toBuild, ResultsFiltersPreferences.ID);
                    this.preferenceContainer = Coveo.$("<div class='coveo-choices-container'></div>");
                    this.preferenceContainer.append(this.preferencePanelCheckboxInput.build());
                    this.preferenceContainer.find('.coveo-choice-container').append("<div class='coveo-section coveo-section-edit-delete'></div>");
                    Coveo.$(this.element).append(this.preferenceContainer);
                    this.buildEditAdvancedFilter();
                    this.buildDeleteAdvancedFilter();
                    this.fromPreferencesToCheckboxInput();
                    this.preferenceContainer.find('input').change(function (e) {
                        _this.save();
                        var filter = _this.preferences[Coveo.$(e.target).val()];
                        _this.fromFilterToAnalyticsEvent(filter, filter.selected ? 'selected' : 'unselected');
                        _this.queryController.executeQuery();
                    });
                }
            };
            ResultsFiltersPreferences.prototype.buildDeleteAdvancedFilter = function () {
                var _this = this;
                Coveo._.each(this.preferences, function (filter) {
                    if (filter.custom) {
                        var deleteElement = Coveo.$("<span class='coveo-delete'><span class='coveo-icon'></span></span>");
                        var filterElement = _this.getFilterElementByCaption(filter.caption);
                        var insertInto = filterElement.closest('.coveo-section').siblings('.coveo-section-edit-delete');
                        deleteElement.appendTo(insertInto);
                        deleteElement.fastClick(function () {
                            _this.confirmDelete(filter, filterElement);
                        });
                    }
                });
            };
            ResultsFiltersPreferences.prototype.buildEditAdvancedFilter = function () {
                var _this = this;
                Coveo._.each(this.preferences, function (filter) {
                    if (filter.custom) {
                        var editElement = Coveo.$("<span class='coveo-edit'><span class='coveo-icon'></span></span>");
                        var filterElement = _this.getFilterElementByCaption(filter.caption);
                        var insertInto = filterElement.closest('.coveo-section').siblings('.coveo-section-edit-delete');
                        editElement.appendTo(insertInto);
                        editElement.fastClick(function () {
                            _this.editElement(filter, filterElement);
                        });
                    }
                });
            };
            ResultsFiltersPreferences.prototype.buildBreadcrumb = function (filter) {
                var _this = this;
                var elem = Coveo.$('<span/>').addClass('coveo-value');
                Coveo.$('<span/>').addClass('coveo-caption').text(filter.caption).appendTo(elem);
                Coveo.$('<span/>').addClass('coveo-clear').appendTo(elem);
                elem.fastClick(function (e) {
                    filter.selected = false;
                    _this.fromFilterToAnalyticsEvent(filter, 'cleared from breadcrumb');
                    _this.fromPreferencesToCheckboxInput();
                    _this.queryController.executeQuery();
                });
                return elem;
            };
            ResultsFiltersPreferences.prototype.confirmDelete = function (filter, filterElement) {
                if (confirm(Ui.l("AreYouSureDeleteFilter", filter.caption, filter.expression))) {
                    this.deleteFilterPreference(filter, filterElement);
                    this.fromFilterToAnalyticsEvent(filter, 'deleted');
                    this.queryController.executeQuery();
                }
            };
            ResultsFiltersPreferences.prototype.editElement = function (filter, filterElement) {
                var oldCaption = this.preferences[filter.caption].caption;
                var oldTab = this.preferences[filter.caption].tab;
                var oldExpression = this.preferences[filter.caption].expression;
                this.deleteFilterPreference(filter, filterElement);
                this.openAdvancedFilterSectionOrSaveFilters();
                this.populateEditSection({ tab: oldTab, caption: oldCaption, expression: oldExpression });
                this.advancedFiltersBuilder.find('input[type=text]').first().focus();
            };
            ResultsFiltersPreferences.prototype.populateEditSection = function (toPopulate) {
                if (toPopulate === void 0) { toPopulate = { tab: [""], caption: "", expression: "" }; }
                this.advancedFiltersTextInputCaption.setValue(Ui.l("Caption"), toPopulate.caption);
                this.advancedFiltersTextInputExpression.setValue(Ui.l("Expression"), toPopulate.expression);
                this.advancedFiltersTabSelect.setValues(toPopulate.tab);
            };
            ResultsFiltersPreferences.prototype.deleteFilterPreference = function (filter, filterElement) {
                this.preferencePanelLocalStorage.remove(filter.caption);
                delete this.preferences[filter.caption];
                filterElement.closest('.coveo-choice-container').remove();
            };
            ResultsFiltersPreferences.prototype.openAdvancedFilterSectionOrSaveFilters = function () {
                if (this.advancedFiltersBuilder.hasClass('coveo-active')) {
                    this.advancedFilterFormValidate.find("input[type=submit]").click();
                }
                else {
                    this.populateEditSection();
                    this.advancedFiltersBuilder.toggleClass("coveo-active");
                }
            };
            ResultsFiltersPreferences.prototype.validateAndSaveAdvancedFilter = function (e) {
                e.preventDefault();
                this.advancedFiltersBuilder.removeClass("coveo-active");
                var caption = this.advancedFiltersTextInputCaption.getValues()[0];
                var expression = this.advancedFiltersTextInputExpression.getValues()[0];
                var tabs = this.advancedFiltersTabSelect.getValues();
                this.preferences[caption] = {
                    caption: caption,
                    custom: true,
                    expression: expression,
                    tab: tabs,
                    selected: true
                };
                this.buildCheckboxesInput();
                this.save();
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.t, this.getActiveTab());
                this.advancedFiltersTextInputCaption.reset();
                this.advancedFiltersTextInputExpression.reset();
                this.advancedFiltersTabSelect.reset();
                this.advancedFiltersBuilder.appendTo(this.element);
                this.fromFilterToAnalyticsEvent(this.preferences[caption], 'saved');
                this.queryController.executeQuery();
            };
            ResultsFiltersPreferences.prototype.fromPreferencesToCheckboxInput = function () {
                var _this = this;
                Coveo._.each(this.getActiveFilters(), function (filter) {
                    _this.preferencePanelCheckboxInput.select(filter.caption);
                });
                Coveo._.each(this.getInactiveFilters(), function (filter) {
                    _this.preferencePanelCheckboxInput.unselect(filter.caption);
                });
            };
            ResultsFiltersPreferences.prototype.fromCheckboxInputToPreferences = function () {
                var selecteds = this.preferencePanelCheckboxInput.getSelecteds();
                Coveo._.each(this.preferences, function (filter) {
                    if (Coveo._.contains(selecteds, filter.caption)) {
                        filter.selected = true;
                    }
                    else {
                        filter.selected = false;
                    }
                });
            };
            ResultsFiltersPreferences.prototype.getActiveFilters = function () {
                var _this = this;
                var activeTab = this.getActiveTab();
                return Coveo._.filter(this.preferences, function (filter) {
                    return filter.selected && _this.filterIsInActiveTab(filter, activeTab);
                });
            };
            ResultsFiltersPreferences.prototype.getInactiveFilters = function () {
                var _this = this;
                var activeTab = this.getActiveTab();
                return Coveo._.filter(this.preferences, function (filter) {
                    return !filter.selected || !_this.filterIsInActiveTab(filter, activeTab);
                });
            };
            ResultsFiltersPreferences.prototype.getActiveTab = function () {
                return this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.t);
            };
            ResultsFiltersPreferences.prototype.filterIsInActiveTab = function (filter, tab) {
                filter.tab = Coveo._.compact(filter.tab);
                return Coveo._.contains(filter.tab, tab) || Coveo.Utils.isEmptyArray(filter.tab);
            };
            ResultsFiltersPreferences.prototype.getFilterElementByCaption = function (caption) {
                return this.preferenceContainer.find("input[value='" + caption + "']").parent();
            };
            ResultsFiltersPreferences.prototype.fromResultsFilterOptionToResultsPreferenceInterface = function (filters) {
                if (filters === void 0) { filters = this.options.filters; }
                var ret = {};
                Coveo._.each(this.options.filters, function (filter, caption) {
                    ret[caption] = {
                        expression: filter.expression,
                        tab: filter.tab,
                        selected: false,
                        custom: false,
                        caption: caption
                    };
                });
                return ret;
            };
            ResultsFiltersPreferences.prototype.mergeLocalPreferencesWithStaticPreferences = function () {
                var staticPreferences = this.fromResultsFilterOptionToResultsPreferenceInterface();
                var localPreferences = this.preferencePanelLocalStorage.load();
                var localPreferencesWithoutRemoved = Coveo._.filter(localPreferences, function (preference) {
                    var isCustom = preference.custom;
                    var existsInStatic = Coveo._.find(staticPreferences, function (staticPreference) {
                        return staticPreference.caption == preference.caption;
                    });
                    return isCustom || existsInStatic != undefined;
                });
                var localToMerge = {};
                Coveo._.each(localPreferencesWithoutRemoved, function (filter) {
                    localToMerge[filter.caption] = {
                        expression: filter.expression,
                        tab: filter.tab,
                        selected: filter.selected,
                        custom: filter.custom,
                        caption: filter.caption
                    };
                });
                this.preferences = Coveo.$.extend(true, {}, staticPreferences, localToMerge);
            };
            ResultsFiltersPreferences.prototype.fromFilterToAnalyticsEvent = function (filter, type) {
                this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.customfiltersChange, {
                    customFilterName: filter.caption,
                    customFilterExpression: filter.expression,
                    customFilterType: type
                });
            };
            ResultsFiltersPreferences.ID = "ResultsFiltersPreferences";
            ResultsFiltersPreferences.options = {
                includeInBreadcrumb: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                showAdvancedFilters: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true })
            };
            return ResultsFiltersPreferences;
        })(Ui.Component);
        Ui.ResultsFiltersPreferences = ResultsFiltersPreferences;
        Ui.CoveoJQuery.registerAutoCreateComponent(ResultsFiltersPreferences);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ResultsPreferences = (function (_super) {
            __extends(ResultsPreferences, _super);
            function ResultsPreferences(element, options, bindings) {
                var _this = this;
                _super.call(this, element, ResultsPreferences.ID, bindings);
                this.element = element;
                this.options = options;
                this.bindings = bindings;
                this.options = Ui.ComponentOptions.initComponentOptions(element, ResultsPreferences, options);
                this.preferencePanel = Coveo.$(this.element).parents("." + Ui.Component.computeCssClassNameForType(Ui.PreferencesPanel.ID));
                this.preferencePanelLocalStorage = new Coveo.LocalStorageUtils(ResultsPreferences.ID);
                Coveo.Assert.exists(this.componentOptionsModel);
                Coveo.Assert.exists(window.localStorage);
                Coveo.Assert.isLargerOrEqualsThan(1, this.preferencePanel.length);
                this.preferences = this.preferencePanelLocalStorage.load() || {};
                Ui.ComponentOptions.initComponentOptions(this.element, ResultsPreferences, this.preferences);
                this.updateComponentOptionsModel();
                this.bind.on(this.preferencePanel, Coveo.Events.PreferencesPanelEvents.savePreferences, function () { return _this.save(); });
                this.bind.on(this.preferencePanel, Coveo.Events.PreferencesPanelEvents.exitPreferencesWithoutSave, function () { return _this.exitWithoutSave(); });
                this.buildTitle();
                this.buildCheckboxesInput();
            }
            ResultsPreferences.prototype.save = function () {
                this.fromCheckboxInputToPreferences();
                this.logger.info("Saving preferences", this.preferences);
                this.preferencePanelLocalStorage.save(this.preferences);
                this.updateComponentOptionsModel();
            };
            ResultsPreferences.prototype.exitWithoutSave = function () {
                this.fromPreferencesToCheckboxInput();
            };
            ResultsPreferences.prototype.updateComponentOptionsModel = function () {
                this.componentOptionsModel.set(Coveo.Models.ComponentOptionsModel.attributesEnum.resultLink, this.preferences);
            };
            ResultsPreferences.prototype.buildTitle = function () {
                Coveo.$(this.element).append(Coveo.$("<div class='coveo-title'>" + Ui.l("LinkOpeningSettings") + "</div>"));
            };
            ResultsPreferences.prototype.buildCheckboxesInput = function () {
                var _this = this;
                this.preferencePanelCheckboxInput = new Ui.PreferencesPanelCheckboxInput([{ label: Ui.l("OpenInOutlookWhenPossible") }, { label: Ui.l("AlwaysOpenInNewWindow") }], ResultsPreferences.ID);
                var container = Coveo.$("<div class='coveo-choices-container'></div>");
                container.append(this.preferencePanelCheckboxInput.build());
                container.find('input').change(function (e) {
                    _this.fromPreferenceChangeEventToUsageAnalyticsLog(e);
                    _this.save();
                    _this.queryController.executeQuery();
                });
                Coveo.$(this.element).append(container);
                this.fromPreferencesToCheckboxInput();
            };
            ResultsPreferences.prototype.fromCheckboxInputToPreferences = function () {
                var selected = this.preferencePanelCheckboxInput.getSelecteds();
                this.preferences = {
                    openInOutlook: false,
                    alwaysOpenInNewWindow: false
                };
                if (Coveo._.contains(selected, Ui.l("OpenInOutlookWhenPossible"))) {
                    this.preferences.openInOutlook = true;
                }
                if (Coveo._.contains(selected, Ui.l("AlwaysOpenInNewWindow"))) {
                    this.preferences.alwaysOpenInNewWindow = true;
                }
            };
            ResultsPreferences.prototype.fromPreferencesToCheckboxInput = function () {
                if (this.preferences.openInOutlook) {
                    this.preferencePanelCheckboxInput.select(Ui.l("OpenInOutlookWhenPossible"));
                }
                if (this.preferences.alwaysOpenInNewWindow) {
                    this.preferencePanelCheckboxInput.select(Ui.l("AlwaysOpenInNewWindow"));
                }
            };
            ResultsPreferences.prototype.fromPreferenceChangeEventToUsageAnalyticsLog = function (e) {
                var type = Coveo.$(e.target).is(":checked") ? "selected" : "unselected";
                var preference = Coveo.$(e.target).val();
                this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.preferencesChange, { preferenceName: preference, preferenceType: type });
            };
            ResultsPreferences.ID = "ResultsPreferences";
            ResultsPreferences.options = {
                showOpenInOutlook: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                loadBooleanFromAttribute: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true })
            };
            return ResultsPreferences;
        })(Ui.Component);
        Ui.ResultsPreferences = ResultsPreferences;
        Ui.CoveoJQuery.registerAutoCreateComponent(ResultsPreferences);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ResultTagging = (function (_super) {
            __extends(ResultTagging, _super);
            function ResultTagging(element, options, bindings, result, os) {
                _super.call(this, element, ResultTagging.ID, bindings);
                this.element = element;
                this.options = options;
                this.result = result;
                this.os = os;
                this.options = Ui.ComponentOptions.initComponentOptions(element, ResultTagging, options);
                this.options = Coveo.$.extend({}, this.options);
                this.result = result || this.resolveResult();
                Coveo.Assert.exists(this.componentOptionsModel);
                Coveo.Assert.exists(this.result);
                if (!this.options.field) {
                    this.logger.error("You must specify a field to the ResultTagging component");
                }
                this.tags = this.result.raw[Coveo.Utils.getCoveoFieldKey(this.options.field)] || [];
                this.tagZone = Coveo.$('<div></div>').addClass('coveo-tag-zone').appendTo(Coveo.$(element));
                Coveo.$(element).append(this.buildTagIcon());
                this.autoCompleteZone = Coveo.$('<div></div>').addClass('coveo-auto-complete-zone').appendTo(Coveo.$(element));
                Coveo.$(this.autoCompleteZone).append(this.buildTextBox());
                Coveo.$(this.autoCompleteZone).append(this.buildAddIcon());
                Coveo.$(this.autoCompleteZone).append(this.buildClearIcon());
                this.buildExistingTags();
            }
            ResultTagging.prototype.buildExistingTags = function () {
                var _this = this;
                if (this.tags) {
                    Coveo._.each(this.tags, function (tag) {
                        Coveo.$(_this.tagZone).append(_this.buildTagValue(tag));
                    });
                }
            };
            ResultTagging.prototype.buildTagIcon = function () {
                var _this = this;
                var tagZone = Coveo.$('<div></div>').addClass('coveo-add-tag');
                var tagTextBox = Coveo.$('<span></span>').text(Ui.l("EnterTag")).addClass('coveo-add-tag-text');
                tagZone.append(Coveo.$('<span></span>').addClass('coveo-add-tag-icon').fastClick(function () { return setTimeout(Coveo.$.proxy(_this.focusOnTextBox, _this), 20); }));
                tagZone.append(tagTextBox);
                tagZone.attr('title', Ui.l("EnterTag"));
                return tagZone;
            };
            ResultTagging.prototype.focusOnTextBox = function () {
                this.textBox.focus();
            };
            ResultTagging.prototype.buildTagValue = function (tagValue) {
                var _this = this;
                var tag = Coveo.$('<div></div>').addClass('coveo-tag');
                this.buildShortenedTagWithTitle(tagValue).appendTo(tag);
                var deleteIcon = Coveo.$('<span></span>').addClass('coveo-delete-icon').appendTo(tag);
                deleteIcon.fastClick(function () { return _this.doRemoveTag(tag, tagValue.toLowerCase()); });
                return tag;
            };
            ResultTagging.prototype.buildShortenedTagWithTitle = function (tagValue) {
                var shortenedTag = Coveo.StringUtils.removeMiddle(tagValue, 16, "...");
                var clickableValue = Coveo.$('<a></a>').text(shortenedTag).attr('title', tagValue).attr('href', 'javascript:void;');
                this.bindFacetEventOnValue(clickableValue, tagValue);
                return clickableValue;
            };
            ResultTagging.prototype.buildTextBox = function () {
                var _this = this;
                this.textBox = Coveo.$('<input/>').attr('type', 'text').addClass('coveo-add-tag-textbox').attr('placeholder', Ui.l("EnterTag"));
                this.autoCompletePopup = Coveo.$('<div></div>').addClass(ResultTagging.AUTO_COMPLETE_CLASS).appendTo(Coveo.$(this.autoCompleteZone));
                this.manageAutocompleteAutoHide();
                this.textBox.keyup(function (e) {
                    if (e.keyCode == 38 /* UP_ARROW */ || e.keyCode == 40 /* DOWN_ARROW */ || e.keyCode == 13 /* ENTER */) {
                        _this.manageUpDownEnter(e.keyCode);
                    }
                    else if (!Coveo.KeyboardUtils.isArrowKeyPushed(e.keyCode)) {
                        _this.populateSuggestions();
                    }
                    Coveo.$(_this.element).removeClass('coveo-error');
                });
                this.textBox.fastClick(function () {
                    _this.populateSuggestions();
                });
                return this.textBox;
            };
            ResultTagging.prototype.buildAddIcon = function () {
                var _this = this;
                return Coveo.$('<div></div>').addClass('coveo-add-tag-tick-icon').append(Coveo.$('<span></span>')).fastClick(function () { return _this.doAddTag(); });
            };
            ResultTagging.prototype.buildClearIcon = function () {
                var _this = this;
                return Coveo.$('<div></div>').addClass('coveo-clear-icon').append(Coveo.$('<span></span>')).fastClick(function () { return _this.textBox.val(""); });
            };
            ResultTagging.prototype.bindFacetEventOnValue = function (element, value) {
                var _this = this;
                var facetAttributeName = Coveo.Models.QueryStateModel.getFacetId(this.options.field);
                var facetModel = this.queryStateModel.get(facetAttributeName);
                var facets = this.componentStateModel.get(facetAttributeName);
                var atLeastOneFacetIsEnabled = Coveo._.filter(facets, function (value) { return !value.disabled; }).length > 0;
                if (facetModel != null && atLeastOneFacetIsEnabled) {
                    Coveo.$(element).on("click", function () {
                        if (Coveo._.contains(facetModel, value)) {
                            _this.queryStateModel.set(facetAttributeName, Coveo._.without(facetModel, value));
                        }
                        else {
                            _this.queryStateModel.set(facetAttributeName, Coveo._.union(facetModel, [value]));
                        }
                        _this.queryController.deferExecuteQuery({
                            beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.documentTag, { facetId: _this.options.field, facetValue: value }); }
                        });
                    });
                    if (Coveo._.contains(facetModel, value)) {
                        Coveo.$(element).addClass('coveo-selected');
                    }
                    Coveo.$(element).addClass('coveo-clickable');
                }
            };
            ResultTagging.prototype.clearPopup = function () {
                this.autoCompletePopup.hide();
                this.autoCompletePopup.empty();
            };
            ResultTagging.prototype.showPopup = function () {
                this.autoCompletePopup.show();
            };
            ResultTagging.prototype.populateSuggestions = function () {
                var _this = this;
                this.autoCompletePopup.width(this.textBox.innerWidth());
                var endpoint = this.queryController.getEndpoint();
                var searchText = this.textBox.val();
                var searchOptions = {
                    field: this.options.field,
                    ignoreAccents: true,
                    sortCriteria: 'occurences',
                    maximumNumberOfValues: this.options.suggestBoxSize,
                    queryOverride: '@sysuri',
                    pattern: this.buildRegEx(searchText),
                    patternType: 'RegularExpression'
                };
                var deferred = endpoint.listFieldValues(searchOptions).done(function (fieldValues) {
                    _this.clearPopup();
                    Coveo._.each(fieldValues, function (fieldValue) {
                        _this.autoCompletePopup.append(_this.buildSelectableValue(fieldValue.lookupValue));
                    });
                    _this.showPopup();
                });
            };
            ResultTagging.prototype.manageAutocompleteAutoHide = function () {
                var _this = this;
                var timeout;
                this.textBox.on('mouseover', function () {
                    window.clearTimeout(timeout);
                });
                this.autoCompletePopup.mouseout(function (e) {
                    if (Coveo.$(e.target).hasClass(ResultTagging.AUTO_COMPLETE_CLASS)) {
                        timeout = window.setTimeout(Coveo.$.proxy(_this.clearPopup, _this), _this.options.autoCompleteTimer);
                    }
                });
                this.autoCompletePopup.mouseenter(function () {
                    window.clearTimeout(timeout);
                });
                Coveo.$(this.element).mouseenter(function () {
                    _this.clearPopup();
                    Coveo.$(_this.element).addClass('coveo-opened');
                });
                Coveo.$(this.element).closest('.CoveoResult').mouseleave(function () {
                    _this.clearPopup();
                    if (_this.textBox.val() == "") {
                        Coveo.$(_this.element).removeClass('coveo-opened');
                    }
                });
                Coveo.$(this.element).closest('.CoveoResult').focusout(function (e) {
                    if (_this.textBox.val() != "" && (Coveo.$(e.target).closest('.CoveoResult') != Coveo.$(_this.element).closest('.CoveoResult'))) {
                        Coveo.$(_this.element).addClass('coveo-error');
                    }
                });
                Coveo.$(this.element).closest('.CoveoResult').focusin(function () {
                    Coveo.$(_this.element).removeClass('coveo-error');
                });
            };
            /**
            Exclude tags that are already on the result (Since we can tag with the same value twice)
            **/
            ResultTagging.prototype.buildRegEx = function (searchTerm) {
                var _this = this;
                return '(?=.*' + searchTerm + ')' + Coveo._.map(this.tags, function (tag) { return _this.buildTermToExclude(tag); }).join('') + '.*';
            };
            ResultTagging.prototype.buildTermToExclude = function (term) {
                return "(?!^" + term + "$)";
            };
            ResultTagging.prototype.manageUpDownEnter = function (code) {
                var selectableArray = Coveo.$(this.element).find('.coveo-selectable');
                if (code == 13 /* ENTER */) {
                    this.doAddTag();
                    return;
                }
                if (selectableArray.length > 0) {
                    var newIndex = this.computeNextIndex(code, selectableArray);
                    newIndex = Math.max(0, newIndex);
                    newIndex = Math.min(selectableArray.length - 1, newIndex);
                    var selected = Coveo.$(selectableArray.get(newIndex));
                    selected.addClass('coveo-selected');
                    this.textBox.val(selected.text());
                }
            };
            ResultTagging.prototype.computeNextIndex = function (code, selectableArray) {
                var nextIndex = 0;
                Coveo._.each(selectableArray, function (selectable, index) {
                    if (Coveo.$(selectable).hasClass('coveo-selected')) {
                        if (code == 38 /* UP_ARROW */) {
                            nextIndex = index - 1;
                        }
                        else if (code == 40 /* DOWN_ARROW */) {
                            nextIndex = index + 1;
                        }
                        Coveo.$(selectable).removeClass('coveo-selected');
                    }
                });
                return nextIndex;
            };
            ResultTagging.prototype.buildSelectableValue = function (lookupValue) {
                var _this = this;
                var line = Coveo.$('<div></div>').append(this.buildShortenedTagWithTitle(lookupValue));
                line.addClass('coveo-selectable');
                line.fastClick(function () {
                    _this.doAddTagWithValue(lookupValue);
                });
                return line;
            };
            ResultTagging.prototype.doRemoveTag = function (element, tagValue) {
                var _this = this;
                var request = {
                    fieldName: this.options.field,
                    fieldValue: tagValue,
                    doAdd: false,
                    uniqueId: this.result.uniqueId
                };
                var deferred = this.queryController.getEndpoint().tagDocument(request);
                deferred.done(function () {
                    _this.tags.splice(Coveo.$.inArray(tagValue, _this.tags), 1);
                    element.remove();
                });
            };
            ResultTagging.prototype.doAddTagWithValue = function (tagValue) {
                var _this = this;
                Coveo._.each(tagValue.split(','), function (tag) {
                    _this.doAddSingleTagValue(tag);
                });
            };
            ResultTagging.prototype.doAddSingleTagValue = function (tagValue) {
                var _this = this;
                this.clearPopup();
                if (Coveo.$.inArray(tagValue, this.tags) > -1) {
                    Coveo.$(this.element).addClass('coveo-error');
                    return;
                }
                this.tags.push(tagValue);
                var request = {
                    fieldName: this.options.field,
                    fieldValue: tagValue,
                    doAdd: true,
                    uniqueId: this.result.uniqueId
                };
                var deferred = this.queryController.getEndpoint().tagDocument(request);
                deferred.done(function () {
                    _this.tagZone.append(_this.buildTagValue(tagValue));
                    _this.textBox.val('');
                    Coveo.$(_this.element).removeClass('coveo-error');
                }).fail(function () {
                    //We do this otherwise it's possible to add the same tag while we wait for the server's response
                    _this.tags = Coveo._.without(_this.tags, Coveo._.findWhere(_this.tags, tagValue));
                });
            };
            ResultTagging.prototype.doAddTag = function () {
                var tagValue = this.textBox.val().toLowerCase().trim();
                this.doAddTagWithValue(tagValue);
            };
            ResultTagging.ID = 'ResultTagging';
            ResultTagging.options = {
                field: Ui.ComponentOptions.buildStringOption(),
                suggestBoxSize: Ui.ComponentOptions.buildNumberOption({ defaultValue: 5 }),
                autoCompleteTimer: Ui.ComponentOptions.buildNumberOption({ defaultValue: 2000 })
            };
            ResultTagging.AUTO_COMPLETE_CLASS = 'coveo-auto-complete';
            return ResultTagging;
        })(Ui.Component);
        Ui.ResultTagging = ResultTagging;
        Ui.CoveoJQuery.registerAutoCreateComponent(ResultTagging);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Settings = (function (_super) {
            __extends(Settings, _super);
            function Settings(element, options, bindings) {
                _super.call(this, element, Settings.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, Settings, options);
                Coveo.$(this.root).on(Coveo.Events.InitializationEvents.afterInitialization, Coveo.$.proxy(this.init, this));
            }
            Settings.prototype.init = function () {
                var _this = this;
                this.menu = this.buildMenu();
                Coveo.$('<span/>').addClass('coveo-settings-icon').appendTo(this.element);
                Coveo.$(this.element).fastClick(function () {
                    _this.toggleMenu();
                });
                this.settingsButton = Coveo.$(this.element);
                var closeTimeout;
                Coveo.$([this.settingsButton[0], this.menu[0]]).mouseleave(function () {
                    closeTimeout = setTimeout(function () {
                        _this.menu.detach();
                    }, _this.options.menuDelay);
                }).mouseenter(function () {
                    clearTimeout(closeTimeout);
                });
            };
            Settings.prototype.buildMenu = function () {
                var menu = Coveo.$('<div/>').addClass('coveo-advanced-menu');
                var menuData = Coveo._.map(this.options.includeInMenu, function (selector) {
                    return Coveo.$(selector).coveo();
                });
                menu.append(this.buildSection(menuData));
                return menu;
            };
            Settings.prototype.buildSection = function (menuData) {
                var _this = this;
                var toReturn = Coveo._.map(menuData, function (menu) {
                    var otherMenus = Coveo._.filter(menuData, function (otherMenu) {
                        return !Coveo.Utils.objectEqual(otherMenu, menu);
                    });
                    if (menu != undefined) {
                        var section = Coveo.$('<div/>').addClass('coveo-section').addClass(menu.getCssClass());
                        Coveo.$('<div/>').addClass('coveo-icon').appendTo(section);
                        var textsDiv = Coveo.$('<div>').addClass('coveo-items').appendTo(section);
                        Coveo._.each(menu.getMenuItems(), function (menuItem) {
                            var otherMenuItems = Coveo._.filter(menu.getMenuItems(), function (otherMenuItem) {
                                return otherMenuItem.text != menuItem.text;
                            });
                            textsDiv.append(_this.buildLine(menuItem.text, menuItem.onOpen, otherMenus, otherMenuItems));
                        });
                    }
                    return section;
                });
                return Coveo._.reduce(toReturn, function (memo, section) {
                    return memo.add(section);
                }, Coveo.$());
            };
            Settings.prototype.buildLine = function (text, onOpen, otherMenu, otherMenuItems) {
                var _this = this;
                var concat = otherMenuItems.concat(Coveo._.compact(Coveo._.flatten(Coveo._.map(otherMenu, function (menu) {
                    return menu ? menu.getMenuItems() : undefined;
                }), true)));
                return Coveo.$('<div/>').addClass('coveo-item').text(text).fastClick(function () {
                    _this.menu.detach();
                    onOpen();
                    Coveo._.invoke(concat, 'onClose');
                });
            };
            Settings.prototype.toggleMenu = function () {
                if (this.menu.is(':visible')) {
                    this.menu.detach();
                }
                else {
                    Coveo.JQueryUtils.positionPopup(this.menu, Coveo.$(this.element), Coveo.$(this.root), Coveo.$(this.root), this.getPopupPositioning());
                }
            };
            Settings.prototype.getPopupPositioning = function () {
                return {
                    horizontal: 4 /* innerRight */,
                    vertical: 2 /* bottom */,
                    verticalOffset: 8
                };
            };
            Settings.ID = 'Settings';
            Settings.options = {
                includeInMenu: Ui.ComponentOptions.buildListOption({ defaultValue: [] }),
                menuDelay: Ui.ComponentOptions.buildNumberOption({ defaultValue: 300 })
            };
            return Settings;
        })(Ui.Component);
        Ui.Settings = Settings;
        Ui.CoveoJQuery.registerAutoCreateComponent(Settings);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ShareQuery = (function (_super) {
            __extends(ShareQuery, _super);
            function ShareQuery(element, options, bindings) {
                _super.call(this, element, ShareQuery.ID, bindings);
                this.element = element;
                this.options = options;
                this.dialogBoxContent = this.buildContent();
                Coveo.$(element).append(this.dialogBoxContent);
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.querySuccess, Coveo.$.proxy(this.handleProcessNewQueryResults, this));
            }
            ShareQuery.prototype.open = function () {
                Coveo.$('.' + Ui.Component.computeMemberNameForType(ShareQuery.ID)).height(137);
            };
            ShareQuery.prototype.close = function () {
                Coveo.$(this.element).height(0);
            };
            ShareQuery.prototype.getCssClass = function () {
                return 'coveo-share-query';
            };
            ShareQuery.prototype.getMenuItems = function () {
                var _this = this;
                return [{ text: Ui.l("ShareQuery"), onOpen: function () { return _this.open(); }, onClose: function () { return _this.close(); } }];
            };
            ShareQuery.prototype.handleProcessNewQueryResults = function (e, data) {
                Coveo.Assert.exists(data);
                Coveo.Assert.exists(data.results);
                var query = data.query;
                this.linkToThisQuery.val(window.location.href);
                this.completeQuery.val(Coveo.$.trim(this.outputIfNotNull(query.q) + ' ' + this.outputIfNotNull(query.aq) + ' ' + this.outputIfNotNull(query.cq)));
                this.logger.trace('Received query results from new query', query);
            };
            ShareQuery.prototype.outputIfNotNull = function (value) {
                if (value) {
                    return '(' + value + ')';
                }
                return '';
            };
            ShareQuery.prototype.buildContent = function () {
                var _this = this;
                var content = Coveo.$('<div/>').addClass('coveo-query-summary-info');
                content.append(Coveo.$('<span/>').addClass('coveo-query-summary-info-title').text(Ui.l("ShareQuery")));
                var close = Coveo.$('<div/>').addClass('coveo-query-summary-info-close').append('<span/>');
                close.fastClick(function () { return _this.close(); });
                content.append(close);
                var boxes = Coveo.$('<div/>').addClass('coveo-query-summary-info-boxes');
                this.linkToThisQuery = Coveo.$('<input/>').attr('type', 'text').addClass('coveo-query-summary-info-input');
                this.linkToThisQuery.fastClick(function () { return _this.linkToThisQuery.select(); });
                this.completeQuery = Coveo.$('<input/>').attr('type', 'text').addClass('coveo-query-summary-info-input');
                boxes.append(this.buildTextBoxWithLabel(Ui.l("Link") + ":", this.linkToThisQuery));
                boxes.append(this.buildTextBoxWithLabel(Ui.l("CompleteQuery") + ":", this.completeQuery));
                boxes.appendTo(content);
                Ui.Component.pointElementsToDummyForm(content);
                return content;
            };
            ShareQuery.prototype.buildTextBoxWithLabel = function (label, input) {
                var labelElement = Coveo.$('<span/>').addClass('coveo-query-summary-info-label').text(label);
                return Coveo.$('<div/>').append(labelElement).append(input);
            };
            ShareQuery.create = function (element, options, root) {
                Coveo.Assert.exists(element);
                return new ShareQuery(element, options, root);
            };
            ShareQuery.ID = 'ShareQuery';
            ShareQuery.options = {};
            return ShareQuery;
        })(Ui.Component);
        Ui.ShareQuery = ShareQuery;
        Ui.CoveoJQuery.registerAutoCreateComponent(ShareQuery);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var Sort = (function (_super) {
            __extends(Sort, _super);
            function Sort(element, options, bindings) {
                _super.call(this, element, Sort.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, Sort, options);
                Coveo.Assert.isLargerOrEqualsThan(1, this.options.sortCriteria.length);
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne) + Coveo.Models.QueryStateModel.attributesEnum.sort;
                Coveo.$(this.root).on(eventName, Coveo.$.proxy(this.handleQueryStateChanged, this));
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.buildingQuery, Coveo.$.proxy(this.handleBuildingQuery, this));
                this.bind.fastClick(Coveo.$(this.element), this.handleClick);
                if (this.isToggle()) {
                    Coveo.$(this.element).append('<span class="coveo-icon" />');
                }
                this.updateAppearance();
            }
            Sort.prototype.select = function (direction, silent) {
                if (silent === void 0) { silent = false; }
                if (direction) {
                    this.currentCriteria = Coveo._.find(this.options.sortCriteria, function (criteria) {
                        return criteria.direction == direction;
                    });
                }
                else if (Coveo.Utils.exists(this.currentCriteria)) {
                    var indexOfCurrentCriteria = Coveo._.indexOf(this.options.sortCriteria, this.currentCriteria);
                    Coveo.Assert.check(indexOfCurrentCriteria >= 0);
                    this.currentCriteria = this.options.sortCriteria[(indexOfCurrentCriteria + 1) % this.options.sortCriteria.length];
                }
                else {
                    this.currentCriteria = this.options.sortCriteria[0];
                }
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.sort, this.currentCriteria.toString(), { silent: silent });
            };
            Sort.prototype.disable = function () {
                Coveo.$(this.element).addClass('coveo-tab-disabled');
                _super.prototype.disable.call(this);
            };
            Sort.prototype.enable = function () {
                Coveo.$(this.element).removeClass('coveo-tab-disabled');
                _super.prototype.enable.call(this);
            };
            Sort.prototype.getCurrentCriteria = function () {
                return this.currentCriteria;
            };
            Sort.prototype.handleQueryStateChanged = function (e, data) {
                // Basically, if the criteria in the model fits with one of ours, it'll become our active criteria
                var sortCriteria = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.sort);
                if (Coveo.Utils.isNonEmptyString(sortCriteria)) {
                    var criteriaFromModel = Ui.SortCriteria.parse(sortCriteria);
                    this.currentCriteria = Coveo._.find(this.options.sortCriteria, function (criteria) { return criteriaFromModel.equals(criteria); });
                }
                else {
                    this.currentCriteria = null;
                }
                this.updateAppearance();
            };
            Sort.prototype.handleBuildingQuery = function (e, data) {
                Coveo.Assert.exists(data);
                var sort = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.sort);
                if (sort == Coveo.Models.QueryStateModel.defaultAttributes.sort || this.isSelected()) {
                    if (this.currentCriteria) {
                        this.currentCriteria.putInQueryBuilder(data.queryBuilder);
                    }
                }
            };
            Sort.prototype.handleClick = function () {
                var _this = this;
                var oldCriteria = this.currentCriteria;
                this.select();
                if (oldCriteria != this.currentCriteria) {
                    this.queryController.deferExecuteQuery({
                        beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.resultsSort, { resultsSortBy: _this.currentCriteria.sort + _this.currentCriteria.direction }); }
                    });
                }
            };
            Sort.prototype.isToggle = function () {
                return this.options.sortCriteria.length > 1;
            };
            Sort.prototype.isSelected = function () {
                return Coveo.Utils.exists(this.currentCriteria);
            };
            Sort.prototype.updateAppearance = function () {
                Coveo.$(this.element).toggleClass('coveo-selected', this.isSelected());
                if (this.isToggle()) {
                    var direction = this.currentCriteria ? this.currentCriteria.direction : this.options.sortCriteria[0].direction;
                    Coveo.$(this.element).toggleClass('coveo-ascending', direction == "ascending");
                }
            };
            Sort.prototype.match = function (sortId) {
                return Coveo._.any(this.options.sortCriteria, function (sortCriteria) { return sortId == sortCriteria.toString(); });
            };
            Sort.ID = 'Sort';
            Sort.options = {
                sortCriteria: Ui.ComponentOptions.buildCustomListOption(function (values) { return Coveo._.map(values, function (criteria) { return Ui.SortCriteria.parse(criteria); }); })
            };
            return Sort;
        })(Ui.Component);
        Ui.Sort = Sort;
        Ui.CoveoJQuery.registerAutoCreateComponent(Sort);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var StandaloneLogin = (function (_super) {
            __extends(StandaloneLogin, _super);
            function StandaloneLogin(element, options, bindings) {
                _super.call(this, element, Ui.ComponentOptions.initComponentOptions(element, StandaloneLogin, options), bindings, StandaloneLogin.ID);
                this.element = element;
                this.options = options;
                Coveo.$(this.element).hide();
                if (this.options.includeDemoSection) {
                    this.buildAllDemo();
                }
                this.submit();
            }
            StandaloneLogin.prototype.getOrCreateContainerForDemo = function () {
                if (!this.demoContainer) {
                    this.demoContainer = Coveo.$(("<div class='coveo-demo-section-container'></div>"));
                    Coveo.$(this.root).append(this.demoContainer);
                }
                return this.demoContainer;
            };
            StandaloneLogin.prototype.buildAllDemo = function () {
                this.buildNewToCoveoSection();
                this.buildDemoSection();
                this.hideDemoSection();
            };
            StandaloneLogin.prototype.buildDemoSection = function () {
                var _this = this;
                this.demoCoveoSection = Coveo.$("<div class='coveo-demo-section'></div>");
                this.hideDemoSection();
                var backToLogin = Coveo.$("<div class='coveo-demo-section-back-to-login'><span class='coveo-demo-section-arrow-backward'></span>" + Ui.l("GoBack") + "</div>");
                backToLogin.fastClick(function () {
                    _this.hideDemoSection();
                });
                var logo = Coveo.$("<div class='coveo-demo-section-logo'></div>");
                var intro = Coveo.$("<div class='coveo-demo-section-explanation'>" + Ui.l("AppIntro") + "</div>");
                var tryIt = Coveo.$("<button class='coveo-demo-section-try-it'>" + Ui.l("TryDemo") + "</button>");
                tryIt.fastClick(function () {
                    window.location.href = "demo.html";
                });
                var contact = Coveo.$("<button class='coveo-demo-section-contact'>" + Ui.l("ContactUs") + "</button>");
                contact.fastClick(function () {
                    window.open("http://www.coveo.com/company/contact-us", "_system");
                });
                this.demoCoveoSection.append(backToLogin, logo, intro, tryIt, contact);
                this.getOrCreateContainerForDemo().append(this.demoCoveoSection);
            };
            StandaloneLogin.prototype.buildNewToCoveoSection = function () {
                var _this = this;
                this.newToCoveoSection = Coveo.$("<div class='coveo-new-to-coveo-section'><h2>" + Ui.l("NewToCoveo") + "</h2><h3>" + Ui.l("LetUsHelpGetStarted") + "</h3><span class='coveo-demo-section-arrow-forward'></span></div>");
                this.newToCoveoSection.fastClick(function () { return _this.showDemoSection(); });
                this.getOrCreateCombined().append(this.newToCoveoSection);
            };
            StandaloneLogin.prototype.showDemoSection = function () {
                this.getOrCreateContainerForDemo().addClass('coveo-active');
                this.getOrCreateCombined().removeClass('coveo-active');
            };
            StandaloneLogin.prototype.hideDemoSection = function () {
                this.getOrCreateContainerForDemo().removeClass('coveo-active');
                this.getOrCreateCombined().addClass('coveo-active');
            };
            StandaloneLogin.ID = 'StandaloneLogin';
            StandaloneLogin.options = {
                requirePageSettings: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true }),
                includeDemoSection: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true })
            };
            return StandaloneLogin;
        })(Ui.Login);
        Ui.StandaloneLogin = StandaloneLogin;
        Ui.CoveoJQuery.registerAutoCreateComponent(StandaloneLogin);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var StandaloneResult = (function () {
            function StandaloneResult(searchInterface, resultTemplate, result) {
                this.searchInterface = searchInterface;
                this.result = result;
                this.element = resultTemplate.instantiateToElement(result);
                Coveo.$(this.element).data("CoveoResult", result);
                Ui.Component.bindResultToElement(this.element, result);
            }
            StandaloneResult.prototype.initialize = function () {
                var initOptions = this.searchInterface.options;
                var initParameters = Coveo.$.extend({}, { options: initOptions }, this.searchInterface.getBindings(), { result: this.result });
                Ui.CoveoJQuery.automaticallyCreateComponentsInside(this.element, initParameters);
            };
            return StandaloneResult;
        })();
        Ui.StandaloneResult = StandaloneResult;
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var TabGroupMenu = (function (_super) {
            __extends(TabGroupMenu, _super);
            function TabGroupMenu(element, options, bindings) {
                _super.call(this, element, TabGroupMenu.ID, bindings);
                this.options = options;
                this.menuIsOpen = false;
                this.menuItemsContainerTemplate = Coveo._.template("<div class='coveo-menu-item-container'></div>");
                this.activeMenuItemTemplate = Coveo._.template("<a class='coveo-menu-item-active'><%= itemIcon %><%= caption %><%= showMoreIcon %> </a>");
                this.activeMenuItemIconTemplate = Coveo._.template("<span class='coveo-icon <%= _class %>'></span>");
                this.activeMenuItemCaptionTemplate = Coveo._.template("<span class='coveo-caption'><%= text %></span>");
                this.options = Ui.ComponentOptions.initComponentOptions(element, TabGroupMenu, options);
                this.initQueryStateEvents();
                this.initMiscEvents();
            }
            TabGroupMenu.prototype.open = function () {
                this.renderMenu();
                this.menuItemsContainer.css("min-width", this.activeMenuItemDisplay.outerWidth());
                this.menuItemsContainer.show();
                this.activeMenuItemDisplay.addClass('coveo-menu-open');
                this.menuIsOpen = true;
            };
            TabGroupMenu.prototype.close = function () {
                this.menuItemsContainer.hide();
                this.activeMenuItemDisplay.removeClass('coveo-menu-open');
                this.menuIsOpen = false;
            };
            TabGroupMenu.prototype.handleClick = function (e) {
                if (this.targetIsAMenuItem(e)) {
                    this.handleClickOnMenuItem(e);
                }
                else {
                    this.handleClickOnMenu();
                }
            };
            TabGroupMenu.prototype.handleClickOnMenuItem = function (e) {
                var tabGroupItem = Ui.Component.get(this.getCorrectTarget(e).get(0), Ui.TabGroup);
                this.selectMenuItem(this.getItemInMenuById(tabGroupItem.getId()));
                this.close();
                this.queryController.deferExecuteQuery();
            };
            TabGroupMenu.prototype.handleClickOnMenu = function () {
                if (this.menuIsOpen) {
                    this.close();
                }
                else {
                    this.open();
                }
            };
            TabGroupMenu.prototype.handleMouseLeave = function (e) {
                this.close();
            };
            TabGroupMenu.prototype.handleAfterInitialization = function () {
                this.initMenuItems();
                var activeTabGroupItemId = this.queryStateModel.get(Coveo.Models.QueryStateModel.attributesEnum.tg);
                this.selectMenuItem(this.getItemInMenuById(activeTabGroupItemId));
            };
            TabGroupMenu.prototype.handleQueryStateChange = function (e, args) {
                Coveo.Assert.exists(args);
                this.selectMenuItem(this.getItemInMenuById(args.value));
            };
            TabGroupMenu.prototype.initMenuItems = function () {
                var _this = this;
                this.menuItemsContainer = Coveo.$(this.menuItemsContainerTemplate()).hide();
                this.activeMenuItemDisplay = Coveo.$("<div></div>");
                Coveo.$(this.element).append(this.activeMenuItemDisplay, this.menuItemsContainer);
                this.menuItems = Coveo._.map(Coveo.$(this.element).find("." + Ui.Component.computeCssClassNameForType(Ui.TabGroup.ID)), function (elementInside) {
                    _this.menuItemsContainer.append(elementInside);
                    return { tabGroup: Coveo.$(elementInside).coveo(), element: Coveo.$(elementInside) };
                });
            };
            TabGroupMenu.prototype.initQueryStateEvents = function () {
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + Coveo.Models.QueryStateModel.attributesEnum.tg);
                Coveo.$(this.root).on(eventName, Coveo.$.proxy(this.handleQueryStateChange, this));
            };
            TabGroupMenu.prototype.initMiscEvents = function () {
                var _this = this;
                Coveo.$(this.root).on(Coveo.Events.InitializationEvents.afterInitialization, function () { return _this.handleAfterInitialization(); });
                Coveo.$(this.element).fastClick(function (e) {
                    _this.handleClick(e);
                });
                Coveo.$(this.element).mouseleave(function (e) {
                    setTimeout(function () {
                        _this.handleMouseLeave(e);
                    }, _this.options.menuDelay);
                });
            };
            TabGroupMenu.prototype.renderDisplayActiveMenuItem = function () {
                this.activeMenuItemDisplay.empty();
                this.activeMenuItemDisplay.html(this.activeMenuItemTemplate({
                    itemIcon: this.activeMenuItemIconTemplate({
                        _class: this.activeMenuItem.tabGroup.getIcon()
                    }),
                    caption: this.activeMenuItemCaptionTemplate({
                        text: this.activeMenuItem.tabGroup.getTitle()
                    }),
                    showMoreIcon: this.activeMenuItemIconTemplate({
                        _class: 'coveo-show-more'
                    })
                }));
            };
            TabGroupMenu.prototype.renderMenu = function () {
                Coveo._.each(this.getInactiveMenuItems(), function (inactive) {
                    inactive.element.show();
                });
                this.activeMenuItem.element.hide();
            };
            TabGroupMenu.prototype.selectMenuItem = function (menuItem) {
                if (this.menuItems != undefined) {
                    if (menuItem == undefined) {
                        menuItem = this.menuItems[0];
                    }
                    this.activeMenuItem = menuItem;
                    this.activeMenuItem.tabGroup.select();
                    this.renderDisplayActiveMenuItem();
                }
            };
            TabGroupMenu.prototype.getItemInMenuById = function (id) {
                return Coveo._.find(this.menuItems, function (menuItem) {
                    return menuItem.tabGroup.getId() == id;
                });
            };
            TabGroupMenu.prototype.getItemInMenuByElement = function (element) {
                return Coveo._.find(this.menuItems, function (menuItem) {
                    return Coveo.Utils.objectEqual(element, menuItem.element);
                });
            };
            TabGroupMenu.prototype.getInactiveMenuItems = function () {
                var _this = this;
                return Coveo._.reject(this.menuItems, function (menuItem) {
                    return Coveo.Utils.objectEqual(menuItem, _this.activeMenuItem);
                });
            };
            TabGroupMenu.prototype.getItemMenuClass = function () {
                return Ui.Component.computeCssClassNameForType(Ui.TabGroup.ID);
            };
            TabGroupMenu.prototype.getCorrectTarget = function (e) {
                if (Coveo.$(e.target).parent().hasClass(this.getItemMenuClass())) {
                    return Coveo.$(e.target).parent();
                }
                return Coveo.$(e.target);
            };
            TabGroupMenu.prototype.targetIsAMenuItem = function (e) {
                return this.getCorrectTarget(e).hasClass(this.getItemMenuClass());
            };
            TabGroupMenu.ID = 'TabGroupMenu';
            TabGroupMenu.options = {
                menuDelay: Ui.ComponentOptions.buildNumberOption({ defaultValue: 300 })
            };
            return TabGroupMenu;
        })(Ui.Component);
        Ui.TabGroupMenu = TabGroupMenu;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(TabGroupMenu);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var TabGroup = (function (_super) {
            __extends(TabGroup, _super);
            function TabGroup(element, options, bindings) {
                _super.call(this, element, TabGroup.ID, bindings);
                this.options = options;
                this.isSelected = false;
                this.iconTemplate = Coveo._.template("<span class='coveo-icon <%= _class %>'></span>");
                this.options = Ui.ComponentOptions.initComponentOptions(element, TabGroup, options);
                this.title = Coveo.$(this.element).text();
                this.initQueryEvents();
                this.initQueryStateEvents();
                Coveo.$(this.element).prepend(this.iconTemplate({
                    _class: this.options.icon
                }));
            }
            TabGroup.prototype.select = function () {
                this.actionOnSelect();
                this.updateQueryStateModel();
            };
            TabGroup.prototype.getTitle = function () {
                return this.title;
            };
            TabGroup.prototype.getIcon = function () {
                return this.options.icon;
            };
            TabGroup.prototype.getId = function () {
                return this.options.id;
            };
            TabGroup.prototype.actionOnSelect = function () {
                this.hideTabsNotInThisGroup();
                this.isSelected = true;
            };
            TabGroup.prototype.actionOnUnSelect = function () {
                this.isSelected = false;
            };
            TabGroup.prototype.updateQueryStateModel = function () {
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.tg, this.options.id);
            };
            TabGroup.prototype.initQueryEvents = function () {
                Coveo.$(this.root).on(Coveo.Events.QueryEvents.buildingQuery, Coveo.$.proxy(this.handleBuildingQueryEvents, this));
            };
            TabGroup.prototype.initQueryStateEvents = function () {
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + Coveo.Models.QueryStateModel.attributesEnum.tg);
                Coveo.$(this.root).on(eventName, Coveo.$.proxy(this.handleQueryStateChange, this));
            };
            TabGroup.prototype.handleBuildingQueryEvents = function (e, args, foo) {
                Coveo.Assert.exists(args);
                if (this.isSelected && Coveo.Utils.isNonEmptyString(this.options.expression)) {
                    args.queryBuilder.advancedExpression.add(this.options.expression);
                }
            };
            TabGroup.prototype.handleQueryStateChange = function (e, args) {
                Coveo.Assert.exists(args);
                if (args.value == this.options.id) {
                    this.actionOnSelect();
                }
                else {
                    this.actionOnUnSelect();
                }
            };
            TabGroup.prototype.hideTabsNotInThisGroup = function () {
                var _this = this;
                var allTabs = this.getAllTabs();
                Coveo._.each(allTabs, function (tab) {
                    if (_this.isElementIncludedInTabGroup(tab.element)) {
                        tab.enable();
                    }
                    else {
                        tab.disable();
                    }
                });
            };
            TabGroup.prototype.getAllVisibleTab = function () {
                return Coveo._.filter(this.getAllTabs(), function (tab) {
                    return Coveo.$(tab.element).is(":visible");
                });
            };
            TabGroup.prototype.getAllTabs = function () {
                return this.searchInterface.components(Ui.Tab.ID);
            };
            TabGroup.prototype.isElementIncludedInTabGroup = function (element) {
                var tabGroup = Coveo.$(element).attr("data-tab-group");
                return tabGroup == undefined || Coveo._.contains(tabGroup.split(','), this.options.id);
            };
            TabGroup.ID = "TabGroup";
            TabGroup.options = {
                id: Ui.ComponentOptions.buildStringOption(),
                icon: Ui.ComponentOptions.buildIconOption(),
                expression: Ui.ComponentOptions.buildStringOption()
            };
            return TabGroup;
        })(Ui.Component);
        Ui.TabGroup = TabGroup;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(TabGroup);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var ToggleButton = (function (_super) {
            __extends(ToggleButton, _super);
            function ToggleButton(element, options, bindings) {
                var _this = this;
                _super.call(this, element, ToggleButton.ID, bindings);
                this.element = element;
                this.options = options;
                this.options = Ui.ComponentOptions.initComponentOptions(element, ToggleButton, options);
                Coveo.Assert.exists(element);
                Coveo.Assert.exists(this.options);
                this.classToToggle = this.options.toggleClass;
                this.target = this.options.target;
                this.activateGlass = this.options.activateGlass;
                if (this.activateGlass) {
                    this.buildGlass();
                }
                Coveo.$(element).fastClick(function () { return _this.handleClick(); });
                // Provide a dummy href if the element is an hyperlink
                if (element.tagName == 'A') {
                    Coveo.$(element).attr('href', 'javascript:');
                }
                var eventName = this.queryStateModel.getEventName(Coveo.Models.Model.eventTypes.changeOne + Coveo.Models.QueryStateModel.attributesEnum.t);
                this.bind.onRoot(eventName, this.handleTabChanged);
            }
            ToggleButton.prototype.handleClick = function () {
                if (Coveo.$("." + this.target).hasClass(this.classToToggle)) {
                    this.removeToggleClass();
                }
                else {
                    this.addToggleClass();
                }
            };
            ToggleButton.prototype.handleTabChanged = function () {
                this.removeToggleClass();
            };
            ToggleButton.prototype.addToggleClass = function () {
                Coveo.MobileUtils.addToggleClassOnSearchInterface(this.classToToggle.substr(6), Coveo.DeviceUtils.isPhonegap());
            };
            ToggleButton.prototype.removeToggleClass = function () {
                Coveo.MobileUtils.removeToggleClassOnSearchInterface(Coveo.DeviceUtils.isPhonegap());
            };
            ToggleButton.prototype.getGlass = function () {
                return Coveo.$(".coveo-glass");
            };
            ToggleButton.prototype.buildGlass = function () {
                if (this.getGlass().length == 0) {
                    var glass = Coveo.$("<div></div>").addClass('coveo-glass');
                    glass.fastClick(function () {
                        Coveo.MobileUtils.removeToggleClassOnSearchInterface();
                    });
                    var searchInterface = Coveo.$("." + Ui.Component.computeCssClassNameForType(Ui.SearchInterface.ID));
                    Coveo.$(searchInterface).append(glass);
                }
            };
            ToggleButton.ID = 'ToggleButton';
            ToggleButton.options = {
                toggleClass: Ui.ComponentOptions.buildStringOption(),
                target: Ui.ComponentOptions.buildStringOption(),
                activateGlass: Ui.ComponentOptions.buildBooleanOption({ defaultValue: true })
            };
            return ToggleButton;
        })(Ui.Component);
        Ui.ToggleButton = ToggleButton;
        Ui.CoveoJQuery.registerAutoCreateComponent(ToggleButton);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var TopAnalyticsSuggestions = (function (_super) {
            __extends(TopAnalyticsSuggestions, _super);
            function TopAnalyticsSuggestions(element, options, bindings) {
                _super.call(this, element, TopAnalyticsSuggestions.ID, bindings);
                this.options = options;
                this.topAnalyticsElementHeaderTemplate = Coveo._.template("<div class='coveo-top-analytics-suggestion-header'>\
        <span class='coveo-icon-top-analytics'></span> \
        <span class='coveo-caption'><%= headerTitle %></span> \
      </div>");
                this.topAnalyticsElementRowTemplate = Coveo._.template("<div class='coveo-omnibox-selectable coveo-top-analytics-suggestion-row'> \
        <%= data %> \
      </div>");
                if (this.options.omniboxSuggestionOptions == null) {
                    this.options.omniboxSuggestionOptions = {};
                }
                Ui.ComponentOptions.initComponentOptions(element, TopAnalyticsSuggestions, this.options.omniboxSuggestionOptions);
                this.options.omniboxSuggestionOptions.onSelect = this.options.omniboxSuggestionOptions.onSelect || this.onRowSelection;
                var suggestionStructure = {
                    header: { template: this.topAnalyticsElementHeaderTemplate, title: this.options.omniboxSuggestionOptions.headerTitle },
                    row: this.topAnalyticsElementRowTemplate
                };
                this.suggestionForOmniBox = new Ui.SuggestionForOmniBox(suggestionStructure, Coveo.$.proxy(this.options.omniboxSuggestionOptions.onSelect, this));
                Coveo.$(this.root).on(Coveo.Events.OmniBoxEvents.populateOmniBox, Coveo.$.proxy(this.handlePopulateOmnibox, this));
            }
            TopAnalyticsSuggestions.prototype.handlePopulateOmnibox = function (e, args) {
                var _this = this;
                Coveo.Assert.exists(args);
                if (!this.disabled) {
                    var deferred = Coveo.$.Deferred();
                    var searchDeferred = this.usageAnalytics.getTopQueries({ pageSize: this.options.omniboxSuggestionOptions.numberOfSuggestions, queryText: args.completeQueryExpression.word });
                    searchDeferred.done(function (results) {
                        var resultsToBuildWith = Coveo._.map(results, function (result) {
                            return {
                                value: result
                            };
                        });
                        var element = _this.suggestionForOmniBox.buildOmniBoxElement(resultsToBuildWith, args);
                        deferred.resolve({
                            element: element == undefined ? undefined : element.get(0),
                            zIndex: _this.options.omniboxSuggestionOptions.omniboxZIndex
                        });
                    });
                    searchDeferred.fail(function () {
                        _this.resolveWithUndefined(deferred);
                    });
                    args.rows.push({ deferred: deferred });
                }
            };
            TopAnalyticsSuggestions.prototype.onRowSelection = function (value, args) {
                var _this = this;
                args.clear();
                args.closeOmniBox();
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.q, value);
                this.queryController.deferExecuteQuery({ beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.omniboxAnalytics, {}); } });
            };
            TopAnalyticsSuggestions.prototype.resolveWithUndefined = function (deferred) {
                deferred.resolve({
                    element: undefined
                });
            };
            TopAnalyticsSuggestions.ID = "TopAnalyticsSuggestions";
            TopAnalyticsSuggestions.options = {
                omniboxZIndex: Ui.ComponentOptions.buildNumberOption({ defaultValue: 52 }),
                headerTitle: Ui.ComponentOptions.buildLocalizedStringOption({ defaultValue: Ui.l("SuggestedQueries") }),
                numberOfSuggestions: Ui.ComponentOptions.buildNumberOption({ defaultValue: 5 })
            };
            return TopAnalyticsSuggestions;
        })(Coveo.Ui.Component);
        Ui.TopAnalyticsSuggestions = TopAnalyticsSuggestions;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(TopAnalyticsSuggestions);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
;
var Coveo;
(function (Coveo) {
    var Ui;
    (function (Ui) {
        var TopFieldSuggestions = (function (_super) {
            __extends(TopFieldSuggestions, _super);
            function TopFieldSuggestions(element, options, bindings) {
                _super.call(this, element, TopFieldSuggestions.ID, bindings);
                this.options = options;
                this.topFieldElementHeaderTemplate = Coveo._.template("<div class='coveo-top-field-suggestion-header'>\
        <span class='coveo-icon-top-field'></span> \
        <span class='coveo-caption'><%= headerTitle %></span> \
      </div>");
                this.topFieldElementRowTemplate = Coveo._.template("<div class='coveo-omnibox-selectable coveo-top-field-suggestion-row'> \
        <%= data %> \
      </div>");
                this.options = Ui.ComponentOptions.initComponentOptions(element, TopFieldSuggestions, options);
                Coveo.Assert.check(Coveo.Utils.isCoveoField(this.options.field), this.options.field + ' is not a valid field');
                this.options.onSelect = this.options.onSelect || this.onRowSelection;
                var suggestionStructure = {
                    header: { template: this.topFieldElementHeaderTemplate, title: this.options.headerTitle },
                    row: this.topFieldElementRowTemplate
                };
                this.suggestionForOmniBox = new Ui.SuggestionForOmniBox(suggestionStructure, Coveo.$.proxy(this.options.onSelect, this));
                Coveo.$(this.root).on(Coveo.Events.OmniBoxEvents.populateOmniBox, Coveo.$.proxy(this.handlePopulateOmniBox, this));
            }
            TopFieldSuggestions.prototype.handlePopulateOmniBox = function (e, args) {
                var _this = this;
                Coveo.Assert.exists(args);
                if (!this.disabled) {
                    var valueToSearch = args.completeQueryExpression.word;
                    var deferred = Coveo.$.Deferred();
                    var searchDeferred = this.queryController.getEndpoint().listFieldValues(this.buildListFieldValueRequest(valueToSearch));
                    searchDeferred.done(function (results) {
                        var element = _this.suggestionForOmniBox.buildOmniBoxElement(results, args);
                        deferred.resolve({
                            element: element == undefined ? undefined : element.get(0),
                            zIndex: _this.options.omniboxZIndex
                        });
                    });
                    searchDeferred.fail(function () {
                        _this.resolveWithUndefined(deferred);
                    });
                    args.rows.push({
                        deferred: deferred
                    });
                }
            };
            TopFieldSuggestions.prototype.resolveWithUndefined = function (deferred) {
                deferred.resolve({
                    element: undefined
                });
            };
            TopFieldSuggestions.prototype.onRowSelection = function (value, args) {
                var _this = this;
                args.clear();
                args.closeOmniBox();
                this.queryStateModel.set(Coveo.Models.QueryStateModel.attributesEnum.q, value);
                this.queryController.deferExecuteQuery({
                    beforeExecuteQuery: function () { return _this.usageAnalytics.logSearchEvent(Ui.AnalyticsActionCauseList.omniboxField, {}); }
                });
            };
            TopFieldSuggestions.prototype.buildListFieldValueRequest = function (valueToSearch) {
                return {
                    field: this.options.field,
                    ignoreAccents: true,
                    sortCriteria: 'occurrences',
                    maximumNumberOfValues: this.options.numberOfSuggestions,
                    patternType: "Wildcards",
                    pattern: "*" + valueToSearch + "*",
                    queryOverride: this.options.queryOverride
                };
            };
            TopFieldSuggestions.ID = "TopFieldSuggestions";
            TopFieldSuggestions.options = {
                field: Ui.ComponentOptions.buildFieldOption({ required: true }),
                queryOverride: Ui.ComponentOptions.buildStringOption({ defaultValue: '' }),
                omniboxZIndex: Ui.ComponentOptions.buildNumberOption({ defaultValue: 51 }),
                headerTitle: Ui.ComponentOptions.buildLocalizedStringOption({ defaultValue: Ui.l("SuggestedResults") }),
                numberOfSuggestions: Ui.ComponentOptions.buildNumberOption({ defaultValue: 5 })
            };
            return TopFieldSuggestions;
        })(Coveo.Ui.Component);
        Ui.TopFieldSuggestions = TopFieldSuggestions;
        Coveo.Ui.CoveoJQuery.registerAutoCreateComponent(TopFieldSuggestions);
    })(Ui = Coveo.Ui || (Coveo.Ui = {}));
})(Coveo || (Coveo = {}));
